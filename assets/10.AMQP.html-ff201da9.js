import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as b,c as u,e as r,a as e,d as l,w as t,f as n,b as i}from"./app-d6438571.js";const p={},k=e("blockquote",null,[e("p",null,"AMQP（Advanced Message Queue）：高级消息队列协议。"),e("p",null,"它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。")],-1),s={class:"table-of-contents"},q=n('<h2 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h2><p>RabbitMQ 是一个由Erlang语言开发的AMQP的开源实现。（PS:前几天有篇文章介绍了阿里P10的淘宝褚霸，就是erlang大神）。支持多种客户端。用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点如下：</p><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><ol><li>可靠性 <blockquote><p>RabbitMQ 使用一些机制来保证可靠性，如持久化，传输确认、发布确认。</p></blockquote></li><li>灵活的路由 <blockquote><p>在消息进入队列之前，通过Exchange来路由消息。对于典型的路由功能，RabbitMQ 提供了内置的Exchange来实现。针对更复杂的路由功能。可以将多个Exchange 绑定在一起，也通过插件机制实现自己的 Exchange。</p></blockquote></li><li>消息集群 <blockquote><p>多个RabbitMQ 服务器可以组成一个集群，形成一个逻辑Broker.</p></blockquote></li><li>高可用 <blockquote><p>队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列任然可用。</p></blockquote></li><li>多种协议 <blockquote><p>RabbitMQ支持多种消息队列协议。比如STOMP、MQTT等等</p></blockquote></li><li>多语言客户端 <blockquote><p>RabbitMQ支持多种语言，比如java/Ruby等</p></blockquote></li><li>管理界面 <blockquote><p>RabbitMQ提供了一个易用的用户界面。使得用户可有监控和管理Broker的许多方面</p></blockquote></li><li>跟踪机制 <blockquote><p>如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出</p></blockquote></li><li>插件机制 <blockquote><p>RabbitMQ提供了许多插件，从多方面进行扩展，也可以编写自己的插件</p></blockquote></li></ol><h3 id="概念模型" tabindex="-1"><a class="header-anchor" href="#概念模型" aria-hidden="true">#</a> 概念模型</h3><ol><li>Message <blockquote><p>消息，消息是不具名的，它由消息头和消息体组成，消息体是不透明的。而消息头则由一系列的可选属性组成。包括routing-key(路由键)、priority(相对于其他消息的优先权)、delivery-mode(指出该消息可能需要持久性存储)等</p></blockquote></li><li>Publisher <blockquote><p>消息的生产者，也是一个向交换器发布消息的客户端应用程序</p></blockquote></li><li>Exchange <blockquote><p>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。</p></blockquote></li><li>Binding <blockquote><p>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则。所以可以将交换器理解成一个由绑定构成的路由表。</p></blockquote></li><li>Queue <blockquote><p>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面。等待消息消费者连接到这个队列将其取走。</p></blockquote></li><li>Connection <blockquote><p>网络连接</p></blockquote></li><li>Channel <blockquote><p>信道，多路复用连接中的一条独立的双向数据流通道。</p></blockquote></li><li>Consumer <blockquote><p>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序</p></blockquote></li><li>Virtual Host <blockquote><p>虚拟主机、表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost 本质上就是一个mini版的RabbitMQ服务器。拥有自己的队列、交换器、绑定、和权限机制。vhost是AMQP概念的基础。必须在连接时指定，RabbitMQ默认的Vhost是/.</p></blockquote></li><li>Broker <blockquote><p>表示消息队列服务器实体。</p><p>Exchange 有四种类型：Direct、Topic、Headers 和 Fanout 。</p><ul><li>Direct：该类型的行为是“先匹配，再投送”，即在绑定时设定一个 routing_key，消息的routing_key 匹配时，才会被交换器投送到绑定的队列中去。</li><li>Topic：按规则转发消息（最灵活）。</li><li>Headers：设置 header attribute 参数类型的交换机。</li><li>Fanout：转发消息到所有绑定队列。</li><li>headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了,这里不再详细介绍</li></ul></blockquote></li></ol>',6);function d(h,_){const o=c("router-link");return b(),u("div",null,[k,r(" more "),e("nav",s,[e("ul",null,[e("li",null,[l(o,{to:"#rabbitmq"},{default:t(()=>[i("RabbitMQ")]),_:1}),e("ul",null,[e("li",null,[l(o,{to:"#简介"},{default:t(()=>[i("简介")]),_:1})]),e("li",null,[l(o,{to:"#概念模型"},{default:t(()=>[i("概念模型")]),_:1})])])])])]),q])}const m=a(p,[["render",d],["__file","10.AMQP.html.vue"]]);export{m as default};
