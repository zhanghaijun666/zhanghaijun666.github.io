import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,d as a,w as t,f as i,b as p}from"./app-d6438571.js";const r={},u={class:"table-of-contents"},k=i(`<h2 id="_1、数据类型" tabindex="-1"><a class="header-anchor" href="#_1、数据类型" aria-hidden="true">#</a> 1、数据类型</h2><p>数据类型是可以存储在变量中的数据规范。解释器根据变量的类型为变量分配内存。</p><table><thead><tr><th>文本类型：</th><th><code>str</code></th></tr></thead><tbody><tr><td>数值类型：</td><td><code>int</code>, <code>float</code>, <code>complex</code></td></tr><tr><td>序列类型：</td><td><code>list</code>, <code>tuple</code>, <code>range</code></td></tr><tr><td>映射类型：</td><td><code>dict</code></td></tr><tr><td>集合类型：</td><td><code>set</code>, <code>frozenset</code></td></tr><tr><td>布尔类型：</td><td><code>bool</code></td></tr><tr><td>二进制类型：</td><td><code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></td></tr></tbody></table><h2 id="_2、变量" tabindex="-1"><a class="header-anchor" href="#_2、变量" aria-hidden="true">#</a> 2、变量</h2><p>变量是存放数据值的容器。</p><p>变量可以使用短名称（如x和y）或更具描述性的名称（age、carname、total_volume）。</p><p>Python 变量命名规则：</p><ul><li>变量名必须以字母或下划线字符开头</li><li>变量名称不能以数字开头</li><li>变量名只能包含字母数字字符和下划线（A-z、0-9和_）</li><li>变量名称区分大小写（age、Age和AGE是三个不同的变量）</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> var1 <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> var2 <span class="token operator">=</span> <span class="token number">16</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> _unuseful <span class="token operator">=</span> <span class="token string">&#39;Single use variables&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/y0SBuxfLhanU7icBXaZQdN5czaN6ibcvUMQImUuhxBapaQ8vEXkwTyYeN6oHc4qcRj4gYzLNZQbgzJs64VDxsJrQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_3、列表" tabindex="-1"><a class="header-anchor" href="#_3、列表" aria-hidden="true">#</a> 3、列表</h2><p>列表（List）是一种有序和可更改的集合，允许重复的成员。</p><p>它可能不是同质的，我们可以创建一个包含不同数据类型（如整数、字符串和对象）的列表。‍</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> companies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;google&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;tcs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;accenture&quot;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>companies<span class="token punctuation">)</span>
<span class="token comment">## [&#39;apple&#39;, &#39;google&#39;, &#39;tcs&#39;, &#39;accenture&#39;]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> companies<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;infosys&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>companies<span class="token punctuation">)</span>
<span class="token comment">## [&#39;apple&#39;, &#39;google&#39;, &#39;tcs&#39;, &#39;accenture&#39;, &#39;infosys&#39;]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>companies<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## 5</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>companies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## tcs</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>companies<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## accenture</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>companies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## [&#39;google&#39;, &#39;tcs&#39;, &#39;accenture&#39;, &#39;infosys&#39;]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>companies<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## [&#39;apple&#39;]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>companies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  
<span class="token comment">## [&#39;google&#39;, &#39;tcs&#39;]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> companies<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;infosys&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>companies<span class="token punctuation">)</span>
<span class="token comment">## [&quot;apple&quot;,&quot;google&quot;,&quot;tcs&quot;,&quot;accenture&quot;]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> companies<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>companies<span class="token punctuation">)</span>
<span class="token comment">## [&quot;apple&quot;,&quot;google&quot;,&quot;tcs&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、集合" tabindex="-1"><a class="header-anchor" href="#_4、集合" aria-hidden="true">#</a> 4、集合</h2><p>集合（Set）是一个无序和无索引的集合，没有重复的成员。</p><p>对于从列表中删除重复条目非常有用。它还支持各种数学运算，例如并集、交集和差分。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>
<span class="token comment">## {1, 2, 3, 7, 8, 9}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> set1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> set1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>
<span class="token comment">## {1, 2, 3, 5, 7, 8}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span>
<span class="token comment">## {1, 2, 4, 6}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># set1 | set2</span>
<span class="token comment">## {1, 2, 3, 4, 5, 6, 7, 8}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># set1 &amp; set2</span>
<span class="token comment">## {1, 2}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># set1 - set2</span>
<span class="token comment">## {8, 3, 5, 7}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># set2 - set1</span>
<span class="token comment">## {4, 6}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、字典" tabindex="-1"><a class="header-anchor" href="#_5、字典" aria-hidden="true">#</a> 5、字典</h2><p>字典是作为键值对的可变无序项集合。</p><p>与其他数据类型不同，它以【键:值】对格式保存数据，而不是存储单个数据。此功能使其成为映射JSON响应的最佳数据结构。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># example 1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Fan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;mail_id&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;codemaker2022@qq.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;phone&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;18650886088&#39;</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
<span class="token comment">## {&#39;mail_id&#39;: &#39;codemaker2022@qq.com&#39;, &#39;age&#39;: 20, &#39;username&#39;: &#39;Fan&#39;, &#39;phone&#39;: &#39;18650886088&#39;}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## 20</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> key <span class="token keyword">in</span> user<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token comment">## mail_id</span>
<span class="token comment">## age</span>
<span class="token comment">## username</span>
<span class="token comment">## phone</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> user<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
codemaker2022@qq<span class="token punctuation">.</span>com
<span class="token comment">## 20</span>
<span class="token comment">## ## Fan</span>
<span class="token comment">## 18650886088</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> user<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token comment">## (&#39;mail_id&#39;, &#39;codemaker2022@qq.com&#39;)</span>
<span class="token comment">## (&#39;age&#39;, 20)</span>
<span class="token comment">## (&#39;username&#39;, &#39;Fan&#39;)</span>
<span class="token comment">## (&#39;phone&#39;, &#39;18650886088&#39;)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># example 2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;Fan&quot;</span><span class="token punctuation">,</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token string">&#39;social_media&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token punctuation">{</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>             <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;Linkedin&quot;</span><span class="token punctuation">,</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>             <span class="token string">&#39;url&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://www.linkedin.com/in/codemaker2022&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token punctuation">{</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>             <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;Github&quot;</span><span class="token punctuation">,</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>             <span class="token string">&#39;url&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://github.com/codemaker2022&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token punctuation">{</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>             <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;QQ&quot;</span><span class="token punctuation">,</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>             <span class="token string">&#39;url&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://codemaker2022.qq.com&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token string">&#39;contact&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token punctuation">{</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>             <span class="token string">&#39;mail&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>                     <span class="token string">&quot;mail.Fan@sina.com&quot;</span><span class="token punctuation">,</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>                     <span class="token string">&quot;codemaker2022@qq.com&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>                 <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>             <span class="token string">&#39;phone&#39;</span><span class="token punctuation">:</span> <span class="token string">&quot;18650886088&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
<span class="token comment">## {&#39;username&#39;: &#39;Fan&#39;, &#39;social_media&#39;: [{&#39;url&#39;: &#39;https://www.linkedin.com/in/codemaker2022&#39;, &#39;name&#39;: &#39;Linkedin&#39;}, {&#39;url&#39;: &#39;https://github.com/codemaker2022&#39;, &#39;name&#39;: &#39;Github&#39;}, {&#39;url&#39;: &#39;https://codemaker2022.qq.com&#39;, &#39;name&#39;: &#39;QQ&#39;}], &#39;contact&#39;: [{&#39;phone&#39;: &#39;18650886088&#39;, &#39;mail&#39;: [&#39;mail.Fan@sina.com&#39;, &#39;codemaker2022@qq.com&#39;]}]}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">&#39;social_media&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## https://www.linkedin.com/in/codemaker2022</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">&#39;contact&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token comment">## [{&#39;phone&#39;: &#39;18650886088&#39;, &#39;mail&#39;: [&#39;mail.Fan@sina.com&#39;, &#39;codemaker2022@qq.com&#39;]}]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、注释" tabindex="-1"><a class="header-anchor" href="#_6、注释" aria-hidden="true">#</a> 6、注释</h2><p>单行注释，以井字符(#)开头，后面带有消息并在行尾结束。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义用户年龄</span>
age <span class="token operator">=</span> <span class="token number">27</span>
dob <span class="token operator">=</span> <span class="token string">&#39;16/12/1994&#39;</span> <span class="token comment"># 定义用户生日</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多行注释，用特殊引号(&quot;&quot;&quot;)括起来，你可以将消息放在多行中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
Python小常识
This is a multi line comment
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、基本功能" tabindex="-1"><a class="header-anchor" href="#_7、基本功能" aria-hidden="true">#</a> 7、基本功能</h2><p>print()函数在控制台中打印提供的消息。此外你还可以提供文件或缓冲区输入作为在屏幕上打印的参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> sep<span class="token operator">=</span>separator<span class="token punctuation">,</span> end<span class="token operator">=</span>end<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">,</span> flush<span class="token operator">=</span>flush<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>               <span class="token comment"># prints Hello World </span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span>            <span class="token comment"># prints Hello World?</span>
x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;AA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CC&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                           <span class="token comment"># prints (&#39;AA&#39;, &#39;BB&#39;, &#39;CC&#39;)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;---&quot;</span><span class="token punctuation">)</span> <span class="token comment"># prints Hello---World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>input()函数用于收集来自控制台的用户输入 。</p><p>这里需要注意，input()会把你输入的任何内容转换为字符串。</p><p>因此，如果你将年龄作为整数值提供，但input()方法将其作为字符串返回，此时就需要手动将其转换为整数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your name: &quot;</span><span class="token punctuation">)</span>
<span class="token comment">## ## Enter your name: Codemaker</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token comment">## Hello Codemaker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>len()可以查看对象的长度。如果你输入一个字符串，则可以获取指定字符串中的字符数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> str1 <span class="token operator">=</span> <span class="token string">&quot;Hello World&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The length of the string  is &quot;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## The length of the string  is 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>str()用于将其他数据类型转换为字符串值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token comment">## 123</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span>
<span class="token comment">## 3.14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>int()用于将字符串转换为整数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
<span class="token comment">## 123</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span>
<span class="token comment">## 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8、条件语句" tabindex="-1"><a class="header-anchor" href="#_8、条件语句" aria-hidden="true">#</a> 8、条件语句</h2><p>条件语句是用于根据特定条件更改程序流程的代码块。这些语句只有在满足特定条件时才会执行。</p><p>在Python中，我们使用if，if-else，循环(for，while)作为条件语句根据某些条件来改变程序的流程。</p><p>if-else语句。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt;&gt;&gt; num = 5
&gt;&gt;&gt; if (num &gt; 0):
&gt;&gt;&gt;    print(&quot;Positive integer&quot;)
&gt;&gt;&gt; else:
&gt;&gt;&gt;    print(&quot;Negative integer&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>elif语句。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">&#39;admin&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">&#39;User1&#39;</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Only read access&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">elif</span> name <span class="token operator">==</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Having read and write access&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">else</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid user&#39;</span><span class="token punctuation">)</span>
Having read <span class="token keyword">and</span> write access
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、循环语句" tabindex="-1"><a class="header-anchor" href="#_9、循环语句" aria-hidden="true">#</a> 9、循环语句</h2><p>循环是一个条件语句，用于重复某些语句（在其主体中），直到满足某个条件。</p><p>在Python中，我们通常使用for和while循环。</p><p>for循环。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># loop through a list</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> companies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;google&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tcs&quot;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> companies<span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token comment">## apple</span>
<span class="token comment">## google</span>
<span class="token comment">## tcs</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># loop through string</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">&quot;TCS&quot;</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token comment">## T</span>
<span class="token comment">## ## C</span>
<span class="token comment">## S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>range()函数返回一个数字序列，它可以用作for循环控制。</p><p>它基本上需要三个参数，其中第二个和第三个是可选的。参数是开始值、停止值和步进数。步进数是每次迭代循环变量的增量值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># loop with range() function</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token comment">## 0</span>
<span class="token comment">## 1</span>
<span class="token comment">## 2</span>
<span class="token comment">## 3</span>
<span class="token comment">## 4</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token comment">## 2</span>
<span class="token comment">## 3</span>
<span class="token comment">## 4</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token comment">## 2</span>
<span class="token comment">## 5</span>
<span class="token comment">## 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以使用else关键字在循环结束时执行一些语句。</p><p>在循环结束时提供else语句以及循环结束时需要执行的语句。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">else</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;finished&quot;</span><span class="token punctuation">)</span>
<span class="token comment">## 0</span>
<span class="token comment">## 1</span>
<span class="token comment">## 2</span>
<span class="token comment">## 3</span>
<span class="token comment">## 4</span>
<span class="token comment">## finished</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>while循环。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
<span class="token comment">## 0</span>
<span class="token comment">## 1</span>
<span class="token comment">## 2</span>
<span class="token comment">## 3</span>
<span class="token comment">## 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在while循环的末尾使用else，类似于for循环，当条件为假时执行一些语句。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">else</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Count is greater than 4&quot;</span><span class="token punctuation">)</span>
<span class="token comment">## 0</span>
<span class="token comment">## 1</span>
<span class="token comment">## 2</span>
<span class="token comment">## 3</span>
<span class="token comment">## 4</span>
<span class="token comment">## Count is greater than 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10、函数" tabindex="-1"><a class="header-anchor" href="#_10、函数" aria-hidden="true">#</a> 10、函数</h2><p>函数是用于执行任务的可重用代码块。在代码中实现模块化并使代码可重用，这是非常有用的。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token comment"># This prints a passed string into this function</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>  <span class="token keyword">return</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> display<span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
<span class="token comment">## Hello World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11、异常处理" tabindex="-1"><a class="header-anchor" href="#_11、异常处理" aria-hidden="true">#</a> 11、异常处理</h2><p>即使语句在语法上是正确的，它也可能在执行时发生错误。这些类型的错误称为异常。我们可以使用异常处理机制来避免此类问题。</p><p>在Python中，我们使用try,except和finally关键字在代码中实现异常处理。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">divider</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">return</span> num1 <span class="token operator">/</span> num2
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Error: Invalid argument: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>     <span class="token keyword">finally</span><span class="token punctuation">:</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;finished&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>divider<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>divider<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## finished</span>
<span class="token comment">## 2.0</span>
<span class="token comment">## Error: Invalid argument: division by zero</span>
<span class="token comment">## finished</span>
<span class="token comment">## None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12、字符串操作" tabindex="-1"><a class="header-anchor" href="#_12、字符串操作" aria-hidden="true">#</a> 12、字符串操作</h2><p>字符串是用单引号或双引号(&#39;,&quot;)括起来的字符集合。</p><p>我们可以使用内置方法对字符串执行各种操作，如连接、切片、修剪、反转、大小写更改和格式化，如split()、lower()、upper()、endswith()、join()和ljust()、rjust()、format()。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> msg <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
<span class="token comment">## Hello World</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## e</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## d</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## H</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## ello World</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## Hello Worl</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## dlroW olleH</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## ello</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## HELLO WORLD</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## hello world</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## Hello, World, 2022</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;World&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2022&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## Hello World 2022</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World 2022&quot;</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## [&#39;Hello&#39;, &#39;World&#39;, &#39;2022&#39;]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World 2022&quot;</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## ---------Hello World 2022</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World 2022&quot;</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## Hello World 2022*</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World 2022&quot;</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## #####Hello World 2022####</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token string">&quot;Codemaker&quot;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s&quot;</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>
<span class="token comment">## Hello Codemaker</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## Hello Codemaker</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello {0}{1}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;2022&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## Hello Codemaker2022</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_13、正则表达式" tabindex="-1"><a class="header-anchor" href="#_13、正则表达式" aria-hidden="true">#</a> 13、正则表达式</h2><ul><li>导入<code>regex</code>模块，import re。</li><li>re.compile()使用该函数创建一个Regex对象。</li><li>将搜索字符串传递给search()方法。</li><li>调用group()方法返回匹配的文本。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> mob <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;My number is 996-190-7453.&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Phone number found: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mob<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## Phone number found: 996-190-7453</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> phone_num_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;^\\d+$&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> is_valid <span class="token operator">=</span> phone_num_regex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;+919961907453.&#39;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>is_valid<span class="token punctuation">)</span>
<span class="token comment">## True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> at_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;.at&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> strs <span class="token operator">=</span> at_regex<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;The cat in the hat sat on the mat.&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>
<span class="token comment">## [&#39;cat&#39;, &#39;hat&#39;, &#39;sat&#39;, &#39;mat&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,77);function d(m,g){const s=o("router-link");return c(),l("div",null,[n("nav",u,[n("ul",null,[n("li",null,[a(s,{to:"#_1、数据类型"},{default:t(()=>[p("1、数据类型")]),_:1})]),n("li",null,[a(s,{to:"#_2、变量"},{default:t(()=>[p("2、变量")]),_:1})]),n("li",null,[a(s,{to:"#_3、列表"},{default:t(()=>[p("3、列表")]),_:1})]),n("li",null,[a(s,{to:"#_4、集合"},{default:t(()=>[p("4、集合")]),_:1})]),n("li",null,[a(s,{to:"#_5、字典"},{default:t(()=>[p("5、字典")]),_:1})]),n("li",null,[a(s,{to:"#_6、注释"},{default:t(()=>[p("6、注释")]),_:1})]),n("li",null,[a(s,{to:"#_7、基本功能"},{default:t(()=>[p("7、基本功能")]),_:1})]),n("li",null,[a(s,{to:"#_8、条件语句"},{default:t(()=>[p("8、条件语句")]),_:1})]),n("li",null,[a(s,{to:"#_9、循环语句"},{default:t(()=>[p("9、循环语句")]),_:1})]),n("li",null,[a(s,{to:"#_10、函数"},{default:t(()=>[p("10、函数")]),_:1})]),n("li",null,[a(s,{to:"#_11、异常处理"},{default:t(()=>[p("11、异常处理")]),_:1})]),n("li",null,[a(s,{to:"#_12、字符串操作"},{default:t(()=>[p("12、字符串操作")]),_:1})]),n("li",null,[a(s,{to:"#_13、正则表达式"},{default:t(()=>[p("13、正则表达式")]),_:1})])])]),k])}const h=e(r,[["render",d],["__file","09.Python基础.html.vue"]]);export{h as default};
