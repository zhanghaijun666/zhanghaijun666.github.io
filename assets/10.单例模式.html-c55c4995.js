const e=JSON.parse('{"key":"v-2c96aa9f","path":"/20.%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/30.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","title":"单例模式","lang":"zh-CN","frontmatter":{"title":"单例模式","date":"2021-02-21T20:08:00.000Z","category":["结构与算法","设计模式"],"tag":["设计模式"],"description":"[[TOC]] 保证一个类只有一个实例，并提供一个全局访问点。当一个对象在整个系统中都可以用到时，单例模式就比较有用了。客户端不在考虑是否要实例化的问题，而把责任都交给应该负责的类去处理。他属性创建型设计模式。 单例模式旨在创建一个类的实例，创建一个类的实例我们用全局静态变量或者约定也能办到单例的作用。 1.1单例如何形成的 平常创建一个对象需要new...","head":[["meta",{"property":"og:url","content":"https://haijunit.top/20.%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/30.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"[[TOC]] 保证一个类只有一个实例，并提供一个全局访问点。当一个对象在整个系统中都可以用到时，单例模式就比较有用了。客户端不在考虑是否要实例化的问题，而把责任都交给应该负责的类去处理。他属性创建型设计模式。 单例模式旨在创建一个类的实例，创建一个类的实例我们用全局静态变量或者约定也能办到单例的作用。 1.1单例如何形成的 平常创建一个对象需要new..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-23T07:13:54.000Z"}],["meta",{"property":"article:author","content":"知识库"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2021-02-21T20:08:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-23T07:13:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-21T20:08:00.000Z\\",\\"dateModified\\":\\"2023-05-23T07:13:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"知识库\\",\\"url\\":\\"https://haijunit.top\\",\\"email\\":\\"zhanghaijun_java@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1.1单例如何形成的","slug":"_1-1单例如何形成的","link":"#_1-1单例如何形成的","children":[]},{"level":2,"title":"1.2 多线程导致单例模式问题","slug":"_1-2-多线程导致单例模式问题","link":"#_1-2-多线程导致单例模式问题","children":[]},{"level":2,"title":"1.3 解决多线程单例问题","slug":"_1-3-解决多线程单例问题","link":"#_1-3-解决多线程单例问题","children":[]},{"level":2,"title":"2.1 通用代码-线程安全","slug":"_2-1-通用代码-线程安全","link":"#_2-1-通用代码-线程安全","children":[]},{"level":2,"title":"8.1 懒加载单例","slug":"_8-1-懒加载单例","link":"#_8-1-懒加载单例","children":[]},{"level":2,"title":"8.2 懒加载多线程解决","slug":"_8-2-懒加载多线程解决","link":"#_8-2-懒加载多线程解决","children":[]},{"level":2,"title":"8.4 静态内部类","slug":"_8-4-静态内部类","link":"#_8-4-静态内部类","children":[]},{"level":2,"title":"8.5 饿汉式","slug":"_8-5-饿汉式","link":"#_8-5-饿汉式","children":[]},{"level":2,"title":"8.6 序列化反序列化破坏单例","slug":"_8-6-序列化反序列化破坏单例","link":"#_8-6-序列化反序列化破坏单例","children":[]},{"level":2,"title":"8.7 反射防御","slug":"_8-7-反射防御","link":"#_8-7-反射防御","children":[]},{"level":2,"title":"8.8 枚举单例","slug":"_8-8-枚举单例","link":"#_8-8-枚举单例","children":[]},{"level":2,"title":"8.9 容器单例","slug":"_8-9-容器单例","link":"#_8-9-容器单例","children":[]},{"level":2,"title":"8.10 克隆破坏","slug":"_8-10-克隆破坏","link":"#_8-10-克隆破坏","children":[]},{"level":2,"title":"9.1 jdk中应用","slug":"_9-1-jdk中应用","link":"#_9-1-jdk中应用","children":[]},{"level":2,"title":"9.2 MyBatis中应用","slug":"_9-2-mybatis中应用","link":"#_9-2-mybatis中应用","children":[]},{"level":2,"title":"9.3 spring中应用","slug":"_9-3-spring中应用","link":"#_9-3-spring中应用","children":[]}],"git":{"createdTime":1684826034000,"updatedTime":1684826034000,"contributors":[{"name":"zhanghaijun","email":"zhanghaijun@bjtxra.com","commits":1}]},"readingTime":{"minutes":10.04,"words":3011},"filePathRelative":"20.结构与算法/30.设计模式/10.单例模式.md","localizedDate":"2021年2月22日","excerpt":"","autoDesc":true}');export{e as data};
