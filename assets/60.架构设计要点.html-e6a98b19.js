import{_ as h}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as t,c as n,e as u,a,d as l,w as i,f as o,b as d}from"./app-d6438571.js";const c={},_=a("p",null,"工欲善其事，必先利其器；士欲宣其义，必先读其书。后台开发作为互联网技术领域的掌上明珠，一直都是开发者们的追逐的高峰。",-1),p={class:"table-of-contents"},s=o('<h2 id="系统开发" tabindex="-1"><a class="header-anchor" href="#系统开发" aria-hidden="true">#</a> 系统开发</h2><h3 id="_1-高内聚-低耦合" tabindex="-1"><a class="header-anchor" href="#_1-高内聚-低耦合" aria-hidden="true">#</a> 1. 高内聚/低耦合</h3><p>高内聚指一个软件模块是由相关性很强的代码组成，只负责一项任务，也就是常说的单一责任原则。模块的内聚反映模块内部联系的紧密程度。</p><p>模块之间联系越紧密，其耦合性就越强，模块的独立性则越差。模块间耦合高低取决于模块间接口的复杂性、调用的方式及传递的信息。一个完整的系统，模块与模块之间，尽可能地使其独立存在。通常程序结构中各模块的内聚程度越高，模块间的耦合程度就越低。</p><h3 id="_2-过度设计" tabindex="-1"><a class="header-anchor" href="#_2-过度设计" aria-hidden="true">#</a> 2. 过度设计</h3><p>过度设计就是进行了过多的面向未来的设计或者说把相对简单的事情想复杂了，过度追求模块化、可扩展性、设计模式等，为系统增加了不必要的复杂度。</p><h3 id="_3-过早优化" tabindex="-1"><a class="header-anchor" href="#_3-过早优化" aria-hidden="true">#</a> 3. 过早优化</h3><p>过早指的不是在开发过程的早期，而是在还没弄清楚需求未来的变化的走向的时候。你的优化不仅可能导致你无法很好地实现新的需求，而且你对优化的预期的猜测有可能还是错的，导致实际上你除了把代码变复杂以外什么都没得到。</p><p>正确的方法是，先有质量地实现你的需求，写testcase，然后做profile去找到性能的瓶颈，这个时候才做优化。</p><h3 id="_4-重构-refactoring" tabindex="-1"><a class="header-anchor" href="#_4-重构-refactoring" aria-hidden="true">#</a> 4. 重构 (Refactoring)</h3><p>重构（Refactoring）就是通过调整程序代码改善软件的质量、性能，使其程序的设计模式和架构更趋合理，提高软件的扩展性和维护性。</p><h3 id="_5-破窗效应" tabindex="-1"><a class="header-anchor" href="#_5-破窗效应" aria-hidden="true">#</a> 5. 破窗效应</h3><p>又称破窗理论，破窗效应（Broken windows theory）是犯罪学的一个理论。此理论认为环境中的不良现象如果被放任存在，会诱使人们仿效，甚至变本加厉。一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里定居或者纵火。</p><p>应用在软件工程上就是，一定不能让系统代码或者架构设计的隐患有冒头的机会，否则随着时间的推移，隐患会越来越重。反之，一个本身优质的系统，会让人不由自主地写出优质的代码。</p><h3 id="_6-互不信任原则" tabindex="-1"><a class="header-anchor" href="#_6-互不信任原则" aria-hidden="true">#</a> 6. 互不信任原则</h3><p>指在程序运行上下游的整个链路中，每个点都是不能保证绝对可靠的，任何一个点都可能随时发生故障或者不可预知的行为，包括机器网络、服务本身、依赖环境、输入和请求等，因此要处处设防。</p><h3 id="_7-持久化-persistence" tabindex="-1"><a class="header-anchor" href="#_7-持久化-persistence" aria-hidden="true">#</a> 7. 持久化 (Persistence)</h3><p>持久化是将程序数据在临时状态和持久状态间转换的机制。通俗地讲，就是临时数据（比如内存中的数据，是不能永久保存的）持久化为持久数据（比如持久化至数据库或者本地磁盘中，能够长久保存）。</p><h3 id="_8-临界区" tabindex="-1"><a class="header-anchor" href="#_8-临界区" aria-hidden="true">#</a> 8. 临界区</h3><p>临界区用来表示一种公共资源或者说是共享数据，可以被多个线程使用，但是每一次，只能有一个线程使用它，一旦临界区资源被占用，其他线程要想使用这个资源，就必须等待。</p><h3 id="_9-阻塞-非阻塞" tabindex="-1"><a class="header-anchor" href="#_9-阻塞-非阻塞" aria-hidden="true">#</a> 9. 阻塞/非阻塞</h3><p>阻塞和非阻塞通常形容多线程间的相互影响。比如一个线程占用了临界区资源，那么其它所有需要这个资源的线程就必须在这个临界区中进行等待，等待会导致线程挂起。这种情况就是阻塞。此时，如果占用资源的线程一直不愿意释放资源，那么其它所有阻塞在这个临界区上的线程都不能工作。而非阻塞允许多个线程同时进入临界区。</p><h3 id="_10-同步-异步" tabindex="-1"><a class="header-anchor" href="#_10-同步-异步" aria-hidden="true">#</a> 10. 同步/异步</h3><p>通常同步和异步是指函数/方法调用方面。</p><p>同步就是在发出一个函数调用时，在没有得到结果之前，该调用就不返回。异步调用会瞬间返回，但是异步调用瞬间返回并不代表你的任务就完成了，他会在后台起个线程继续进行任务，等任务执行完毕后通过回调callback或其他方式通知调用方。</p><h3 id="_11-并发-并行" tabindex="-1"><a class="header-anchor" href="#_11-并发-并行" aria-hidden="true">#</a> 11. 并发/并行</h3><p>并行(parallel)指在同一时刻，有多条指令在多个处理器上同时执行。所以无论从微观还是从宏观来看，二者都是一起执行的。</p><p>并发(concurrency)指在同一时刻只能有一条指令执行，但多个进程指令被快速的轮换执行，使得在宏观上具有多个进程同时执行的效果，但在微观上并不是同时执行的，只是把时间分成若干段，使多个进程快速交替的执行。</p><h2 id="架构设计" tabindex="-1"><a class="header-anchor" href="#架构设计" aria-hidden="true">#</a> 架构设计</h2><h3 id="_1-高并发-high-concurrency" tabindex="-1"><a class="header-anchor" href="#_1-高并发-high-concurrency" aria-hidden="true">#</a> 1. 高并发 (High Concurrency)</h3><p>由于分布式系统的问世，高并发（High Concurrency）通常是指通过设计保证系统能够同时并行处理很多请求。通俗来讲，高并发是指在同一个时间点，有很多用户同时访问同一 API 接口或者 Url 地址。它经常会发生在有大活跃用户量，用户高聚集的业务场景中。</p><h3 id="_2-高可用-high-availability" tabindex="-1"><a class="header-anchor" href="#_2-高可用-high-availability" aria-hidden="true">#</a> 2. 高可用 (High Availability)</h3><p>高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，一个系统经过专门的设计，以减少停工时间，而保持其服务的高度可用性。</p><h3 id="_3-读写分离" tabindex="-1"><a class="header-anchor" href="#_3-读写分离" aria-hidden="true">#</a> 3. 读写分离</h3><p>为了确保数据库产品的稳定性，很多数据库拥有双机热备功能。也就是，第一台数据库服务器，是对外提供增删改业务的生产服务器；第二台数据库服务器，主要进行读的操作。</p><h3 id="_4-冷备-热备" tabindex="-1"><a class="header-anchor" href="#_4-冷备-热备" aria-hidden="true">#</a> 4. 冷备/热备</h3><ul><li>冷备</li></ul><blockquote><p>两个服务器，一台运行，一台不运行作为备份。这样一旦运行的服务器宕机，就把备份的服务器运行起来。冷备的方案比较容易实现，但冷备的缺点是主机出现故障时备机不会自动接管，需要主动切换服务。</p></blockquote><ul><li>热备</li></ul><blockquote><p>即是通常所说的active/standby方式，服务器数据包括数据库数据同时往两台或多台服务器写。当active服务器出现故障的时候，通过软件诊测（一般是通过心跳诊断）将standby机器激活，保证应用在短时间内完全恢复正常使用。当一台服务器宕机后，自动切换到另一台备用机使用。</p></blockquote><h3 id="_5-异地多活" tabindex="-1"><a class="header-anchor" href="#_5-异地多活" aria-hidden="true">#</a> 5. 异地多活</h3><p>异地多活一般是指在不同城市建立独立的数据中心，“活”是相对于冷备份而言的，冷备份是备份全量数据，平时不支撑业务需求，只有在主机房出现故障的时候才会切换到备用机房，而多活，是指这些机房在日常的业务中也需要走流量，做业务支撑。</p><h3 id="_6-负载均衡-load-balance" tabindex="-1"><a class="header-anchor" href="#_6-负载均衡-load-balance" aria-hidden="true">#</a> 6. 负载均衡 (Load Balance)</h3><p>负载均衡，是对多台服务器进行流量分发的负载均衡服务。可在多个实例间自动分配应用程序的对外服务能力，通过消除单点故障提升应用系统的可用性，让您实现更高水平的应用程序容错能力，从而无缝提供分配应用程序流量所需的负载均衡容量，为您提供高效、稳定、安全的服务。</p><h3 id="_7-动静分离" tabindex="-1"><a class="header-anchor" href="#_7-动静分离" aria-hidden="true">#</a> 7. 动静分离</h3><p>动静分离是指在web服务器架构中，将静态页面与动态页面或者静态内容接口和动态内容接口分开不同系统访问的架构设计方法，进而提升整个服务访问性能和可维护性。</p><h3 id="_8-集群" tabindex="-1"><a class="header-anchor" href="#_8-集群" aria-hidden="true">#</a> 8. 集群</h3><p>单台服务器的并发承载能力总是有限的，当单台服务器处理能力达到性能瓶颈的时，将多台服务器组合起来提供服务，这种组合方式称之为集群，集群中每台服务器就叫做这个集群的一个“节点”，每个节点都能提供相同的服务，从而成倍的提升整个系统的并发处理能力。</p><h3 id="_9-分布式" tabindex="-1"><a class="header-anchor" href="#_9-分布式" aria-hidden="true">#</a> 9. 分布式</h3><p>分布式系统就是将一个完整的系统按照业务功能拆分成很多独立的子系统，每个子系统就被称为“服务”，分布式系统将请求分拣和分发到不同的子系统，让不同的服务来处理不同的请求。在分布式系统中，子系统独立运行，它们之间通过网络通信连接起来实现数据互通和组合服务。</p><h3 id="_10-cap理论" tabindex="-1"><a class="header-anchor" href="#_10-cap理论" aria-hidden="true">#</a> 10. CAP理论</h3><p>CAP理论，指的是在一个分布式系统中，<code>Consistency(一致性)</code>、<code>Availability(可用性)</code>、<code>Partition Tolerance(分区容错性)</code>，不能同时成立。</p><ul><li>一致性</li></ul><blockquote><p>它要求在同一时刻点，分布式系统中的所有数据备份都相同或者都处于同一状态。</p></blockquote><ul><li>可用性</li></ul><blockquote><p>在系统集群的一部分节点宕机后，系统依然能够正确的响应用户的请求。</p></blockquote><ul><li>分区容错性</li></ul><blockquote><p>系统能够容忍节点之间的网络通信的故障。</p></blockquote><p>简单的来说，在一个分布式系统中，最多能支持上面的两种属性。但显然既然是分布式注定我们是必然要进行分区，既然分区，我们就无法百分百避免分区的错误。因此，我们只能在一致性和可用性去作出选择。</p><p>在分布式系统中，我们往往追求的是可用性，它的重要性比一致性要高，那么如何实现高可用，这里又有一个理论，就是 BASE 理论，它给 CAP 理论做了进一步的扩充。</p><h3 id="_11-base理论" tabindex="-1"><a class="header-anchor" href="#_11-base理论" aria-hidden="true">#</a> 11. BASE理论</h3><p>BASE 理论指出：</p><ul><li>Basically Available（基本可用）</li><li>Soft state（软状态）</li><li>Eventually consistent（最终一致性）</li></ul><p>BASE 理论是对 CAP 中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性。</p><h3 id="_12-水平扩展-垂直扩展" tabindex="-1"><a class="header-anchor" href="#_12-水平扩展-垂直扩展" aria-hidden="true">#</a> 12. 水平扩展/垂直扩展</h3><p>水平扩展 Scale Out通过增加更多的服务器或者程序实例来分散负载，从而提升存储能力和计算能力。</p><p>垂直扩展 Scale Up 提升单机处理能力。</p><p>垂直扩展的方式又有两种：</p><ul><li>（1）增强单机硬件性能，例如：增加CPU核数如32核，升级更好的网卡如万兆，升级更好的硬盘如SSD，扩充硬盘容量如2T，扩充系统内存如128G;</li><li>（2）提升单机软件或者架构性能，例如：使用Cache来减少IO次数，使用异步来增加单服务吞吐量，使用无锁数据结构来减少响应时间；</li></ul><h3 id="_13-平行扩容" tabindex="-1"><a class="header-anchor" href="#_13-平行扩容" aria-hidden="true">#</a> 13. 平行扩容</h3><p>与水平扩展类似。集群服务器中的节点均为平行对等节点，当需要扩容时，可以通过添加更多节点以提高集群的服务能力。一般来说服务器中关键路径（如服务器中的登录、支付、核心业务逻辑等）都需要支持运行时动态平行扩容。</p><h3 id="_14-弹性扩容" tabindex="-1"><a class="header-anchor" href="#_14-弹性扩容" aria-hidden="true">#</a> 14. 弹性扩容</h3><p>指对部署的集群进行动态在线扩容。弹性扩容系统可以根据实际业务环境按照一定策略自动地添加更多的节点（包括存储节点、计算节点、网络节点）来增加系统容量、提高系统性能或者增强系统可靠性，或者同时完成这三个目标。</p><h3 id="_15-状态同步-帧同步" tabindex="-1"><a class="header-anchor" href="#_15-状态同步-帧同步" aria-hidden="true">#</a> 15. 状态同步/帧同步</h3><ul><li>状态同步</li></ul><blockquote><p>状态同步是指服务器负责计算全部的游戏逻辑，并且广播这些计算的结果，客户端仅仅负责发送玩家的操作，以及表现收到的游戏结果。</p><p>特征: 状态同步安全性高，逻辑更新方便，断线重连快，但是开发效率较低，网络流量随游戏复杂度增加，服务器需要承载更大压力。</p></blockquote><ul><li>帧同步</li></ul><blockquote><p>服务端只转发消息，不做任何逻辑处理，各客户端每秒帧数一致，在每一帧都处理同样的输入数据。</p><p>特征：帧同步需要保证系统在相同的输入下，要有相同的输出。帧同步开发效率高，流量消耗低而且稳定，对服务器的压力非常小。但是网络要求高，断线重连时间长，客户端计算压力大。</p></blockquote><h2 id="网络通信" tabindex="-1"><a class="header-anchor" href="#网络通信" aria-hidden="true">#</a> 网络通信</h2><h3 id="_1-连接池" tabindex="-1"><a class="header-anchor" href="#_1-连接池" aria-hidden="true">#</a> 1. 连接池</h3><p>预先建立一个连接缓冲池，并提供一套连接使用、分配、管理策略，使得该连接池中的连接可以得到高效、安全的复用，避免了连接频繁建立、关闭的开销。</p><h3 id="_2-断线重连" tabindex="-1"><a class="header-anchor" href="#_2-断线重连" aria-hidden="true">#</a> 2. 断线重连</h3><p>由于网络波动造成用户间歇性的断开与服务器的连接，待网络恢复之后服务器尝试将用户连接到上次断开时的状态和数据。</p><h3 id="_3-会话保持" tabindex="-1"><a class="header-anchor" href="#_3-会话保持" aria-hidden="true">#</a> 3. 会话保持</h3><p>会话保持是指在负载均衡器上的一种机制，可以识别客户端与服务器之间交互过程的关联性，在作负载均衡的同时还保证一系列相关连的访问请求都会分配到一台机器上。用人话来表述就是：在一次会话过程中发起的多个请求都会落到同一台机器上。</p><h3 id="_4-长连接-短连接" tabindex="-1"><a class="header-anchor" href="#_4-长连接-短连接" aria-hidden="true">#</a> 4. 长连接/短连接</h3><p>通常是指TCP的长连接和短连接。长连接就是建立TCP连接后，一直保持这个连接，一般会中间彼此发送心跳来确认对应的存在，中间会做多次业务数据传输，一般不会主动断开连接。短连接一般指建立连接后，执行一次事务后（如：http请求），然后就关掉这个连接。</p><h3 id="_5-流量控制-拥塞控制" tabindex="-1"><a class="header-anchor" href="#_5-流量控制-拥塞控制" aria-hidden="true">#</a> 5. 流量控制/拥塞控制</h3><p>流量控制防止发送方发的太快，耗尽接收方的资源，从而使接收方来不及处理。</p><p>拥塞控制防止发送方发的太快，使得网络来不及处理产生拥塞，进而引起这部分乃至整个网络性能下降的现象，严重时甚至会导致网络通信业务陷入停顿。</p><h3 id="_6-惊群效应" tabindex="-1"><a class="header-anchor" href="#_6-惊群效应" aria-hidden="true">#</a> 6. 惊群效应</h3><p>惊群效应也有人叫做雷鸣群体效应，不过叫什么，简言之，惊群现象就是多进程（多线程）在同时阻塞等待同一个事件的时候（休眠状态），如果等待的这个事件发生，那么他就会唤醒等待的所有进程（或者线程），但是最终却只可能有一个进程（线程）获得这个时间的“控制权”，对该事件进行处理，而其他进程（线程）获取“控制权”失败，只能重新进入休眠状态，这种现象和性能浪费就叫做惊群。</p><h3 id="_7-nat" tabindex="-1"><a class="header-anchor" href="#_7-nat" aria-hidden="true">#</a> 7. NAT</h3><p>NAT（Network Address Translation，网络地址转换），就是替换IP报文头部的地址信息。NAT通常部署在一个组织的网络出口位置，通过将内部网络IP地址替换为出口的IP地址提供公网可达性和上层协议的连接能力。</p><h2 id="故障异常" tabindex="-1"><a class="header-anchor" href="#故障异常" aria-hidden="true">#</a> 故障异常</h2><h3 id="_1-宕机" tabindex="-1"><a class="header-anchor" href="#_1-宕机" aria-hidden="true">#</a> 1. 宕机</h3><p>宕机，一般情况下指的就是计算机主机出现意外故障而死机。其次，一些服务器例如数据库死锁也可以称为宕机，一些服务器的某些服务挂掉了，就可以这么说。</p><h3 id="_2-coredump" tabindex="-1"><a class="header-anchor" href="#_2-coredump" aria-hidden="true">#</a> 2. coredump</h3><p>当程序出错而异常中断时，OS会把程序工作的当前状态存储成一个coredunmp文件。通常情况下coredump文件包含了程序运行时的内存，寄存器状态，堆栈指针，内存管理信息等。</p><h3 id="_3-缓存穿透-击穿-雪崩" tabindex="-1"><a class="header-anchor" href="#_3-缓存穿透-击穿-雪崩" aria-hidden="true">#</a> 3. 缓存穿透/击穿/雪崩</h3><ul><li>缓存穿透</li></ul><blockquote><p><code>缓存穿透</code>是指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，进而给数据库带来压力。</p></blockquote><ul><li>缓存击穿</li></ul><blockquote><p><code>缓存击穿</code>是指热点key在某个时间点过期的时候，而恰好在这个时间点对这个Key有大量的并发请求过来，从而大量的请求打到db。</p></blockquote><ul><li>缓存雪崩</li></ul><blockquote><p><code>缓存雪崩</code>是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。</p><p>与缓存击穿不同的是：存击穿是热点key失效，缓存雪崩是大量的key同时失效。</p></blockquote><h3 id="_4-500-501-502-503-504-505" tabindex="-1"><a class="header-anchor" href="#_4-500-501-502-503-504-505" aria-hidden="true">#</a> 4. 500/501/502/503/504/505</h3><p>500 Internal Server Error：内部服务错误，一般是服务器遇到意外情况，而无法完成请求。可能原因:</p><ul><li>1、程序错误，例如：ASP或者PHP语法错误；</li><li>2、高并发导致，系统资源限制不能打开过多的文件所致。</li></ul><p>501 Not implemented：服务器不理解或不支持请求的HTTP请求。</p><p>502 Bad Gateway：WEB服务器故障，可能是由于程序进程不够，请求的php-fpm已经执行，但是由于某种原因而没有执行完毕，最终导致php-fpm进程终止。可能原因：</p><ul><li>1、Nginx服务器，php-cgi进程数不够用；</li><li>2、PHP执行时间过长；</li><li>3、php-cgi进程死掉；</li></ul><p>503 Service Unavailable：服务器目前无法使用。系统维护服务器暂时的无法处理客户端的请求，这只是暂时状态。可以联系下服务器提供商。</p><p>504 Gateway Timeout：服务器504错误表示超时，是指客户端所发出的请求没有到达网关，请求没有到可以执行的php-fpm，一般是与nginx.conf的配置有关。</p><p>505 HTTP Version Not Supported：服务器不支持请求中所用的 HTTP 协议版本。（HTTP 版本不受支持）</p><p>除了500错误可能是程序语言错误，其余的报错，都大概可以理解为服务器或者服务器配置出现问题。</p><h3 id="_5-内存溢出-内存泄漏" tabindex="-1"><a class="header-anchor" href="#_5-内存溢出-内存泄漏" aria-hidden="true">#</a> 5. 内存溢出/内存泄漏</h3><ul><li>内存溢出</li></ul><blockquote><p><code>内存溢出（Out Of Memory）</code>指程序申请内存时，没有足够的内存供申请者使用，或者说，给了你一块存储int类型数据的存储空间，但是你却存储long类型的数据，那么结果就是内存不够用，此时就会报错OOM,即所谓的内存溢出。</p></blockquote><ul><li>内存泄漏</li></ul><blockquote><p><code>内存泄漏（Memory Leak）</code>指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p></blockquote><h3 id="_6-句柄泄漏" tabindex="-1"><a class="header-anchor" href="#_6-句柄泄漏" aria-hidden="true">#</a> 6. 句柄泄漏</h3><p>句柄泄漏是进程在调用系统文件之后，没有释放已经打开的文件句柄。一般句柄泄漏后的现象是，机器变慢，CPU飙升，出现句柄泄漏的cgi或server的CPU使用率增加。</p><h3 id="_7-死锁" tabindex="-1"><a class="header-anchor" href="#_7-死锁" aria-hidden="true">#</a> 7. 死锁</h3><p>死锁是指两个或两个以上的线程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都抑制处于阻塞状态并无法进行下去，此时称系统处于死锁状态或系统产生了死锁。</p><h3 id="_8-软中断-硬中断" tabindex="-1"><a class="header-anchor" href="#_8-软中断-硬中断" aria-hidden="true">#</a> 8. 软中断/硬中断</h3><ul><li>硬中断</li></ul><blockquote><p>我们通常所说的中断指的是硬中断(hardirq)。</p><p>主要是用来通知操作系统系统外设状态的变化。</p></blockquote><ul><li>软中断</li></ul><blockquote><p>1、通常是硬中断服务程序对内核的中断；</p><p>2、为了满足实时系统的要求，中断处理应该是越快越好。</p></blockquote><p>linux为了实现这个特点，当中断发生的时候，硬中断处理那些短时间就可以完成的工作，而将那些处理事件比较长的工作，放到中断之后来完成，也就是软中断(softirq)来完成。</p><h3 id="_9-毛刺" tabindex="-1"><a class="header-anchor" href="#_9-毛刺" aria-hidden="true">#</a> 9. 毛刺</h3><p>在短暂的某一刻，服务器性能指标（如流量、磁盘IO、CPU使用率等）远大于该时刻前后时间段。毛刺的出现代表这服务器资源利用不均匀，不充分，容易诱发其他更严重的问题。</p><h3 id="_10-重放攻击" tabindex="-1"><a class="header-anchor" href="#_10-重放攻击" aria-hidden="true">#</a> 10. 重放攻击</h3><p>攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。它是一种攻击类型，这种攻击会不断恶意或欺诈性地重复一个有效的数据传输，重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。</p><h3 id="_11-网络孤岛" tabindex="-1"><a class="header-anchor" href="#_11-网络孤岛" aria-hidden="true">#</a> 11. 网络孤岛</h3><p>网络孤岛指集群环境中，部分机器与整个集群失去网络连接，分裂为一个小集群并且发生数据不一致的状况。</p><h3 id="_12-数据倾斜" tabindex="-1"><a class="header-anchor" href="#_12-数据倾斜" aria-hidden="true">#</a> 12. 数据倾斜</h3><p>对于集群系统，一般缓存是分布式的，即不同节点负责一定范围的缓存数据。我们把缓存数据分散度不够，导致大量的缓存数据集中到了一台或者几台服务节点上，称为数据倾斜。一般来说数据倾斜是由于负载均衡实施的效果不好引起的。</p><h3 id="_13-脑裂" tabindex="-1"><a class="header-anchor" href="#_13-脑裂" aria-hidden="true">#</a> 13. 脑裂</h3><p>脑裂是指在集群系统中，部分节点之间网络不可达而引起的系统分裂，不同分裂的小集群会按照各自的状态提供服务，原本的集群会同时存在不一致的反应，造成节点之间互相争抢资源，系统混乱，数据损坏。</p><h2 id="监控告警" tabindex="-1"><a class="header-anchor" href="#监控告警" aria-hidden="true">#</a> 监控告警</h2><h3 id="_1-服务监控" tabindex="-1"><a class="header-anchor" href="#_1-服务监控" aria-hidden="true">#</a> 1. 服务监控</h3><p>服务监控主要目的在服务出现问题或者快要出现问题时能够准确快速地发现以减小影响范围。服务监控一般有多种手段，按层次可划分为：</p><ul><li>系统层（CPU、网络状态、IO、机器负载等）</li><li>应用层（进程状态、错误日志、吞吐量等）</li><li>业务层（服务/接口的错误码、响应时间）</li><li>用户层（用户行为、舆情监控、前端埋点）</li></ul><h3 id="_2-全链路监控" tabindex="-1"><a class="header-anchor" href="#_2-全链路监控" aria-hidden="true">#</a> 2. 全链路监控</h3><ul><li>服务拨测</li></ul><blockquote><p>服务拨测是探测服务（应用）可用性的监控方式，通过拨测节点对目标服务进行周期性探测，主要通过可用性和响应时间来度量，拨测节点通常有异地多个。</p></blockquote><ul><li>节点探测</li></ul><blockquote><p>节点探测是用来发现和追踪不同的机房（数据中心）节点之间网络可用性和通畅性的监控方式，主要通过响应时间、丢包率、跳数来度量，探测方法一般是ping、mtr或其他私有协议。</p></blockquote><ul><li>告警过滤</li></ul><blockquote><p>对某些可预知的告警进行过滤，不进入告警统计的数据，如少量爬虫访问导致的http响应500错误，业务系统自定义异常信息等。</p></blockquote><ul><li>告警去重</li></ul><blockquote><p>当一个告警通知负责人后，在这个告警恢复之前，不会继续收到相同的告警。</p></blockquote><ul><li>告警抑制</li></ul><blockquote><p>为了减少由于系统抖动带来的干扰，还需要实现抑制，例如服务器瞬间高负载，可能是正常的，只有持续一段时间的高负载才需要得到重视。</p></blockquote><ul><li>告警恢复</li></ul><blockquote><p>开发/运维人员不仅需要收到告警通知，还需要收到故障消除告警恢复正常的通知。</p></blockquote><ul><li>告警合并</li></ul><blockquote><p>对同一时刻产生的多条相同告警进行合并，如某个微服务集群同一时刻出现多个子服务负载过高的告警，需要合并成为一条告警。</p></blockquote><ul><li>告警收敛</li></ul><blockquote><p>有时某个告警产生时，往往会伴随着其它告警。这时可以只对根本原因产生告警，其它告警收敛为子告警一并发送通知。如云服务器出现CPU负载告警时往往伴随其搭载的所有系统的可用性告警。</p></blockquote><ul><li>故障自愈</li></ul><blockquote><p>实时发现告警，预诊断分析，自动恢复故障，并打通周边系统实现整个流程的闭环。</p></blockquote><h2 id="服务治理" tabindex="-1"><a class="header-anchor" href="#服务治理" aria-hidden="true">#</a> 服务治理</h2><h3 id="_1-微服务" tabindex="-1"><a class="header-anchor" href="#_1-微服务" aria-hidden="true">#</a> 1. 微服务</h3><p>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间相互协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务和服务之间采用轻量级的通信机制相互沟通（通常是基于HTTP的Restful API).每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。</p><h3 id="_2-服务发现" tabindex="-1"><a class="header-anchor" href="#_2-服务发现" aria-hidden="true">#</a> 2. 服务发现</h3><p>服务发现是指使用一个注册中心来记录分布式系统中的全部服务的信息，以便其他服务能够快速的找到这些已注册的服务。服务发现是支撑大规模 SOA 和微服务架构的核心模块，它应该尽量做到高可用。</p><h3 id="_3-流量削峰" tabindex="-1"><a class="header-anchor" href="#_3-流量削峰" aria-hidden="true">#</a> 3. 流量削峰</h3><p>如果观看抽奖或秒杀系统的请求监控曲线，你就会发现这类系统在活动开放的时间段内会出现一个波峰，而在活动未开放时，系统的请求量、机器负载一般都是比较平稳的。为了节省机器资源，我们不可能时时都提供最大化的资源能力来支持短时间的高峰请求。所以需要使用一些技术手段，来削弱瞬时的请求高峰，让系统吞吐量在高峰请求下保持可控。削峰也可用于消除毛刺，使服务器资源利用更加均衡和充分。常见的削峰策略有队列，限频，分层过滤，多级缓存等。</p><h3 id="_4-版本兼容" tabindex="-1"><a class="header-anchor" href="#_4-版本兼容" aria-hidden="true">#</a> 4. 版本兼容</h3><p>在升级版本的过程中，需要考虑升级版本后，新的数据结构是否能够理解和解析旧数据，新修改的协议是否能够理解旧的协议以及做出预期内合适的处理。这就需要在服务设计过程中做好版本兼容。</p><h3 id="_5-过载保护" tabindex="-1"><a class="header-anchor" href="#_5-过载保护" aria-hidden="true">#</a> 5. 过载保护</h3><p>过载是指当前负载已经超过了系统的最大处理能力，过载的出现，会导致部分服务不可用，如果处置不当，极有可能引起服务完全不可用，乃至雪崩。过载保护正是针对这种异常情况做的措施，防止出现服务完全不可用的现象。</p><h3 id="_6-服务熔断" tabindex="-1"><a class="header-anchor" href="#_6-服务熔断" aria-hidden="true">#</a> 6. 服务熔断</h3><p>服务熔断的作用类似于我们家用的保险丝，当某服务出现不可用或响应超时的情况时，为了防止整个系统出现雪崩，暂时停止对该服务的调用。</p><h3 id="_7-服务降级" tabindex="-1"><a class="header-anchor" href="#_7-服务降级" aria-hidden="true">#</a> 7. 服务降级</h3><p>服务降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。降级往往会指定不同的级别，面临不同的异常等级执行不同的处理。另外，搜索公众号互联网架构师后台回复“9”，获取一份惊喜礼包。</p><p>根据服务方式：可以拒接服务，可以延迟服务，也有时候可以随机服务。</p><p>根据服务范围：可以砍掉某个功能，也可以砍掉某些模块。</p><p>总之服务降级需要根据不同的业务需求采用不同的降级策略。主要的目的就是服务虽然有损但是总比没有好。</p><h3 id="_8-熔断vs降级" tabindex="-1"><a class="header-anchor" href="#_8-熔断vs降级" aria-hidden="true">#</a> 8. 熔断VS降级</h3><p>相同点：目标一致，都是从可用性和可靠性出发，为了防止系统崩溃；用户体验类似，最终都让用户体验到的是某些功能暂时不可用；</p><p>不同点：触发原因不同，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；</p><h3 id="_9-服务限流" tabindex="-1"><a class="header-anchor" href="#_9-服务限流" aria-hidden="true">#</a> 9. 服务限流</h3><p>限流可以认为服务降级的一种，限流就是限制系统的输入和输出流量已达到保护系统的目的。一般来说系统的吞吐量是可以被测算的，为了保证系统的稳定运行，一旦达到的需要限制的阈值，就需要限制流量并采取一些措施以完成限制流量的目的。比如：延迟处理，拒绝处理，或者部分拒绝处理等等。</p><h3 id="_10-故障屏蔽" tabindex="-1"><a class="header-anchor" href="#_10-故障屏蔽" aria-hidden="true">#</a> 10. 故障屏蔽</h3><p>将故障机器从集群剔除，以保证新的请求不会分发到故障机器。</p><h2 id="测试方法" tabindex="-1"><a class="header-anchor" href="#测试方法" aria-hidden="true">#</a> 测试方法</h2><h3 id="_1-黑盒-白盒测试" tabindex="-1"><a class="header-anchor" href="#_1-黑盒-白盒测试" aria-hidden="true">#</a> 1. 黑盒/白盒测试</h3><p>黑盒测试不考虑程序内部结构和逻辑结构，主要是用来测试系统的功能是否满足需求规格说明书。一般会有一个输入值，一个输入值，和期望值做比较。</p><p>白盒测试主要应用在单元测试阶段，主要是对代码级的测试，针对程序内部逻辑结构，测试手段有：语句覆盖、判定覆盖、条件覆盖、路径覆盖、条件组合覆盖</p><h3 id="_2-单元-集成-系统-验收测试" tabindex="-1"><a class="header-anchor" href="#_2-单元-集成-系统-验收测试" aria-hidden="true">#</a> 2. 单元/集成/系统/验收测试</h3><p>软件测试一般分为4个阶段：单元测试、集成测试、系统测试、验收测试。</p><ul><li>单元测试</li></ul><blockquote><p>单元测试是对软件中的最小可验证单元进行检查和验证，如一个模块、一个过程、一个方法等。单元测试粒度最小，一般由开发小组采用白盒方式来测试，主要测试单元是否符合“设计”。</p></blockquote><ul><li>集成测试</li></ul><blockquote><p>集成测试也叫做组装测试，通常在单元测试的基础上，将所有的程序模块进行有序的、递增的测试。集成测试界于单元测试和系统测试之间，起到“桥梁作用”，一般由开发小组采用白盒加黑盒的方式来测试，既验证“设计”，又验证“需求”。</p></blockquote><ul><li>系统测试</li></ul><blockquote><p>系统测试时将经过集成测试的软件，作为计算机系统的一部分，与系统中其他部分结合起来，在实际运行环境下进行一系列严格有效的测试，以发现软件潜在的问题，保证系统的正常运行。系统测试的粒度最大，一般由独立测试小组采用黑盒方式来测试，主要测试系统是否符合“需求规格说明书”。</p></blockquote><ul><li>验收测试</li></ul><blockquote><p>验收测试也称交付测试，是针对用户需求、业务流程进行的正式的测试，以确定系统是否满足验收标准，由用户、客户或其他授权机构决定是否接受系统。验收测试与系统测试相似，主要区别是测试人员不同，验收测试由用户执行。</p></blockquote><h3 id="_3-回归测试" tabindex="-1"><a class="header-anchor" href="#_3-回归测试" aria-hidden="true">#</a> 3. 回归测试</h3><p>当发现并修改缺陷后，或在软件中添加新的功能后，重新测试。用来检查被发现的缺陷是否被改正，并且所做的修改没有引发新的问题。</p><h3 id="_4-冒烟测试" tabindex="-1"><a class="header-anchor" href="#_4-冒烟测试" aria-hidden="true">#</a> 4. 冒烟测试</h3><p>这一术语源自硬件行业。对一个硬件或硬件组件进行更改或修复后，直接给设备加电。如果没有冒烟，则该组件就通过了测试。在软件中，“冒烟测试”这一术语描述的是在将代码更改嵌入到产品的源树中之前对这些更改进行验证的过程。</p><p>冒烟测试是在软件开发过程中的一种针对软件版本包的快速基本功能验证策略，是对软件基本功能进行确认验证的手段，并非对软件版本包的深入测试。</p><p>比如：对于一个登录系统的冒烟测试，我们只需测试输入正确的用户名、密码，验证登录这一个核心功能点，至于输入框、特殊字符等，可以在冒烟测试之后进行。</p><h3 id="_5-性能测试" tabindex="-1"><a class="header-anchor" href="#_5-性能测试" aria-hidden="true">#</a> 5. 性能测试</h3><p>性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。负载测试和压力测试都属于性能测试，两者可以结合进行。</p><p>通过负载测试，确定在各种工作负载下系统的性能，目标是测试当负载逐渐增加时，系统各项性能指标的变化情况。</p><p>压力测试是通过确定一个系统的瓶颈或者不能接受的性能点，来获得系统能提供的最大服务级别的测试。</p><h3 id="_6-基准测试" tabindex="-1"><a class="header-anchor" href="#_6-基准测试" aria-hidden="true">#</a> 6. 基准测试</h3><p>基准测试（Benchmark）也是一种性能测试方式，用来测量机器的硬件最高实际运行性能，以及软件优化的性能提升效果, 同时也可以用来识别某段代码的CPU或者内存效率问题. 许多开发人员会用基准测试来测试不同的并发模式, 或者用基准测试来辅助配置工作池的数量, 以保证能最大化系统的吞吐量.</p><h3 id="_7-a-b测试" tabindex="-1"><a class="header-anchor" href="#_7-a-b测试" aria-hidden="true">#</a> 7. A/B测试</h3><p>A/B测试，是用两组及以上随机分配的、数量相似的样本进行对比，如果实验组和对比组的实验结果相比，在目标指标上具有统计显著性，那就可以说明实验组的功能可以导致你想要的结果，从而帮你验证假设或者做出产品决定。</p><h3 id="_8-代码覆盖测试" tabindex="-1"><a class="header-anchor" href="#_8-代码覆盖测试" aria-hidden="true">#</a> 8. 代码覆盖测试</h3><p>代码覆盖（Code coverage）是软件测试中的一种度量，描述程式中源代码被测试的比例和程度，所得比例称为代码覆盖率。在做单元测试时，代码覆盖率常常被拿来作为衡量测试好坏的指标，甚至，用代码覆盖率来考核测试任务完成情况，比如，代码覆盖率必须达到80%或 90%。于是乎，测试人员费尽心思设计案例覆盖代码。</p><h2 id="发布部署" tabindex="-1"><a class="header-anchor" href="#发布部署" aria-hidden="true">#</a> 发布部署</h2><h3 id="_1-dev-pro-fat-uat" tabindex="-1"><a class="header-anchor" href="#_1-dev-pro-fat-uat" aria-hidden="true">#</a> 1. DEV/PRO/FAT/UAT</h3><p>DEV（Development environment）：开发环境，用于开发人员调试使用，版本变化较大。</p><p>FAT（Feature Acceptance Test environment）：功能验收测试环境，用于软件测试人员测试使用。</p><p>UAT（User Acceptance Test environment）：用户验收测试环境，用于生产环境下的功能验证，可作为预发布环境。</p><p>PRO（Production environment）：生产环境，正式线上环境。</p><h3 id="_2-灰度发布" tabindex="-1"><a class="header-anchor" href="#_2-灰度发布" aria-hidden="true">#</a> 2. 灰度发布</h3><p>灰度发布是指在升级版本过程中，通过分区控制，白名单控制等方式对一部分用户先升级产品特性，而其余用户则保持不变，当一段时间后升级产品特性的用户没有反馈问题，就逐步扩大范围，最终向所有用户开放新版本特性，灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、修改问题，以保证其影响度。</p><h3 id="_3-回滚-rollback" tabindex="-1"><a class="header-anchor" href="#_3-回滚-rollback" aria-hidden="true">#</a> 3. 回滚 (Rollback)</h3><p>指的是程序或数据处理错误时，将程序或数据恢复到上一次正确状态(或者是上一个稳定版本)的行为。</p>',229);function f(b,x){const e=r("router-link");return t(),n("div",null,[_,u(" more "),a("nav",p,[a("ul",null,[a("li",null,[l(e,{to:"#系统开发"},{default:i(()=>[d("系统开发")]),_:1}),a("ul",null,[a("li",null,[l(e,{to:"#_1-高内聚-低耦合"},{default:i(()=>[d("1. 高内聚/低耦合")]),_:1})]),a("li",null,[l(e,{to:"#_2-过度设计"},{default:i(()=>[d("2. 过度设计")]),_:1})]),a("li",null,[l(e,{to:"#_3-过早优化"},{default:i(()=>[d("3. 过早优化")]),_:1})]),a("li",null,[l(e,{to:"#_4-重构-refactoring"},{default:i(()=>[d("4. 重构 (Refactoring)")]),_:1})]),a("li",null,[l(e,{to:"#_5-破窗效应"},{default:i(()=>[d("5. 破窗效应")]),_:1})]),a("li",null,[l(e,{to:"#_6-互不信任原则"},{default:i(()=>[d("6. 互不信任原则")]),_:1})]),a("li",null,[l(e,{to:"#_7-持久化-persistence"},{default:i(()=>[d("7. 持久化 (Persistence)")]),_:1})]),a("li",null,[l(e,{to:"#_8-临界区"},{default:i(()=>[d("8. 临界区")]),_:1})]),a("li",null,[l(e,{to:"#_9-阻塞-非阻塞"},{default:i(()=>[d("9. 阻塞/非阻塞")]),_:1})]),a("li",null,[l(e,{to:"#_10-同步-异步"},{default:i(()=>[d("10. 同步/异步")]),_:1})]),a("li",null,[l(e,{to:"#_11-并发-并行"},{default:i(()=>[d("11. 并发/并行")]),_:1})])])]),a("li",null,[l(e,{to:"#架构设计"},{default:i(()=>[d("架构设计")]),_:1}),a("ul",null,[a("li",null,[l(e,{to:"#_1-高并发-high-concurrency"},{default:i(()=>[d("1. 高并发 (High Concurrency)")]),_:1})]),a("li",null,[l(e,{to:"#_2-高可用-high-availability"},{default:i(()=>[d("2. 高可用 (High Availability)")]),_:1})]),a("li",null,[l(e,{to:"#_3-读写分离"},{default:i(()=>[d("3. 读写分离")]),_:1})]),a("li",null,[l(e,{to:"#_4-冷备-热备"},{default:i(()=>[d("4. 冷备/热备")]),_:1})]),a("li",null,[l(e,{to:"#_5-异地多活"},{default:i(()=>[d("5. 异地多活")]),_:1})]),a("li",null,[l(e,{to:"#_6-负载均衡-load-balance"},{default:i(()=>[d("6. 负载均衡 (Load Balance)")]),_:1})]),a("li",null,[l(e,{to:"#_7-动静分离"},{default:i(()=>[d("7. 动静分离")]),_:1})]),a("li",null,[l(e,{to:"#_8-集群"},{default:i(()=>[d("8. 集群")]),_:1})]),a("li",null,[l(e,{to:"#_9-分布式"},{default:i(()=>[d("9. 分布式")]),_:1})]),a("li",null,[l(e,{to:"#_10-cap理论"},{default:i(()=>[d("10. CAP理论")]),_:1})]),a("li",null,[l(e,{to:"#_11-base理论"},{default:i(()=>[d("11. BASE理论")]),_:1})]),a("li",null,[l(e,{to:"#_12-水平扩展-垂直扩展"},{default:i(()=>[d("12. 水平扩展/垂直扩展")]),_:1})]),a("li",null,[l(e,{to:"#_13-平行扩容"},{default:i(()=>[d("13. 平行扩容")]),_:1})]),a("li",null,[l(e,{to:"#_14-弹性扩容"},{default:i(()=>[d("14. 弹性扩容")]),_:1})]),a("li",null,[l(e,{to:"#_15-状态同步-帧同步"},{default:i(()=>[d("15. 状态同步/帧同步")]),_:1})])])]),a("li",null,[l(e,{to:"#网络通信"},{default:i(()=>[d("网络通信")]),_:1}),a("ul",null,[a("li",null,[l(e,{to:"#_1-连接池"},{default:i(()=>[d("1. 连接池")]),_:1})]),a("li",null,[l(e,{to:"#_2-断线重连"},{default:i(()=>[d("2. 断线重连")]),_:1})]),a("li",null,[l(e,{to:"#_3-会话保持"},{default:i(()=>[d("3. 会话保持")]),_:1})]),a("li",null,[l(e,{to:"#_4-长连接-短连接"},{default:i(()=>[d("4. 长连接/短连接")]),_:1})]),a("li",null,[l(e,{to:"#_5-流量控制-拥塞控制"},{default:i(()=>[d("5. 流量控制/拥塞控制")]),_:1})]),a("li",null,[l(e,{to:"#_6-惊群效应"},{default:i(()=>[d("6. 惊群效应")]),_:1})]),a("li",null,[l(e,{to:"#_7-nat"},{default:i(()=>[d("7. NAT")]),_:1})])])]),a("li",null,[l(e,{to:"#故障异常"},{default:i(()=>[d("故障异常")]),_:1}),a("ul",null,[a("li",null,[l(e,{to:"#_1-宕机"},{default:i(()=>[d("1. 宕机")]),_:1})]),a("li",null,[l(e,{to:"#_2-coredump"},{default:i(()=>[d("2. coredump")]),_:1})]),a("li",null,[l(e,{to:"#_3-缓存穿透-击穿-雪崩"},{default:i(()=>[d("3. 缓存穿透/击穿/雪崩")]),_:1})]),a("li",null,[l(e,{to:"#_4-500-501-502-503-504-505"},{default:i(()=>[d("4. 500/501/502/503/504/505")]),_:1})]),a("li",null,[l(e,{to:"#_5-内存溢出-内存泄漏"},{default:i(()=>[d("5. 内存溢出/内存泄漏")]),_:1})]),a("li",null,[l(e,{to:"#_6-句柄泄漏"},{default:i(()=>[d("6. 句柄泄漏")]),_:1})]),a("li",null,[l(e,{to:"#_7-死锁"},{default:i(()=>[d("7. 死锁")]),_:1})]),a("li",null,[l(e,{to:"#_8-软中断-硬中断"},{default:i(()=>[d("8. 软中断/硬中断")]),_:1})]),a("li",null,[l(e,{to:"#_9-毛刺"},{default:i(()=>[d("9. 毛刺")]),_:1})]),a("li",null,[l(e,{to:"#_10-重放攻击"},{default:i(()=>[d("10. 重放攻击")]),_:1})]),a("li",null,[l(e,{to:"#_11-网络孤岛"},{default:i(()=>[d("11. 网络孤岛")]),_:1})]),a("li",null,[l(e,{to:"#_12-数据倾斜"},{default:i(()=>[d("12. 数据倾斜")]),_:1})]),a("li",null,[l(e,{to:"#_13-脑裂"},{default:i(()=>[d("13. 脑裂")]),_:1})])])]),a("li",null,[l(e,{to:"#监控告警"},{default:i(()=>[d("监控告警")]),_:1}),a("ul",null,[a("li",null,[l(e,{to:"#_1-服务监控"},{default:i(()=>[d("1. 服务监控")]),_:1})]),a("li",null,[l(e,{to:"#_2-全链路监控"},{default:i(()=>[d("2. 全链路监控")]),_:1})])])]),a("li",null,[l(e,{to:"#服务治理"},{default:i(()=>[d("服务治理")]),_:1}),a("ul",null,[a("li",null,[l(e,{to:"#_1-微服务"},{default:i(()=>[d("1. 微服务")]),_:1})]),a("li",null,[l(e,{to:"#_2-服务发现"},{default:i(()=>[d("2. 服务发现")]),_:1})]),a("li",null,[l(e,{to:"#_3-流量削峰"},{default:i(()=>[d("3. 流量削峰")]),_:1})]),a("li",null,[l(e,{to:"#_4-版本兼容"},{default:i(()=>[d("4. 版本兼容")]),_:1})]),a("li",null,[l(e,{to:"#_5-过载保护"},{default:i(()=>[d("5. 过载保护")]),_:1})]),a("li",null,[l(e,{to:"#_6-服务熔断"},{default:i(()=>[d("6. 服务熔断")]),_:1})]),a("li",null,[l(e,{to:"#_7-服务降级"},{default:i(()=>[d("7. 服务降级")]),_:1})]),a("li",null,[l(e,{to:"#_8-熔断vs降级"},{default:i(()=>[d("8. 熔断VS降级")]),_:1})]),a("li",null,[l(e,{to:"#_9-服务限流"},{default:i(()=>[d("9. 服务限流")]),_:1})]),a("li",null,[l(e,{to:"#_10-故障屏蔽"},{default:i(()=>[d("10. 故障屏蔽")]),_:1})])])]),a("li",null,[l(e,{to:"#测试方法"},{default:i(()=>[d("测试方法")]),_:1}),a("ul",null,[a("li",null,[l(e,{to:"#_1-黑盒-白盒测试"},{default:i(()=>[d("1. 黑盒/白盒测试")]),_:1})]),a("li",null,[l(e,{to:"#_2-单元-集成-系统-验收测试"},{default:i(()=>[d("2. 单元/集成/系统/验收测试")]),_:1})]),a("li",null,[l(e,{to:"#_3-回归测试"},{default:i(()=>[d("3. 回归测试")]),_:1})]),a("li",null,[l(e,{to:"#_4-冒烟测试"},{default:i(()=>[d("4. 冒烟测试")]),_:1})]),a("li",null,[l(e,{to:"#_5-性能测试"},{default:i(()=>[d("5. 性能测试")]),_:1})]),a("li",null,[l(e,{to:"#_6-基准测试"},{default:i(()=>[d("6. 基准测试")]),_:1})]),a("li",null,[l(e,{to:"#_7-a-b测试"},{default:i(()=>[d("7. A/B测试")]),_:1})]),a("li",null,[l(e,{to:"#_8-代码覆盖测试"},{default:i(()=>[d("8. 代码覆盖测试")]),_:1})])])]),a("li",null,[l(e,{to:"#发布部署"},{default:i(()=>[d("发布部署")]),_:1}),a("ul",null,[a("li",null,[l(e,{to:"#_1-dev-pro-fat-uat"},{default:i(()=>[d("1. DEV/PRO/FAT/UAT")]),_:1})]),a("li",null,[l(e,{to:"#_2-灰度发布"},{default:i(()=>[d("2. 灰度发布")]),_:1})]),a("li",null,[l(e,{to:"#_3-回滚-rollback"},{default:i(()=>[d("3. 回滚 (Rollback)")]),_:1})])])])])]),s])}const A=h(c,[["render",f],["__file","60.架构设计要点.html.vue"]]);export{A as default};
