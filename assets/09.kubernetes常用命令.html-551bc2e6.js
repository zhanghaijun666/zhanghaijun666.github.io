import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,e as d,a,d as n,w as t,b as s,f as l}from"./app-d6438571.js";const m={},u={class:"table-of-contents"},v=l(`<h2 id="node" tabindex="-1"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## k8s-master2节点需要去污点，允许pod调度，命令如下。</span>
kubectl taint <span class="token function">node</span> k8s-master2 node-role.kubernetes.io/master-
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="namespace" tabindex="-1"><a class="header-anchor" href="#namespace" aria-hidden="true">#</a> NameSpace</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 在尝试以下命令强制删除也不好使</span>
kubectl delete ns <span class="token operator">&lt;</span>terminating-namespace<span class="token operator">&gt;</span> <span class="token parameter variable">--force</span> --grace-period<span class="token operator">=</span><span class="token number">0</span>

<span class="token comment">## 1. 运行以下命令以查看处于“Terminating”状态的namespace：</span>
kubectl get namespaces
<span class="token comment">## 2. 选择一个Terminating namespace，并查看namespace 中的finalizer。运行以下命令：</span>
kubectl get namespace <span class="token operator">&lt;</span>terminating-namespace<span class="token operator">&gt;</span> <span class="token parameter variable">-o</span> yaml
<span class="token comment">## 3. 导出json格式到tmp.json:</span>
kubectl get namespace <span class="token operator">&lt;</span>terminating-namespace<span class="token operator">&gt;</span> <span class="token parameter variable">-o</span> json <span class="token operator">&gt;</span>tmp.json
<span class="token comment">## 4. 编辑tmp.josn，修改 &quot;spec&quot;: {&quot;finalizers&quot;: []}   finalizers为空数组</span>
kubectl get namespace <span class="token operator">&lt;</span>terminating-namespace<span class="token operator">&gt;</span> <span class="token parameter variable">-o</span> json <span class="token operator">|</span> jq <span class="token string">&#39;.spec.finalizers=[]&#39;</span> <span class="token operator">&gt;</span> tmp.json
<span class="token comment">## 5. 开启 proxy :</span>
kubectl proxy
<span class="token comment"># kubectl proxy --port=8081</span>
<span class="token comment">## 6. 打开新的terminal 窗口，运行以下命令：</span>
<span class="token function">curl</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token parameter variable">-X</span> PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/<span class="token operator">&lt;</span>terminating-namespace<span class="token operator">&gt;</span>/finalize
<span class="token comment">## 7. 检查该namespace 是否被删除：</span>
kubectl get namespaces


<span class="token comment">#### 如果上面方法无法删除namespace，可以通过如下方法看下namespace是不是还有什么资源没有清理</span>
<span class="token comment">## 若命名空间依然无法删除，则查询命名空间哪些资源</span>
kubectl api-resources <span class="token parameter variable">--verbs</span><span class="token operator">=</span>list <span class="token parameter variable">--namespaced</span> <span class="token parameter variable">-o</span> name <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> kubectl get --show-kind --ignore-not-found <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>terminating-namespace<span class="token operator">&gt;</span>
<span class="token comment">## 然后删除这些资源：</span>
kubectl <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>terminating-namespace<span class="token operator">&gt;</span> delete projectalertgroup.management.cattle.io/projectalert-workload-alert --grace-period<span class="token operator">=</span><span class="token number">0</span> <span class="token parameter variable">--force</span>
<span class="token comment">## 若 Pod 还是无法删除，可以在 Pod 中添加补丁：</span>
kubectl <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>terminating-namespace<span class="token operator">&gt;</span> patch projectalertgroup.management.cattle.io/projectalert-workload-alert <span class="token parameter variable">-p</span> <span class="token string">&#39;{&quot;metadata&quot;:{&quot;finalizers&quot;:[]}}&#39;</span> <span class="token parameter variable">--type</span><span class="token operator">=</span><span class="token string">&#39;merge&#39;</span>
<span class="token comment">## 添加补丁后，强制删除：</span>
kubectl <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>terminating-namespace<span class="token operator">&gt;</span> delete projectalertrule.management.cattle.io/memory-close-to-resource-limited --grace-period<span class="token operator">=</span><span class="token number">0</span> <span class="token parameter variable">--force</span>
<span class="token comment">## 然后执行下面命令删除namespace</span>
kubectl patch namespace <span class="token operator">&lt;</span>terminating-namespace<span class="token operator">&gt;</span> <span class="token parameter variable">-p</span> <span class="token string">&#39;{&quot;metadata&quot;:{&quot;finalizers&quot;:[]}}&#39;</span> <span class="token parameter variable">--type</span><span class="token operator">=</span><span class="token string">&#39;merge&#39;</span>
kubectl delete namespace cattle-system --grace-period<span class="token operator">=</span><span class="token number">0</span> <span class="token parameter variable">--force</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment" aria-hidden="true">#</a> Deployment</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 获取hostNetwork网络模式的deployment</span>
kubectl get deployment --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[?(@.spec.template.spec.hostNetwork==true)]} {&quot;namespace: &quot;} {.metadata.namespace} {&quot;, name:&quot;} {.metadata.name} {&quot;\\n&quot;} {end}&#39;</span>

<span class="token comment">## 获取特权模式的deployment</span>
kubectl get deployment --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[?(@.spec.template.spec.containers[*].securityContext.privileged==true)]} {&quot;namespace: &quot;}{.metadata.namespace}{&quot;, name:&quot;} {.metadata.name} {&quot;\\n&quot;} {end}&#39;</span>

<span class="token comment">## 获取控制进程可以获得超出其父进程的特权的deployment</span>
kubectl get deployment --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[?(@.spec.template.spec.containers[*].securityContext.allowPrivilegeEscalation==true)]} {&quot;namespace: &quot;}{.metadata.namespace}{&quot;, name:&quot;} {.metadata.name} {&quot;\\n&quot;} {end}&#39;</span>

<span class="token comment">## 获取所有deployment的容器名称和namespace</span>
kubectl get deployment --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[?(@.spec.template.spec.containers[*])]} {&quot;namespace: &quot;}{.metadata.namespace}{&quot;, name:&quot;} {.metadata.name} {&quot;\\n&quot;} {end}&#39;</span>

<span class="token comment">## 获取所有deployment的容器端口</span>
kubectl get deployment --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[*]} {&quot;namespace: &quot;}{.metadata.namespace}{&quot;, name:&quot;} {.metadata.name} {&quot;, &quot;}{.spec.template.spec.containers[*].ports} {&quot;\\n&quot;} {end}&#39;</span>

<span class="token comment">## 获取配置了hostport的deployment</span>
kubectl get deployment --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[*]} {&quot;namespace: &quot;}{.metadata.namespace}{&quot;, name:&quot;} {.metadata.name} {&quot; &quot;}{.spec.template.spec.containers[*].ports} {&quot;\\n&quot;} {end}&#39;</span> <span class="token operator">|</span><span class="token function">grep</span> map <span class="token operator">|</span> <span class="token function">grep</span> hostPort <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $1 $2 &quot; &quot;$3 $4}&#39;</span>

<span class="token comment">## 获取配置了capabilities属性的deployment</span>
kubectl get deployment --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[*]} {&quot;namespace: &quot;}{.metadata.namespace}{&quot;, name:&quot;} {.metadata.name} {&quot; &quot;}{.spec.template.spec.containers[*].securityContext} {&quot;\\n&quot;} {end}&#39;</span> <span class="token operator">|</span><span class="token function">grep</span> capabilities <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $1 $2 &quot; &quot;$3 $4}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="daemonset" tabindex="-1"><a class="header-anchor" href="#daemonset" aria-hidden="true">#</a> DaemonSet</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 重启</span>
kubectl rollout restart daemonset kube-proxy <span class="token parameter variable">-n</span> kube-system

<span class="token comment">## 获取所有配置了hostNetwork的DaemonSet</span>
kubectl get ds --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[?(@.spec.template.spec.hostNetwork==true)]} {&quot;namespace: &quot;} {.metadata.namespace}{&quot;, name:&quot;} {.metadata.name} {&quot;\\n&quot;} {end}&#39;</span>

<span class="token comment">## 获取所有配置了hostIPC模式的DaemonSet</span>
kubectl get ds --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[?(@.spec.template.spec.hostIPC==true)]} {&quot;namespace: &quot;} {.metadata.namespace}{&quot;, name:&quot;} {.metadata.name} {&quot;\\n&quot;} {end}&#39;</span>

<span class="token comment">## 获取所有配置了hostPID模式的DaemonSet</span>
kubectl get ds --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[?(@.spec.template.spec.hostPID==true)]} {&quot;namespace: &quot;} {.metadata.namespace}{&quot;, name:&quot;} {.metadata.name} {&quot;\\n&quot;} {end}&#39;</span>

<span class="token comment">## 获取所有配置了allowPrivilegeEscalation模式的DaemonSet</span>
kubectl get ds --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[?(@.spec.template.spec.containers[*].securityContext.allowPrivilegeEscalation==true)]} {&quot;namespace: &quot;}{.metadata.namespace}{&quot;, name:&quot;} {.metadata.name} {&quot;\\n&quot;} {end}&#39;</span>

<span class="token comment">## 获取配置了hostport的DaemonSet</span>
kubectl get ds --all-namespaces <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token string">&#39;{range .items[*]} {&quot;namespace: &quot;}{.metadata.namespace}{&quot;, name:&quot;} {.metadata.name} {&quot; &quot;}{.spec.template.spec.containers[*].ports} {&quot;\\n&quot;} {end}&#39;</span> <span class="token operator">|</span><span class="token function">grep</span> map <span class="token operator">|</span> <span class="token function">grep</span> hostPort <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $1 $2 &quot; &quot;$3 $4}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pod" tabindex="-1"><a class="header-anchor" href="#pod" aria-hidden="true">#</a> Pod</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 获取所有pod的ip和所在node的ip</span>
kubectl get pods --all-namespaces    <span class="token parameter variable">-o</span><span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">&#39;{range .items[*]}[nodeip:{.status.hostIP}, podip:{.status.podIP}]{&quot;\\n&quot;}{end}&#39;</span>

<span class="token comment">## 删除有问题的pod</span>
kubectl get pods <span class="token parameter variable">-A</span> <span class="token operator">|</span> <span class="token function">grep</span> Evicted <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> kubectl delete pod

<span class="token comment">## 查看多个Pod中的日志信息</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">p</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span>kubectl get pods <span class="token parameter variable">--namespace</span><span class="token operator">=</span>kube-system <span class="token parameter variable">-l</span> k8s-app<span class="token operator">=</span>kube-dns <span class="token parameter variable">-o</span> name<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> kubectl logs <span class="token parameter variable">--namespace</span><span class="token operator">=</span>kube-system <span class="token variable">$p</span><span class="token punctuation">;</span> <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),k={href:"http://clean-evicted-pod.sh",target:"_blank",rel:"noopener noreferrer"},b=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;&gt;</span> clean-evicted-pod.sh <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
#!/bin/bash

basepath=\\<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token punctuation">\\</span>\`dirname <span class="token punctuation">\\</span>$0<span class="token punctuation">\\</span>\`<span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>

kubectl get pods -A | grep Evicted | awk -F &quot; &quot; &#39;{print \\<span class="token variable">$1</span>,\\<span class="token variable">$2</span>}&#39;  &gt;&gt; \\<span class="token variable">$basepath</span>/tmp.file

while read line
do
    ns=\\<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> <span class="token punctuation">\\</span>$line <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">&quot; &quot;</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token punctuation">\\</span><span class="token variable">\`</span></span>
    podname=\\<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> <span class="token punctuation">\\</span>$line <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">&quot; &quot;</span> <span class="token string">&#39;{print $2}&#39;</span><span class="token punctuation">\\</span><span class="token variable">\`</span></span>
    kubectl delete pod \\<span class="token variable">$podname</span> -n \\<span class="token variable">$ns</span>
done &lt; \\<span class="token variable">$basepath</span>/tmp.file

rm \\<span class="token variable">$basepath</span>/tmp.file
EOF</span>
<span class="token function">sh</span> clean-evicted-pod.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pvc" tabindex="-1"><a class="header-anchor" href="#pvc" aria-hidden="true">#</a> PVC</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 批量删除PVC</span>
kubectl <span class="token parameter variable">-n</span> default delete pvc <span class="token variable"><span class="token variable">\`</span>kubectl <span class="token parameter variable">-n</span> default get pvc <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> VOLUME <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span> <span class="token operator">|</span>  <span class="token function">tr</span> <span class="token string">&#39;\\n&#39;</span> <span class="token string">&#39; &#39;</span><span class="token variable">\`</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ingress" tabindex="-1"><a class="header-anchor" href="#ingress" aria-hidden="true">#</a> Ingress</h2><h3 id="配置-https-证书" tabindex="-1"><a class="header-anchor" href="#配置-https-证书" aria-hidden="true">#</a> 配置 HTTPS 证书</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 创建密钥</span>
openssl genrsa <span class="token parameter variable">-out</span> devops.key <span class="token number">2048</span>
openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-x509</span> <span class="token parameter variable">-key</span> devops.key <span class="token parameter variable">-out</span> devops.crt <span class="token parameter variable">-subj</span> /C<span class="token operator">=</span>CN/ST<span class="token operator">=</span>Shanghai/L<span class="token operator">=</span>Shanghai/O<span class="token operator">=</span>DevOps/CN<span class="token operator">=</span>*.devops.*
<span class="token comment">## 导入密钥</span>
kubectl create secret tls devops-secret-ingress <span class="token parameter variable">--cert</span><span class="token operator">=</span>devops.crt <span class="token parameter variable">--key</span><span class="token operator">=</span>devops.key <span class="token parameter variable">-n</span> devops
kubectl describe secret devops-secret-ingress <span class="token parameter variable">-n</span> devops

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function g(h,q){const e=p("router-link"),o=p("ExternalLinkIcon");return i(),c("div",null,[d(" more "),a("nav",u,[a("ul",null,[a("li",null,[n(e,{to:"#node"},{default:t(()=>[s("Node")]),_:1})]),a("li",null,[n(e,{to:"#namespace"},{default:t(()=>[s("NameSpace")]),_:1})]),a("li",null,[n(e,{to:"#deployment"},{default:t(()=>[s("Deployment")]),_:1})]),a("li",null,[n(e,{to:"#daemonset"},{default:t(()=>[s("DaemonSet")]),_:1})]),a("li",null,[n(e,{to:"#pod"},{default:t(()=>[s("Pod")]),_:1})]),a("li",null,[n(e,{to:"#pvc"},{default:t(()=>[s("PVC")]),_:1})]),a("li",null,[n(e,{to:"#ingress"},{default:t(()=>[s("Ingress")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#配置-https-证书"},{default:t(()=>[s("配置 HTTPS 证书")]),_:1})])])])])]),v,a("blockquote",null,[a("p",null,[s("有时候由于节点的内存或者磁盘使用率较高导致集群中产生了大量的 evited 状态 pod，这些 pod 如果不手动删除，会一直存在集群中，这里提供了脚本 "),a("a",k,[s("clean-evicted-pod.sh"),n(o)]),s(" 来一键清理集群中的 evited 状态 pod。")])]),b])}const _=r(m,[["render",g],["__file","09.kubernetes常用命令.html.vue"]]);export{_ as default};
