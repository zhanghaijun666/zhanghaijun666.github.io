const n=JSON.parse(`{"key":"v-0a1401af","path":"/30.%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/15.VUE%E5%BA%94%E7%94%A8/13.%E7%94%A8proxy%E6%94%B9%E9%80%A0%E4%BD%A0%E7%9A%84console.html","title":"用proxy改造你的console","lang":"zh-CN","frontmatter":{"title":"用proxy改造你的console","date":"2023-06-18T00:00:00.000Z","category":["编程技巧","VUE应用"],"tag":["VUE应用"],"description":"解决方案 方案一，通过ast解析console 将变量名放在console后面，奈何esbuild不支持ast操作(不是我不会 哈哈哈哈), 故放弃。 方案二，既然vue能代理对象，那么console是不是也能被代理。 实践 第一步代理console,将原始的console,用全局变量originConsole保存起来，以便后续使用 withLogging 函数拦截console.log 重写log参数 js复制代码const originConsole = window.console; var console = new Proxy(window.console, { get(target, property) { if(property === 'log') { return withLogging(target[property]) } return target[property] }, })","head":[["meta",{"property":"og:url","content":"https://haijunit.top/30.%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/15.VUE%E5%BA%94%E7%94%A8/13.%E7%94%A8proxy%E6%94%B9%E9%80%A0%E4%BD%A0%E7%9A%84console.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"用proxy改造你的console"}],["meta",{"property":"og:description","content":"解决方案 方案一，通过ast解析console 将变量名放在console后面，奈何esbuild不支持ast操作(不是我不会 哈哈哈哈), 故放弃。 方案二，既然vue能代理对象，那么console是不是也能被代理。 实践 第一步代理console,将原始的console,用全局变量originConsole保存起来，以便后续使用 withLogging 函数拦截console.log 重写log参数 js复制代码const originConsole = window.console; var console = new Proxy(window.console, { get(target, property) { if(property === 'log') { return withLogging(target[property]) } return target[property] }, })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-01T16:05:51.000Z"}],["meta",{"property":"article:author","content":"知识库"}],["meta",{"property":"article:tag","content":"VUE应用"}],["meta",{"property":"article:published_time","content":"2023-06-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-01T16:05:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"用proxy改造你的console\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-01T16:05:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"知识库\\",\\"url\\":\\"https://haijunit.top\\",\\"email\\":\\"zhanghaijun_java@163.com\\"}]}"]]},"headers":[{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[{"level":3,"title":"最后","slug":"最后","link":"#最后","children":[]}]}],"git":{"createdTime":1687099018000,"updatedTime":1688227551000,"contributors":[{"name":"zhanghaijun","email":"zhanghaijun@bjtxra.com","commits":2}]},"readingTime":{"minutes":1.29,"words":386},"filePathRelative":"30.编程技巧/15.VUE应用/13.用proxy改造你的console.md","localizedDate":"2023年6月18日","excerpt":"<h2> 解决方案</h2>\\n<p>方案一，通过ast解析console 将变量名放在console后面，奈何esbuild不支持ast操作(不是我不会 哈哈哈哈), 故放弃。</p>\\n<p>方案二，既然vue能代理对象，那么console是不是也能被代理。</p>\\n<h2> 实践</h2>\\n<p>第一步代理console,将原始的console,用全局变量originConsole保存起来，以便后续使用 withLogging 函数拦截console.log 重写log参数</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code>js复制代码<span class=\\"token keyword\\">const</span> originConsole <span class=\\"token operator\\">=</span> window<span class=\\"token punctuation\\">.</span>console<span class=\\"token punctuation\\">;</span> \\n<span class=\\"token keyword\\">var</span> console <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">(</span>window<span class=\\"token punctuation\\">.</span>console<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> \\n    <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">,</span> property<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> \\n    <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>property <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'log'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> \\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">withLogging</span><span class=\\"token punctuation\\">(</span>target<span class=\\"token punctuation\\">[</span>property<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> \\n    <span class=\\"token punctuation\\">}</span> \\n    <span class=\\"token keyword\\">return</span> target<span class=\\"token punctuation\\">[</span>property<span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> \\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
