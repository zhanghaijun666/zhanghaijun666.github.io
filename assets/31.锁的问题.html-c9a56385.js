import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,e as i,a as n,d as a,w as t,f as u,b as e}from"./app-d6438571.js";const k={},r={class:"table-of-contents"},d=u(`<h2 id="锁和事务的区别" tabindex="-1"><a class="header-anchor" href="#锁和事务的区别" aria-hidden="true">#</a> 锁和事务的区别</h2><ul><li>锁：为了在高并发（多线程）模式下，防止共享资源出现并发修改的情况，锁为多线程而生。</li><li>事务：一次会话，一个线程的原子操作，保证一些操作要么都成功，要么都失败。</li><li>分布式锁：在多个进程模式下，防止多个进程共享数据的并发修改，分布式锁是解决多个客户端对共享资源的互斥访问。</li><li>分布式事务：多个事务存在与多个 jvm 进程中，保证多个进程要么多成功，要么多失败。</li></ul><h2 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a> 分布式锁</h2><p>分布式锁： MySQL，Redis, zookeeper 以上三个服务都可以作为第三方加锁的服务；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// MySQL悲观锁的实现方式 加上for update ,表示所有的线程执行此方法的时候，都是互斥的访问关系；</span>
<span class="token annotation punctuation">@select</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;select * from table where id = #{seckillId} for update&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">EntityVo</span> <span class="token function">selectByPrimaryKeyBySQLLock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> seckillId <span class="token punctuation">)</span>

<span class="token comment">// MySQ乐观锁的实现方式</span>
<span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;UPDATE table SET stock_count= stock_count-1,version=version+1 WHERE id = #{seckillId} AND version = #{version}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">updateSeckillGoodsByPrimaryKeyByVersion</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;seckillId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> seckillId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redis-锁" tabindex="-1"><a class="header-anchor" href="#redis-锁" aria-hidden="true">#</a> Redis 锁</h2><p>Redis 分布式锁: 基于内存的高性能的锁，但是存在问题。<br> Redis 是 AP 模型的数据库，因此在海量的数据模式下，存在数据丢失的可能，Redis 丢失的概率 &lt; mysql<br> Redis 使用 RedLock 解决锁丢失的问题；<br> Redisson 分布式锁实现框架： 可重入锁，锁续航，RedLock 都已经实现了；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockRedisAspect</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注入request</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">;</span>

    <span class="token comment">// service 切入点</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(com.sugo.seckill.aop.redis.ServiceRedisLock)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;lockAspect()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 获取请求参数</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> killId <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用redis锁</span>
        <span class="token keyword">boolean</span> res <span class="token operator">=</span> <span class="token class-name">RedissLockUtil</span><span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token string">&quot;seckill_goods_lock_&quot;</span> <span class="token operator">+</span> killId<span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//加锁成功，执行业务</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>
                obj <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 释放锁</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>
              <span class="token class-name">RedissLockUtil</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token string">&quot;seckill_goods_lock_&quot;</span> <span class="token operator">+</span> killId<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function v(m,b){const s=o("router-link");return c(),l("div",null,[i(" more "),n("nav",r,[n("ul",null,[n("li",null,[a(s,{to:"#锁和事务的区别"},{default:t(()=>[e("锁和事务的区别")]),_:1})]),n("li",null,[a(s,{to:"#分布式锁"},{default:t(()=>[e("分布式锁")]),_:1})]),n("li",null,[a(s,{to:"#redis-锁"},{default:t(()=>[e("Redis 锁")]),_:1})])])]),d])}const h=p(k,[["render",v],["__file","31.锁的问题.html.vue"]]);export{h as default};
