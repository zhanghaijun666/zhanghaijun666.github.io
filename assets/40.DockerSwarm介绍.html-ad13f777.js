import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as i,c as l,e as d,a as n,d as s,w as o,b as a,f as p}from"./app-d6438571.js";const m="/assets/swarm架构图-2865b112.png",u={},k={class:"table-of-contents"},h=n("h2",{id:"相关地址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关地址","aria-hidden":"true"},"#"),a(" 相关地址")],-1),v={href:"https://github.com/docker-archive/classicswarm",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/moby/swarmkit",target:"_blank",rel:"noopener noreferrer"},b=p('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><blockquote><p>Docker Swarm是管理跨节点容器的编排工具，Docker 官方容器编排项目。<code>Docker Swarm</code>和<code>Docker Compose</code>一样，都是编排工具，但不同的是:</p><p><code>Docker Compose</code>只能编排单节点上的容器。</p><p><code>Docker Swarm</code>将一群Docker节点虚拟化为一个主机，使得用户只要在单一主机上操作就能完成对整个容器集群的管理工作。</p></blockquote><h2 id="架构图" tabindex="-1"><a class="header-anchor" href="#架构图" aria-hidden="true">#</a> 架构图</h2><p>Swarm deamon只是一个调度器(Scheduler)加路由器(router),Swarm自己不运行容器，它只是接受Docker客户端发来的请求，调度适合的节点来运行容器，这就意味着，即使Swarm由于某些原因挂掉了，集群中的节点也会照常运行，放Swarm重新恢复运行之后，他会收集重建集群信息。</p><figure><img src="'+m+`" alt="swarm" tabindex="0" loading="lazy"><figcaption>swarm</figcaption></figure><p>Swarm是典型的master-slave结构，通过发现服务来选举manager。manager是中心管理节点，各个node上运行agent接受manager的统一管理，集群会自动通过Raft协议分布式选举出manager节点，无需额外的发现服务支持，避免了单点的瓶颈问题，同时也内置了DNS的负载均衡和对外部负载均衡机制的集成支持</p><h2 id="swarm优点" tabindex="-1"><a class="header-anchor" href="#swarm优点" aria-hidden="true">#</a> Swarm优点</h2><ul><li>任何规模都有高性能表现</li><li>灵活的容器调度</li><li>服务的持续可用性</li><li>和 Docker API 及整合支持的兼容性</li><li><code>Docker Swarm</code>为<code>Docker</code>化应用的核心功能提供原生支持。</li></ul><h2 id="swarm核心" tabindex="-1"><a class="header-anchor" href="#swarm核心" aria-hidden="true">#</a> Swarm核心</h2><h3 id="_1、swarm" tabindex="-1"><a class="header-anchor" href="#_1、swarm" aria-hidden="true">#</a> 1、Swarm</h3><p>集群的管理和编排是使用嵌入<code>docker</code>引擎的<code>SwarmKit</code>，可以在<code>docker</code>初始化时启动<code>swarm</code>模式或者加入已存在的<code>swarm</code></p><h3 id="_2、node" tabindex="-1"><a class="header-anchor" href="#_2、node" aria-hidden="true">#</a> 2、Node</h3><p><code>Node</code>是docker引擎集群的一个实例。管理节点（manager nodes）和工作节点（worker nodes）</p><h3 id="_3、service服务" tabindex="-1"><a class="header-anchor" href="#_3、service服务" aria-hidden="true">#</a> 3、Service服务</h3><p>一个服务是任务的定义，管理机或工作节点上执行。它是群体系统的中心结构，是用户与群体交互的主要根源。创建服务时，你需要指定要使用的容器镜像。</p><h3 id="_4、task任务" tabindex="-1"><a class="header-anchor" href="#_4、task任务" aria-hidden="true">#</a> 4、Task任务</h3><p>任务是在docekr容器中执行的命令，Manager节点根据指定数量的任务副本分配任务给worker节点</p><h2 id="高可用性-ha" tabindex="-1"><a class="header-anchor" href="#高可用性-ha" aria-hidden="true">#</a> 高可用性（HA）</h2><p>有以下两条最佳实践原则。</p><ul><li>部署奇数个管理节点。</li><li>不要部署太多管理节点（建议 3 个或 5 个）。</li></ul><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><h3 id="_1、swarm-命令" tabindex="-1"><a class="header-anchor" href="#_1、swarm-命令" aria-hidden="true">#</a> 1、swarm 命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 初始化集群</span>
<span class="token function">docker</span> swarm init
<span class="token comment"># 查看工作节点的 token</span>
<span class="token function">docker</span> swarm join-token worker
<span class="token comment"># 查看管理节点的 token</span>
<span class="token function">docker</span> swarm join-token manager
<span class="token comment"># 加入集群中</span>
<span class="token function">docker</span> swarm <span class="token function">join</span>               
<span class="token comment"># 删除swarm节点</span>
<span class="token function">docker</span> swarm leave <span class="token parameter variable">--force</span>        <span class="token comment"># 管理节点，离开节点，强制离开</span>
<span class="token function">docker</span> swarm leave                <span class="token comment"># 工作节点，离开节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、node-命令" tabindex="-1"><a class="header-anchor" href="#_2、node-命令" aria-hidden="true">#</a> 2、node 命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">node</span> <span class="token function">ls</span>                             <span class="token comment"># 查看所有集群节点</span>
<span class="token function">docker</span> <span class="token function">node</span> <span class="token function">ps</span>                             <span class="token comment"># 查看节点中的 Task 任务</span>
<span class="token function">docker</span> <span class="token function">node</span> <span class="token function">rm</span> 节点名称<span class="token operator">|</span> 节点ID            <span class="token comment"># 删除某个节点</span>
<span class="token function">docker</span> <span class="token function">node</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> 节点名称<span class="token operator">|</span> 节点ID         <span class="token comment"># 删除某个节点（强制删除）</span>
<span class="token function">docker</span> <span class="token function">node</span> inspect 节点名称<span class="token operator">|</span> 节点ID       <span class="token comment"># 查看节点详情</span>
<span class="token function">docker</span> <span class="token function">node</span> demote 节点名称<span class="token operator">|</span> 节点ID        <span class="token comment"># 节点降级，由管理节点降级为工作节点</span>
<span class="token function">docker</span> <span class="token function">node</span> promote 节点名称<span class="token operator">|</span> 节点ID       <span class="token comment"># 节点升级，由工作节点升级为管理节点</span>
<span class="token function">docker</span> <span class="token function">node</span> update 节点名称<span class="token operator">|</span> 节点ID        <span class="token comment"># 更新节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、service-命令" tabindex="-1"><a class="header-anchor" href="#_3、service-命令" aria-hidden="true">#</a> 3、service 命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">service</span> <span class="token parameter variable">--help</span>                       <span class="token comment"># 帮助文档</span>
<span class="token function">docker</span> <span class="token function">service</span> create                       <span class="token comment"># 部署服务</span>
<span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ls</span>                           <span class="token comment"># 查看swarm集群正在运行的列表服务</span>
<span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ps</span> nginx                     <span class="token comment"># 列出服务的任务</span>
<span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ps</span> redis                     <span class="token comment"># 列出服务的任务</span>
<span class="token function">docker</span> <span class="token function">service</span> inspect 服务名称<span class="token operator">|</span>服务ID      <span class="token comment"># 查看服务详情</span>
<span class="token function">docker</span> <span class="token function">service</span> logs 服务名称<span class="token operator">|</span>服务ID         <span class="token comment"># 产看某个服务日志</span>
<span class="token function">docker</span> <span class="token function">service</span> <span class="token function">rm</span> 服务名称<span class="token operator">|</span>服务ID           <span class="token comment"># 删除某个服务（-f强制删除）</span>
<span class="token function">docker</span> <span class="token function">service</span> scale 服务名称<span class="token operator">|</span>服务ID<span class="token operator">=</span>n      <span class="token comment"># 设置某个服务个数，弹性服务，动态 扩/缩 容</span>
<span class="token function">docker</span> <span class="token function">service</span> scale <span class="token assign-left variable">nginx</span><span class="token operator">=</span><span class="token number">3</span>                <span class="token comment"># 修改服务实例数量为3</span>
<span class="token function">docker</span> <span class="token function">service</span> update 服务名称<span class="token operator">|</span>服务ID       <span class="token comment"># 更新某个服务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27);function _(w,g){const e=t("router-link"),c=t("ExternalLinkIcon");return i(),l("div",null,[d(" more "),n("nav",k,[n("ul",null,[n("li",null,[s(e,{to:"#相关地址"},{default:o(()=>[a("相关地址")]),_:1})]),n("li",null,[s(e,{to:"#介绍"},{default:o(()=>[a("介绍")]),_:1})]),n("li",null,[s(e,{to:"#架构图"},{default:o(()=>[a("架构图")]),_:1})]),n("li",null,[s(e,{to:"#swarm优点"},{default:o(()=>[a("Swarm优点")]),_:1})]),n("li",null,[s(e,{to:"#swarm核心"},{default:o(()=>[a("Swarm核心")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#_1、swarm"},{default:o(()=>[a("1、Swarm")]),_:1})]),n("li",null,[s(e,{to:"#_2、node"},{default:o(()=>[a("2、Node")]),_:1})]),n("li",null,[s(e,{to:"#_3、service服务"},{default:o(()=>[a("3、Service服务")]),_:1})]),n("li",null,[s(e,{to:"#_4、task任务"},{default:o(()=>[a("4、Task任务")]),_:1})])])]),n("li",null,[s(e,{to:"#高可用性-ha"},{default:o(()=>[a("高可用性（HA）")]),_:1})]),n("li",null,[s(e,{to:"#常用命令"},{default:o(()=>[a("常用命令")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#_1、swarm-命令"},{default:o(()=>[a("1、swarm 命令")]),_:1})]),n("li",null,[s(e,{to:"#_2、node-命令"},{default:o(()=>[a("2、node 命令")]),_:1})]),n("li",null,[s(e,{to:"#_3、service-命令"},{default:o(()=>[a("3、service 命令")]),_:1})])])])])]),h,n("ul",null,[n("li",null,[n("a",v,[a("https://github.com/docker-archive/classicswarm"),s(c)])]),n("li",null,[n("a",f,[a("https://github.com/moby/swarmkit"),s(c)])])]),b])}const S=r(u,[["render",_],["__file","40.DockerSwarm介绍.html.vue"]]);export{S as default};
