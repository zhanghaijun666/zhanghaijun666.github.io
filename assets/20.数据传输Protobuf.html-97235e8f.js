import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as c,c as l,a as n,b as s,d as p,f as t}from"./app-d6438571.js";const i={},u=n("figure",null,[n("img",{src:"https://mmbiz.qpic.cn/mmbiz_jpg/4lfok2icUkibTvB5v6uBDUaom2VOkdxu9AicLVta92lVH6AcIEGxdFfnFkA2g7hbrFPDULx4jIiaZOUiaibFZQ5APKiaA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片",tabindex:"0",loading:"lazy"}),n("figcaption",null,"图片")],-1),k={href:"https://github.com/protocolbuffers/protobuf",target:"_blank",rel:"noopener noreferrer"},r={href:"https://protobuf.dev/overview/",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="protobuf-介绍" tabindex="-1"><a class="header-anchor" href="#protobuf-介绍" aria-hidden="true">#</a> Protobuf 介绍</h2><p><code>Protobuf（Protocol Buffers）</code>是由 <code>Google</code> 开发的一种轻量级、高效的数据交换格式，它被用于结构化数据的序列化、反序列化和传输。相比于 XML 和 JSON 等文本格式，Protobuf 具有更小的数据体积、更快的解析速度和更强的可扩展性。</p><p>Protobuf 的核心思想是使用协议（<code>Protocol</code>）来定义数据的结构和编码方式。使用 <code>Protobuf</code>，可以先定义数据的结构和各字段的类型、字段等信息，然后使用Protobuf提供的编译器生成对应的代码，用于序列化和反序列化数据。由于 <code>Protobuf</code> 是基于二进制编码的，因此可以在数据传输和存储中实现更高效的数据交换，同时也可以跨语言使用。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_jpg/4lfok2icUkibTvB5v6uBDUaom2VOkdxu9APB0l04Vib77PuFNKqia2h9D0GAMLibhg5ibsjLUTTxlpIOoibNWGKyAgibDg/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>相比于 <code>XML</code> 和 <code>JSON</code>，<code>Protobuf</code> 有以下几个优势：</p><ul><li>更小的数据量：<code>Protobuf</code> 的二进制编码通常比 <code>XML</code> 和 <code>JSON</code> 小 3-10 倍，因此在网络传输和存储数据时可以节省带宽和存储空间。</li><li>更快的序列化和反序列化速度：由于 Protobuf 使用二进制格式，所以序列化和反序列化速度比 <code>XML</code> 和 <code>JSON</code> 快得多。</li><li>跨语言：Protobuf 支持多种编程语言，可以使用不同的编程语言来编写客户端和服务端。这种跨语言的特性使得 <code>Protobuf</code> 受到很多开发者的欢迎（JSON 也是如此）。</li><li>易于维护可扩展：Protobuf 使用 .proto 文件定义数据模型和数据格式，这种文件比 <code>XML</code> 和 <code>JSON</code>更容易阅读和维护，且可以在不破坏原有协议的基础上，轻松添加或删除字段，实现版本升级和兼容性。</li></ul><h2 id="编写-protobuf" tabindex="-1"><a class="header-anchor" href="#编写-protobuf" aria-hidden="true">#</a> 编写 Protobuf</h2><p>使用 Protobuf 的语言定义文件（<code>.proto</code>）可以定义要传输的信息的数据结构，可以包括各个字段的名称、类型等信息。同时也可以相互嵌套组合，构造出更加复杂的消息结构。</p><p>比如想要构造一个地址簿 <code>AddressBook</code> 信息结构。一个 <code>AddressBook</code> 可以包含多个人员 Person 信息，每个 Person 信息可以包含 id、name、email 信息，同时一个 Person 也可以包含多个电话号码信息 <code>PhoneNumber</code>，每个电话号码信息需要指定号码种类，如手机、家庭电话、工作电话等。</p><p>如果使用 <code>Protobuf</code> 编写定义文件如下：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token comment">// 文件：addressbook.proto</span>
<span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 指定 protobuf 包名，防止有相同类名的 message 定义</span>
<span class="token keyword">package</span> com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>protobuf<span class="token punctuation">;</span>
<span class="token comment">// 是否生成多个文件</span>
<span class="token keyword">option</span> java_multiple_files <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">// 生成的文件存放在哪个包下</span>
<span class="token keyword">option</span> java_package <span class="token operator">=</span> <span class="token string">&quot;com.wdbyte.tool.protos&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 生成的类名，如果没有指定，会根据文件名自动转驼峰来命名</span>
<span class="token keyword">option</span> java_outer_classname <span class="token operator">=</span> <span class="token string">&quot;AddressBookProtos&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">message</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token comment">// =1，=2 作为序列化后的二进制编码中的字段的唯一标签，也因此，1-15 比 16 会少一个字节，所以尽量使用 1-15 来指定常用字段。</span>
  <span class="token keyword">optional</span> <span class="token builtin">int32</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">optional</span> <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">optional</span> <span class="token builtin">string</span> email <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

  <span class="token keyword">enum</span> <span class="token class-name">PhoneType</span> <span class="token punctuation">{</span>
    MOBILE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    HOME <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    WORK <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">message</span> <span class="token class-name">PhoneNumber</span> <span class="token punctuation">{</span>
    <span class="token keyword">optional</span> <span class="token builtin">string</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">optional</span> <span class="token positional-class-name class-name">PhoneType</span> type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">PhoneNumber</span> phones <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">message</span> <span class="token class-name">AddressBook</span> <span class="token punctuation">{</span>
  <span class="token keyword">repeated</span> <span class="token positional-class-name class-name">Person</span> people <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Protobuf 文件中的语法解释。</p><h3 id="头部全局定义" tabindex="-1"><a class="header-anchor" href="#头部全局定义" aria-hidden="true">#</a> 头部全局定义</h3><ul><li><code>syntax = &quot;proto3&quot;;</code>指定 <code>Protobuf</code> 版本为版本3（最新版本）</li><li><code>package com.wdbyte.protobuf;</code>指定 <code>Protobuf</code> 包名，防止有相同类名的 <code>message</code> 定义，这个包名是生成的类中所用到的一些信息的前缀，并非类所在包。</li><li><code>option java_multiple_files = true;</code> 是否生成多个文件。若 <code>false</code>，则只会生成一个类，其他类以内部类形式提供。</li><li><code>option java_package =</code> 生成的类所在包。</li><li><code>option java_outer_classname</code> 生成的类名，若无，自动使用文件名进行驼峰转换来为类命名。</li></ul><h3 id="消息结构具体定义" tabindex="-1"><a class="header-anchor" href="#消息结构具体定义" aria-hidden="true">#</a> 消息结构具体定义</h3><p><code>message Person</code> 定一个了一个 Person 类。</p><p>Person 类中的字段被 <code>optional</code> 修饰，被 <code>optional</code> 修饰说明字段可以不赋值。</p><ul><li>修饰符 <code>optional</code> 表示可选字段，可以不赋值。</li><li>修饰符 <code>repeated</code> 表示数据重复多个，如数组，如 List。</li><li>修饰符 <code>required</code> 表示必要字段，必须给值，否则会报错 <code>RuntimeException</code>，但是在 Protobuf 版本 3 中被移除。即使在版本 2 中也应该慎用，因为一旦定义，很难更改。</li></ul><h3 id="字段类型定义" tabindex="-1"><a class="header-anchor" href="#字段类型定义" aria-hidden="true">#</a> 字段类型定义</h3><p>修饰符后面紧跟的是字段类型，如 <code>int32</code> 、<code>string</code>。常用的类型如下：</p><ul><li><code>int32、int64、uint32、uint64</code>：整数类型，包括有符号和无符号类型。</li><li><code>float、double</code>：浮点数类型。</li><li><code>bool</code>：布尔类型，只有两个值，true 和 false。</li><li><code>string</code>：字符串类型。</li><li><code>bytes</code>：二进制数据类型。</li><li><code>enum</code>：枚举类型，枚举值可以是整数或字符串。</li><li><code>message</code>：消息类型，可以嵌套其他消息类型，类似于结构体。</li></ul><p>字段后面的 <code>=1，=2</code> 是作为序列化后的二进制编码中的字段的对应标签，因为 Protobuf 消息在序列化后是不包含字段信息的，只有对应的字段序号，所以节省了空间。也因此，1-15 比 16 会少一个字节，所以尽量使用 1-15 来指定常用字段。且一旦定义，不要随意更改，否则可能会对不上序列化信息。</p><h2 id="编译-protobuf" tabindex="-1"><a class="header-anchor" href="#编译-protobuf" aria-hidden="true">#</a> 编译 Protobuf</h2><p>使用 Protobuf 提供的编译器，可以将 <code>.proto</code> 文件编译成各种语言的代码文件（如 Java、C++、Python 等）。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_jpg/4lfok2icUkibTvB5v6uBDUaom2VOkdxu9AgW9rJGUpGEVUYuB62r9Tadr1vbkDkK12cv3RYR7KJ1kgE6RK4Yu7BA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>`,25),m={href:"https://github.com/protocolbuffers/protobuf/releases/latest",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>安装完成后可以使用 <code>protoc</code> 命令编译 <code>proto</code> 文件，如编译示例中的 <code>addressbook.proto</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>protoc <span class="token parameter variable">--java_out</span><span class="token operator">=</span>./java ./resources/addressbook.proto
<span class="token comment"># --java_out 指定输出 java 格式文件，输出到 ./java 目录</span>
<span class="token comment"># ./resources/addressbook.proto 为 proto 文件位置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成后可以看到生产的类文件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./
├── java
│   └── com
│       └── wdbyte
│           └── tool
│               ├── protos
│               │   ├── AddressBook.java
│               │   ├── AddressBookOrBuilder.java
│               │   ├── AddressBookProtos.java
│               │   ├── Person.java
│               │   ├── PersonOrBuilder.java
└── resources
    ├── addressbook.proto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-protobuf" tabindex="-1"><a class="header-anchor" href="#使用-protobuf" aria-hidden="true">#</a> 使用 Protobuf</h2><p>使用 Java 语言操作 Protobuf，首先需要引入 Protobuf 依赖。Maven 依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.protobuf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>protobuf-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.22.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造消息对象" tabindex="-1"><a class="header-anchor" href="#构造消息对象" aria-hidden="true">#</a> 构造消息对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 直接构建</span>
<span class="token class-name">PhoneNumber</span> phoneNumber1 <span class="token operator">=</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">&quot;18388888888&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PhoneType</span><span class="token punctuation">.</span><span class="token constant">HOME</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;www.wdbyte.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;xxx@wdbyte.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPhones</span><span class="token punctuation">(</span>phoneNumber1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">AddressBook</span> addressBook1 <span class="token operator">=</span> <span class="token class-name">AddressBook</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPeople</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addressBook1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  链式构建</span>
<span class="token class-name">AddressBook</span> addressBook2 <span class="token operator">=</span> <span class="token class-name">AddressBook</span>
    <span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addPeople</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;www.wdbyte.com&quot;</span><span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;yyy@126.com&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">addPhones</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                          <span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">&quot;18388888888&quot;</span><span class="token punctuation">)</span>
                                          <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PhoneType</span><span class="token punctuation">.</span><span class="token constant">HOME</span><span class="token punctuation">)</span>
                    <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addressBook2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>people <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token number">1</span>
  name<span class="token operator">:</span> <span class="token string">&quot;www.wdbyte.com&quot;</span>
  email<span class="token operator">:</span> <span class="token string">&quot;xxx@wdbyte.com&quot;</span>
  phones <span class="token punctuation">{</span>
    number<span class="token operator">:</span> <span class="token string">&quot;18388888888&quot;</span>
    type<span class="token operator">:</span> <span class="token constant">HOME</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
people <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token number">2</span>
  name<span class="token operator">:</span> <span class="token string">&quot;www.wdbyte.com&quot;</span>
  email<span class="token operator">:</span> <span class="token string">&quot;yyy@126.com&quot;</span>
  phones <span class="token punctuation">{</span>
    number<span class="token operator">:</span> <span class="token string">&quot;18388888888&quot;</span>
    type<span class="token operator">:</span> <span class="token constant">HOME</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化、反序列化" tabindex="-1"><a class="header-anchor" href="#序列化、反序列化" aria-hidden="true">#</a> 序列化、反序列化</h3><p>序列化：将内存中的数据对象序列化为二进制数据，可以用于网络传输或存储等场景。</p><p>反序列化：将二进制数据反序列化成内存中的数据对象，可以用于数据处理和业务逻辑。</p><p>下面演示使用 Protobuf 进行字符数组和文件的序列化及反序列化过程。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtobufTest2</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">PhoneNumber</span> phoneNumber1 <span class="token operator">=</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">&quot;18388888888&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PhoneType</span><span class="token punctuation">.</span><span class="token constant">HOME</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;www.wdbyte.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;xxx@wdbyte.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPhones</span><span class="token punctuation">(</span>phoneNumber1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AddressBook</span> addressBook1 <span class="token operator">=</span> <span class="token class-name">AddressBook</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPeople</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
        <span class="token comment">// 序列化成字节数组</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> addressBook1<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 反序列化 - 字节数组转对象</span>
        <span class="token class-name">AddressBook</span> addressBook2 <span class="token operator">=</span> <span class="token class-name">AddressBook</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;字节数组反序列化：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addressBook2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 序列化到文件</span>
        addressBook1<span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;AddressBook1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 读取文件反序列化</span>
        <span class="token class-name">AddressBook</span> addressBook3 <span class="token operator">=</span> <span class="token class-name">AddressBook</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;AddressBook1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件读取反序列化：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addressBook3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 字节数组反序列化：</span>
people <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token number">1</span>
  name<span class="token operator">:</span> <span class="token string">&quot;www.wdbyte.com&quot;</span>
  email<span class="token operator">:</span> <span class="token string">&quot;xxx@wdbyte.com&quot;</span>
  phones <span class="token punctuation">{</span>
    number<span class="token operator">:</span> <span class="token string">&quot;18388888888&quot;</span>
    type<span class="token operator">:</span> <span class="token constant">HOME</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 文件读取反序列化：</span>
people <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token number">1</span>
  name<span class="token operator">:</span> <span class="token string">&quot;www.wdbyte.com&quot;</span>
  email<span class="token operator">:</span> <span class="token string">&quot;xxx@wdbyte.com&quot;</span>
  phones <span class="token punctuation">{</span>
    number<span class="token operator">:</span> <span class="token string">&quot;18388888888&quot;</span>
    type<span class="token operator">:</span> <span class="token constant">HOME</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="protobuf-为什么高效" tabindex="-1"><a class="header-anchor" href="#protobuf-为什么高效" aria-hidden="true">#</a> Protobuf 为什么高效</h2><p>在分析 Protobuf 高效之前，我们先确认一下 Protobuf 是否真的高效，下面将 Protobuf 与 JSON 进行对比，分别对比序列化和反序列化速度以及序列化后的存储占用大小。</p><p>测试工具：JMH，FastJSON，</p><p>测试对象：Protobuf 的 <code>addressbook.proto</code>，JSON 的普通 Java 类。</p><p>Maven 依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jmh-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jmh-generator-annprocess<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先编写与<code>addressbook.proto</code> 结构相同的 Java 类 <code>AddressBookJava.java</code>.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressBookJava</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PersonJava</span><span class="token punctuation">&gt;</span></span> personJavaList<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PersonJava</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">PhoneNumberJava</span> phones<span class="token punctuation">;</span>
        <span class="token comment">// get...set...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PhoneNumberJava</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">PhoneTypeJava</span> phoneTypeJava<span class="token punctuation">;</span>
        <span class="token comment">// get....set....</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PhoneTypeJava</span> <span class="token punctuation">{</span>
        <span class="token constant">MOBILE</span><span class="token punctuation">,</span> <span class="token constant">HOME</span><span class="token punctuation">,</span> <span class="token constant">WORK</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PersonJava</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPersonJavaList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> personJavaList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPersonJavaList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PersonJava</span><span class="token punctuation">&gt;</span></span> personJavaList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>personJavaList <span class="token operator">=</span> personJavaList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化大小对比" tabindex="-1"><a class="header-anchor" href="#序列化大小对比" aria-hidden="true">#</a> 序列化大小对比</h3><p>分别在地址簿中添加 1000 个人员信息，输出序列化后的数组大小。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">AddressBook</span><span class="token punctuation">.</span><span class="token class-name">Builder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">AddressBookJava</span><span class="token punctuation">.</span><span class="token class-name">PersonJava</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">AddressBookJava</span><span class="token punctuation">.</span><span class="token class-name">PhoneNumberJava</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">AddressBookJava</span><span class="token punctuation">.</span><span class="token class-name">PhoneTypeJava</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token class-name">PhoneNumber</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token class-name">PhoneType</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtobufTest3</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">AddressBookJava</span> addressBookJava <span class="token operator">=</span> <span class="token function">createAddressBookJava</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>addressBookJava<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;json string size:&quot;</span> <span class="token operator">+</span> jsonString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">AddressBook</span> addressBook <span class="token operator">=</span> <span class="token function">createAddressBook</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> addressBookByteArray <span class="token operator">=</span> addressBook<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;protobuf byte array size:&quot;</span> <span class="token operator">+</span> addressBookByteArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AddressBook</span> <span class="token function">createAddressBook</span><span class="token punctuation">(</span><span class="token keyword">int</span> personCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Builder</span> builder <span class="token operator">=</span> <span class="token class-name">AddressBook</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> personCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">addPeople</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;www.wdbyte.com&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;xxx@126.com&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPhones</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">&quot;18333333333&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PhoneType</span><span class="token punctuation">.</span><span class="token constant">HOME</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AddressBookJava</span> <span class="token function">createAddressBookJava</span><span class="token punctuation">(</span><span class="token keyword">int</span> personCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AddressBookJava</span> addressBookJava <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddressBookJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addressBookJava<span class="token punctuation">.</span><span class="token function">setPersonJavaList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> personCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">PersonJava</span> personJava <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            personJava<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            personJava<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;www.wdbyte.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            personJava<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;xxx@126.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">PhoneNumberJava</span> numberJava <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneNumberJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            numberJava<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">&quot;18333333333&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            numberJava<span class="token punctuation">.</span><span class="token function">setPhoneTypeJava</span><span class="token punctuation">(</span><span class="token class-name">PhoneTypeJava</span><span class="token punctuation">.</span><span class="token constant">HOME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            personJava<span class="token punctuation">.</span><span class="token function">setPhones</span><span class="token punctuation">(</span>numberJava<span class="token punctuation">)</span><span class="token punctuation">;</span>
            addressBookJava<span class="token punctuation">.</span><span class="token function">getPersonJavaList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>personJava<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> addressBookJava<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>json string size<span class="token operator">:</span><span class="token number">108910</span>
protobuf <span class="token keyword">byte</span> array size<span class="token operator">:</span><span class="token number">50872</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可见测试中 Protobuf 的序列化结果只有 JSON 的一半左右。</p><h3 id="序列化速度对比" tabindex="-1"><a class="header-anchor" href="#序列化速度对比" aria-hidden="true">#</a> 序列化速度对比</h3><p>使用 JMH 进行性能测试，分别测试 JSON 的序列化和反序列以及 Protobuf 的序列化和反序列化性能情况。每次测试前进行 3 次预热，每次 3 秒。接着进行 5 次测试，每次 3 秒，收集测试情况。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span></span><span class="token class-name">InvalidProtocolBufferException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">AddressBook</span><span class="token punctuation">.</span><span class="token class-name">Builder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">AddressBookJava</span><span class="token punctuation">.</span><span class="token class-name">PersonJava</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">AddressBookJava</span><span class="token punctuation">.</span><span class="token class-name">PhoneNumberJava</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">AddressBookJava</span><span class="token punctuation">.</span><span class="token class-name">PhoneTypeJava</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token class-name">PhoneNumber</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>wdbyte<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>protos<span class="token punctuation">.</span></span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token class-name">PhoneType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Benchmark</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">BenchmarkMode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Fork</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Measurement</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Mode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">OutputTimeUnit</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Scope</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Setup</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">State</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Warmup</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>Throughput</span><span class="token punctuation">)</span> <span class="token comment">// Throughput:吞吐量，SampleTime：采样时间</span>
<span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProtobufTest4</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AddressBookJava</span> addressBookJava<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">AddressBook</span> addressBook<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Setup</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        addressBookJava <span class="token operator">=</span> <span class="token function">createAddressBookJava</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addressBook <span class="token operator">=</span> <span class="token function">createAddressBook</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token class-name">AddressBookJava</span> <span class="token function">testJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 转 JSON</span>
        <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>addressBookJava<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// JSON 转对象</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">AddressBookJava</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token class-name">AddressBook</span> <span class="token function">testProtobuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InvalidProtocolBufferException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 转 JSON</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> addressBookByteArray <span class="token operator">=</span> addressBook<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// JSON 转对象</span>
        <span class="token keyword">return</span> <span class="token class-name">AddressBook</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>addressBookByteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AddressBook</span> <span class="token function">createAddressBook</span><span class="token punctuation">(</span><span class="token keyword">int</span> personCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Builder</span> builder <span class="token operator">=</span> <span class="token class-name">AddressBook</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> personCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">addPeople</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;www.wdbyte.com&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;xxx@126.com&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPhones</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">&quot;18333333333&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">PhoneType</span><span class="token punctuation">.</span><span class="token constant">HOME</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AddressBookJava</span> <span class="token function">createAddressBookJava</span><span class="token punctuation">(</span><span class="token keyword">int</span> personCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AddressBookJava</span> addressBookJava <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddressBookJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        addressBookJava<span class="token punctuation">.</span><span class="token function">setPersonJavaList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> personCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">PersonJava</span> personJava <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            personJava<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            personJava<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;www.wdbyte.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            personJava<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;xxx@126.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">PhoneNumberJava</span> numberJava <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneNumberJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            numberJava<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token string">&quot;18333333333&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            numberJava<span class="token punctuation">.</span><span class="token function">setPhoneTypeJava</span><span class="token punctuation">(</span><span class="token class-name">PhoneTypeJava</span><span class="token punctuation">.</span><span class="token constant">HOME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            personJava<span class="token punctuation">.</span><span class="token function">setPhones</span><span class="token punctuation">(</span>numberJava<span class="token punctuation">)</span><span class="token punctuation">;</span>
            addressBookJava<span class="token punctuation">.</span><span class="token function">getPersonJavaList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>personJava<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> addressBookJava<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JMH 吞吐量测试结果（Score 值越大吞吐量越高，性能越好）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Benchmark</span>                    <span class="token class-name">Mode</span>  <span class="token class-name">Cnt</span>  <span class="token class-name">Score</span>   <span class="token class-name">Error</span>   <span class="token class-name">Units</span>
<span class="token class-name">ProtobufTest3</span><span class="token punctuation">.</span>testJSON      thrpt   <span class="token number">10</span>  <span class="token number">1.877</span> ± <span class="token number">0.287</span>  ops<span class="token operator">/</span>ms
<span class="token class-name">ProtobufTest3</span><span class="token punctuation">.</span>testProtobuf  thrpt   <span class="token number">10</span>  <span class="token number">2.813</span> ± <span class="token number">0.446</span>  ops<span class="token operator">/</span>ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JMH 采样时间测试结果（Score 越小，采样时间越小，性能越好）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Benchmark</span>                                          <span class="token class-name">Mode</span>    <span class="token class-name">Cnt</span>   <span class="token class-name">Score</span>   <span class="token class-name">Error</span>  <span class="token class-name">Units</span>
<span class="token class-name">ProtobufTest3</span><span class="token punctuation">.</span>testJSON                           sample  <span class="token number">53028</span>   <span class="token number">0.565</span> ± <span class="token number">0.005</span>  ms<span class="token operator">/</span>op
<span class="token class-name">ProtobufTest3</span><span class="token punctuation">.</span>testProtobuf                       sample  <span class="token number">90413</span>   <span class="token number">0.332</span> ± <span class="token number">0.001</span>  ms<span class="token operator">/</span>op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从测试结果看，不管是吞吐量测试，还是采样时间测试，Protobuf 都优于 JSON。</p><h3 id="为什么高效" tabindex="-1"><a class="header-anchor" href="#为什么高效" aria-hidden="true">#</a> 为什么高效？</h3><p>Protobuf 是如何实现这种高效紧凑的数据编码和解码的呢？</p><p>首先，Protobuf 使用二进制编码，会提高性能；其次 Protobuf 在将数据转换成二进制时，会对字段和类型重新编码，减少空间占用。它采用 <code>TLV</code> 格式来存储编码后的数据。<code>TLV</code> 也是就是 Tag-Length-Value ，是一种常见的编码方式，因为数据其实都是键值对形式，所以在 <code>TAG</code> 中会存储对应的字段和类型信息，<code>Length</code> 存储内容的长度，<code>Value</code> 存储具体的内容。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_jpg/4lfok2icUkibTvB5v6uBDUaom2VOkdxu9A39vzB9ibsJMricNjGF86ryGo328Lb5otDxGC9HwADYxKzxUsBYCH9qIQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>还记得上面定义结构体时每个字段都对应一个数字吗？如 <code>=1</code>,<code>=2</code>,<code>=3</code>.</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf"><pre class="language-protobuf"><code><span class="token keyword">message</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">optional</span> <span class="token builtin">int32</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">optional</span> <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">optional</span> <span class="token builtin">string</span> email <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在序列化成二进制时候就是通过这个数字来标记对应的字段的，二进制中只存储这个数字，反序列化时通过这个数字找对应的字段。这也是上面为什么说尽量使用 1-15 范围内的数字，因为一旦超过 15，就需要多一个 bit 位来存储。</p><p>那么类型信息呢？比如 <code>int32</code> 怎么标记，因为类型个数有限，所以 Protobuf 规定了每个类型对应的二进制编码，比如 <code>int32</code> 对应二进制 <code>000</code>，<code>string</code> 对应二进制 <code>010</code>，这样就可以只用三个比特位存储类型信息。</p>`,48),b=n("p",null,"这里只是举例描述大概思想，具体还有一些变化。",-1),g={href:"https://protobuf.dev/programming-guides/encoding/",target:"_blank",rel:"noopener noreferrer"},f=t('<p>其次，Protobuf 还会采用一种变长编码的方式来存储数据。这种编码方式能够保证数据占用的空间最小化，从而减少了数据传输和存储的开销。具体来说，Protobuf 会将整数和浮点数等类型变换成一个或多个字节的形式，其中每个字节都包含了一部分数据信息和一部分标识符信息。这种编码方式可以在数据值比较小的情况下，只使用一个字节来存储数据，以此来提高编码效率。</p><p>最后，Protobuf 还可以通过采用压缩算法来减少数据传输的大小。比如 GZIP 算法能够将原始数据压缩成更小的二进制格式，从而在网络传输中能够节省带宽和传输时间。Protobuf 还提供了一些可选的压缩算法，如 zlib 和 snappy，这些算法在不同的场景下能够适应不同的压缩需求。</p><p>综上所述，Protobuf 在实现高效编码和解码的过程中，采用了多种优化方式，从而在实际应用中能够有效地提升数据传输和处理的效率。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>ProtoBuf 是一种轻量、高效的数据交换格式，它具有以下优点：</p><ul><li>语言中立，可以支持多种编程语言；</li><li>数据结构清晰，易于维护和扩展；</li><li>二进制编码，数据体积小，传输效率高；</li><li>自动生成代码，开发效率高。</li></ul><p>但是，ProtoBuf 也存在以下缺点：</p><ul><li>学习成本较高，需要掌握其语法规则和使用方法；</li><li>需要先定义数据结构，然后才能对数据进行序列化和反序列化，增加了一定的开发成本；</li><li>由于二进制编码，可读性较差，这点不如 JSON 可以直接阅读。</li></ul><p>总体来说，Protobuf 适合用于数据传输和存储等场景，能够提高数据传输效率和减少数据体积。但对于需要人类可读的数据，或需要实时修改的数据，或者对数据的传输效率和体积没那么在意的场景，选择更加通用的 JSON 未尝不是一个好的选择。</p>',9),y={href:"https://protobuf.dev/overview/",target:"_blank",rel:"noopener noreferrer"};function w(h,P){const a=e("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("GitHub："),n("a",k,[s("https://github.com/protocolbuffers/protobuf"),p(a)])]),n("p",null,[s("官方文档："),n("a",r,[s("https://protobuf.dev/overview/"),p(a)])]),d,n("p",null,[s("下载编译器："),n("a",m,[s("https://github.com/protocolbuffers/protobuf/releases/latest"),p(a)])]),v,n("blockquote",null,[b,n("p",null,[s("详情可以参考官方文档："),n("a",g,[s("https://protobuf.dev/programming-guides/encoding/"),p(a)])])]),f,n("p",null,[s("参考："),n("a",y,[s("https://protobuf.dev/overview/"),p(a)])])])}const x=o(i,[["render",w],["__file","20.数据传输Protobuf.html.vue"]]);export{x as default};
