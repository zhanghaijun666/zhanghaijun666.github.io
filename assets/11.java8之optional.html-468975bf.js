import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,e as u,a as n,d as a,w as t,f as i,b as e}from"./app-d6438571.js";const k={},r=n("p",null,"主要用处：防止空指针（NPE）、简化if...else...判断、减少代码的复杂度",-1),d={class:"table-of-contents"},v=i(`<h2 id="常用方法举例" tabindex="-1"><a class="header-anchor" href="#常用方法举例" aria-hidden="true">#</a> 常用方法举例</h2><h3 id="_1-创建空的optional-empty" tabindex="-1"><a class="header-anchor" href="#_1-创建空的optional-empty" aria-hidden="true">#</a> 1. 创建空的Optional：<code>empty()</code></h3><p>常见用法：业务不满足某条件时，返回空的Optional</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getManUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Sex</span><span class="token punctuation">.</span><span class="token constant">MAN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果性别是男，直接返回空</span>
        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-创建非空的optional-of" tabindex="-1"><a class="header-anchor" href="#_2-创建非空的optional-of" aria-hidden="true">#</a> 2. 创建非空的Optional：<code>of()</code></h3><p>常见用法：组装一个非空的Optional便于后续业务处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果成年了，则返回</span>
        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-创建需要判空的optional-ofnullable" tabindex="-1"><a class="header-anchor" href="#_3-创建需要判空的optional-ofnullable" aria-hidden="true">#</a> 3. 创建需要判空的Optional：<code>ofNullable()</code></h3><p>常见用法：从数据库或接口获取一个对象后，不知道是不是空，需要进行判断</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUserFromUserCenter</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userOpt <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-判断optional中对象是否是null-ispresent" tabindex="-1"><a class="header-anchor" href="#_4-判断optional中对象是否是null-ispresent" aria-hidden="true">#</a> 4. 判断Optional中对象是否是NULL：<code>isPresent()</code></h3><p>常见用法：判空后进行业务处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>userOpt<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回true，说明user不为NULL，则对其中的user对象进行处理</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回false，说明user为NULL</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用户不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-非空表达式if-ifpresent" tabindex="-1"><a class="header-anchor" href="#_5-非空表达式if-ifpresent" aria-hidden="true">#</a> 5. 非空表达式if：<code>ifPresent()</code></h3><p>常见用法：代替if(xxx != null){}，判断非空之后进行逻辑处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 接3中例子</span>
<span class="token comment">// 如果user存在，则打印出名字</span>
userOpt<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-非空表达式if-else-java9-ifpresentorelse" tabindex="-1"><a class="header-anchor" href="#_6-非空表达式if-else-java9-ifpresentorelse" aria-hidden="true">#</a> 6. 非空表达式if else（JAVA9） ：<code>ifPresentOrElse()</code></h3><p>常见用法：代替if(xxx != null){} else {}，对空和非空分别进行逻辑处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 如果user存在，则打印出名字, 否则提示不存在，相当于4中代码的改造</span>
userOpt<span class="token punctuation">.</span><span class="token function">ifPresentOrElse</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用户不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-设置默认值-orelse" tabindex="-1"><a class="header-anchor" href="#_7-设置默认值-orelse" aria-hidden="true">#</a> 7. 设置默认值：<code>orElse()</code></h3><p>常见用法：当对象为NULL时，需要指定一个默认值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 如果user为NULL，则给new一个User</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-设置默认值-orelseget" tabindex="-1"><a class="header-anchor" href="#_8-设置默认值-orelseget" aria-hidden="true">#</a> 8. 设置默认值：<code>orElseGet()</code></h3><p>常见用法：当对象为NULL时，需要指定一个默认值，与orElseGet()的区别是，如果Optional中对象不为Null，则不会执行orElseGet()中的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 如果user为NULL，则从getDefaultUser中获取一个User</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token class-name">UserUtil</span><span class="token operator">::</span><span class="token function">getDefaultUser</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 以下是orElse()和orElseGet()的对比</span>
<span class="token comment">// 如果user为null，则两者都会执行UserUtil.getDefaultUser()方法</span>
<span class="token comment">// 如果user不为null，则orElse会执行UserUtil.getDefaultUser()方法，orElseGet不会</span>
<span class="token comment">// 所以某些情况下orElseGet性能更好</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token class-name">UserUtil</span><span class="token punctuation">.</span><span class="token function">getDefaultUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token class-name">UserUtil</span><span class="token operator">::</span><span class="token function">getDefaultUser</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-过滤值-filter" tabindex="-1"><a class="header-anchor" href="#_9-过滤值-filter" aria-hidden="true">#</a> 9. 过滤值：<code>filter()</code></h3><p>常见用法：需要对Optional中的对象进行过滤</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 判断user的年龄是否大于18岁</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userOpt <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userOpt<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-转换值-map" tabindex="-1"><a class="header-anchor" href="#_10-转换值-map" aria-hidden="true">#</a> 10. 转换值：<code>map()</code></h3><p>常见用法：将原始的Optional对象转换为新的Optional对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 将Optional&lt;User&gt;转换为Optional&lt;Developer&gt;</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Developer</span><span class="token punctuation">&gt;</span></span> devOpt <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Developer</span> dev <span class="token operator">=</span> net <span class="token class-name">Developer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dev<span class="token punctuation">.</span><span class="token function">setDevName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dev<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实战改造" tabindex="-1"><a class="header-anchor" href="#实战改造" aria-hidden="true">#</a> 实战改造</h2><h3 id="_1-解决checkstyle问题" tabindex="-1"><a class="header-anchor" href="#_1-解决checkstyle问题" aria-hidden="true">#</a> 1. 解决<code>checkStyle</code>问题</h3><p>开发过程中经常会碰到这种问题，可以使用Optional简化</p><p>原代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BaseMasterSlaveServersConfig</span> smssc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseMasterSlaveServersConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>clientName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    smssc<span class="token punctuation">.</span><span class="token function">setClientName</span><span class="token punctuation">(</span>clientName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>idleConnectionTimeout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    smssc<span class="token punctuation">.</span><span class="token function">setIdleConnectionTimeout</span><span class="token punctuation">(</span>idleConnectionTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>connectTimeout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    smssc<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>connectTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    smssc<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>retryAttempts <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    smssc<span class="token punctuation">.</span><span class="token function">setRetryAttempts</span><span class="token punctuation">(</span>retryAttempts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>retryInterval <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    smssc<span class="token punctuation">.</span><span class="token function">setRetryInterval</span><span class="token punctuation">(</span>retryInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>reconnectionTimeout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    smssc<span class="token punctuation">.</span><span class="token function">setReconnectionTimeout</span><span class="token punctuation">(</span>reconnectionTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    smssc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>failedAttempts <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    smssc<span class="token punctuation">.</span><span class="token function">setFailedAttempts</span><span class="token punctuation">(</span>failedAttempts<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ...后面还有很多这种判断，一个if就是一个分支，会增长圈复杂度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改造后：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>clientName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>smssc<span class="token operator">::</span><span class="token function">setClientName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>idleConnectionTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>smssc<span class="token operator">::</span><span class="token function">setIdleConnectionTimeout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>connectTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>smssc<span class="token operator">::</span><span class="token function">setConnectTimeout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>smssc<span class="token operator">::</span><span class="token function">setTimeout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>retryAttempts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>smssc<span class="token operator">::</span><span class="token function">setRetryAttempts</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>retryInterval<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>smssc<span class="token operator">::</span><span class="token function">setRetryInterval</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>reconnectionTimeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>smssc<span class="token operator">::</span><span class="token function">setReconnectionTimeout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...缩减为一行，不但减少了圈复杂度，而且减少了行数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-简化if-else" tabindex="-1"><a class="header-anchor" href="#_2-简化if-else" aria-hidden="true">#</a> 2. 简化if...else</h3><p>原代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取用户，找不到则新增，找到则改变用户状态</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    user<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改造后：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 把新增用户和更新用户的方法提出来，可读性更高</span>
<span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userDao<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresentOrElse</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user <span class="token operator">-&gt;</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 保存用户</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 更新用户</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
    user<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43);function m(f,b){const s=o("router-link");return c(),l("div",null,[r,u(" more "),n("nav",d,[n("ul",null,[n("li",null,[a(s,{to:"#常用方法举例"},{default:t(()=>[e("常用方法举例")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_1-创建空的optional-empty"},{default:t(()=>[e("1. 创建空的Optional：empty()")]),_:1})]),n("li",null,[a(s,{to:"#_2-创建非空的optional-of"},{default:t(()=>[e("2. 创建非空的Optional：of()")]),_:1})]),n("li",null,[a(s,{to:"#_3-创建需要判空的optional-ofnullable"},{default:t(()=>[e("3. 创建需要判空的Optional：ofNullable()")]),_:1})]),n("li",null,[a(s,{to:"#_4-判断optional中对象是否是null-ispresent"},{default:t(()=>[e("4. 判断Optional中对象是否是NULL：isPresent()")]),_:1})]),n("li",null,[a(s,{to:"#_5-非空表达式if-ifpresent"},{default:t(()=>[e("5. 非空表达式if：ifPresent()")]),_:1})]),n("li",null,[a(s,{to:"#_6-非空表达式if-else-java9-ifpresentorelse"},{default:t(()=>[e("6. 非空表达式if else（JAVA9） ：ifPresentOrElse()")]),_:1})]),n("li",null,[a(s,{to:"#_7-设置默认值-orelse"},{default:t(()=>[e("7. 设置默认值：orElse()")]),_:1})]),n("li",null,[a(s,{to:"#_8-设置默认值-orelseget"},{default:t(()=>[e("8. 设置默认值：orElseGet()")]),_:1})]),n("li",null,[a(s,{to:"#_9-过滤值-filter"},{default:t(()=>[e("9. 过滤值：filter()")]),_:1})]),n("li",null,[a(s,{to:"#_10-转换值-map"},{default:t(()=>[e("10. 转换值：map()")]),_:1})])])]),n("li",null,[a(s,{to:"#实战改造"},{default:t(()=>[e("实战改造")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_1-解决checkstyle问题"},{default:t(()=>[e("1. 解决checkStyle问题")]),_:1})]),n("li",null,[a(s,{to:"#_2-简化if-else"},{default:t(()=>[e("2. 简化if...else")]),_:1})])])])])]),v])}const _=p(k,[["render",m],["__file","11.java8之optional.html.vue"]]);export{_ as default};
