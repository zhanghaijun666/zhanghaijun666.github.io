const e=JSON.parse('{"key":"v-bde06bd8","path":"/62.%E9%9B%86%E6%88%90%E9%85%8D%E7%BD%AE/20.%E7%BC%93%E5%AD%98Reids/22.%E9%9B%AA%E5%B4%A9%E3%80%81%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF.html","title":"雪崩、穿透、击穿","lang":"zh-CN","frontmatter":{"title":"雪崩、穿透、击穿","date":"2023-05-13T00:00:00.000Z","category":["集成配置","缓存Reids"],"tag":["缓存Reids"],"description":"1. 缓存雪崩 对于系统 A，假设每天高峰期每秒 5000 个请求，本来缓存在高峰期可以扛住每秒 4000 个请求，但是缓存机器意外发生了全盘宕机。缓存挂了，此时 1 秒 5000 个请求全部落数据库，数据库必然扛不住，它会报一下警，然后就挂了。此时，如果没有采用什么特别的方案来处理这个故障，DBA 很着急，重启数据库，但是数据库立马又被新的流量给打死了。这就是缓存雪崩。 缓存雪崩的事前事中事后的解决方案如下： 事前：redis 高可用，主从+哨兵，redis cluster，避免全盘崩溃。 事中：本地 ehcache 缓存 + hystrix 限流&amp;降级，避免 MySQL 被打死。 事后：redis 持久化，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。","head":[["meta",{"property":"og:url","content":"https://haijunit.top/62.%E9%9B%86%E6%88%90%E9%85%8D%E7%BD%AE/20.%E7%BC%93%E5%AD%98Reids/22.%E9%9B%AA%E5%B4%A9%E3%80%81%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"雪崩、穿透、击穿"}],["meta",{"property":"og:description","content":"1. 缓存雪崩 对于系统 A，假设每天高峰期每秒 5000 个请求，本来缓存在高峰期可以扛住每秒 4000 个请求，但是缓存机器意外发生了全盘宕机。缓存挂了，此时 1 秒 5000 个请求全部落数据库，数据库必然扛不住，它会报一下警，然后就挂了。此时，如果没有采用什么特别的方案来处理这个故障，DBA 很着急，重启数据库，但是数据库立马又被新的流量给打死了。这就是缓存雪崩。 缓存雪崩的事前事中事后的解决方案如下： 事前：redis 高可用，主从+哨兵，redis cluster，避免全盘崩溃。 事中：本地 ehcache 缓存 + hystrix 限流&amp;降级，避免 MySQL 被打死。 事后：redis 持久化，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-23T07:13:54.000Z"}],["meta",{"property":"article:author","content":"知识库"}],["meta",{"property":"article:tag","content":"缓存Reids"}],["meta",{"property":"article:published_time","content":"2023-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-23T07:13:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"雪崩、穿透、击穿\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-23T07:13:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"知识库\\",\\"url\\":\\"https://haijunit.top\\",\\"email\\":\\"zhanghaijun_java@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 缓存雪崩","slug":"_1-缓存雪崩","link":"#_1-缓存雪崩","children":[]},{"level":2,"title":"2. 缓存穿透","slug":"_2-缓存穿透","link":"#_2-缓存穿透","children":[]},{"level":2,"title":"3. 缓存击穿","slug":"_3-缓存击穿","link":"#_3-缓存击穿","children":[]}],"git":{"createdTime":1684826034000,"updatedTime":1684826034000,"contributors":[{"name":"zhanghaijun","email":"zhanghaijun@bjtxra.com","commits":1}]},"readingTime":{"minutes":2.99,"words":897},"filePathRelative":"62.集成配置/20.缓存Reids/22.雪崩、穿透、击穿.md","localizedDate":"2023年5月13日","excerpt":"<h2> 1. 缓存雪崩</h2>\\n<blockquote>\\n<p>对于系统 A，假设每天高峰期每秒 5000 个请求，本来缓存在高峰期可以扛住每秒 4000 个请求，但是缓存机器意外发生了全盘宕机。缓存挂了，此时 1 秒 5000 个请求全部落数据库，数据库必然扛不住，它会报一下警，然后就挂了。此时，如果没有采用什么特别的方案来处理这个故障，DBA 很着急，重启数据库，但是数据库立马又被新的流量给打死了。这就是缓存雪崩。</p>\\n</blockquote>\\n<p>缓存雪崩的事前事中事后的解决方案如下：</p>\\n<ul>\\n<li>事前：redis 高可用，主从+哨兵，redis cluster，避免全盘崩溃。</li>\\n<li>事中：本地 ehcache 缓存 + hystrix 限流&amp;降级，避免 MySQL 被打死。</li>\\n<li>事后：redis 持久化，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。</li>\\n</ul>","autoDesc":true}');export{e as data};
