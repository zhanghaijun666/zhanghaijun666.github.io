import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,e as k,a as n,d as p,w as e,b as s,f as r}from"./app-d6438571.js";const i={},u=n("p",null,"理想中树形结构应该具备如下特征：",-1),d=n("ol",null,[n("li",null,"数据存储冗余度⼩、直观性强；"),n("li",null,"检索遍历过程简单⾼效；"),n("li",null,"节点增删改查 CRUD 操作⾼效")],-1),m={class:"table-of-contents"},y=n("h2",{id:"继承关系驱动的-schema-设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#继承关系驱动的-schema-设计","aria-hidden":"true"},"#"),s(" 继承关系驱动的 Schema 设计")],-1),w=n("blockquote",{"Node_id,Parent_id":""},[n("p",null,"结构通常设计为：")],-1),v=r(`<div style="display:flex;max-height:260px;"><img src="https://blog.yoyoyo.me/usr/uploads/2019/08/1181538684.gif" style="margin:10px;flex-grow:1;"><img src="https://blog.yoyoyo.me/usr/uploads/2019/08/812707275.gif" style="margin:10px;flex-grow:1;"></div><p><strong>优点</strong>：设计和实现⾃然⽽然，⾮常直观和⽅便。<br><br><strong>缺点</strong>：频繁递归对 Tree 得 CURD 操作，IO 开销大，性能低。在 Tree 规模相对较⼩的情况下，可以借助于缓存机制来做优化。</p><h2 id="基于左右值编码的-schema-设计" tabindex="-1"><a class="header-anchor" href="#基于左右值编码的-schema-设计" aria-hidden="true">#</a> 基于左右值编码的 Schema 设计</h2><div style="display:flex;"><img src="https://blog.yoyoyo.me/usr/uploads/2019/08/1030988837.gif" style="margin:10px;flex-grow:1;"><img src="https://blog.yoyoyo.me/usr/uploads/2019/08/826477184.gif" style="margin:10px;flex-grow:1;"></div><p><strong>设计</strong>：左节点永远小于右节点的值。<br><br><strong>优点</strong>：消除递归操作，查询条件是基于整形数字的⽐较，效率很⾼。<br><br><strong>缺点</strong>：节点的添加、删除及修改代价较⼤，将会涉及到表中多⽅⾯数据的改动。</p><h4 id="创建表和插入数据" tabindex="-1"><a class="header-anchor" href="#创建表和插入数据" aria-hidden="true">#</a> 创建表和插入数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>tree<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
 <span class="token identifier"><span class="token punctuation">\`</span>node_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
 <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
 <span class="token identifier"><span class="token punctuation">\`</span>lft<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
 <span class="token identifier"><span class="token punctuation">\`</span>rgt<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>node_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8<span class="token punctuation">;</span>

<span class="token comment">-- 插⼊数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>tree<span class="token punctuation">\`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Food&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;Fruit&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;Red&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;Cherry&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;Yellow&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;Banana&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;Meat&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&#39;Beef&#39;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&#39;Pork&#39;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 获取某节点的⼦节点</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tree <span class="token keyword">WHERE</span> lft <span class="token operator">BETWEEN</span> <span class="token number">2</span> <span class="token operator">AND</span> <span class="token number">11</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> lft <span class="token keyword">ASC</span><span class="token punctuation">;</span>
<span class="token comment">-- 获取某节点的⼦孙节点总数= (右值 – 左值– 1) / 2</span>
<span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token number">11</span> – <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="节点在树中所处的层次" tabindex="-1"><a class="header-anchor" href="#节点在树中所处的层次" aria-hidden="true">#</a> 节点在树中所处的层次</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 节点在树中所处的层次</span>
<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> tree <span class="token keyword">WHERE</span> lft <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">AND</span> rgt <span class="token operator">&gt;=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token comment">-- ⾃定义函数来计算</span>
<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> <span class="token identifier"><span class="token punctuation">\`</span>CountLayer<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>p_node_id <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">RETURNS</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DETERMINISTIC</span>
<span class="token keyword">BEGIN</span> <span class="token keyword">declare</span> p_result<span class="token punctuation">,</span>p_lft<span class="token punctuation">,</span>p_rgt <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> tree <span class="token keyword">where</span> node_id<span class="token operator">=</span>p_node_id <span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">begin</span>
    <span class="token keyword">SELECT</span> lft<span class="token punctuation">,</span> rgt <span class="token keyword">INTO</span> <span class="token punctuation">(</span>p_lft<span class="token punctuation">,</span> p_rgt<span class="token punctuation">)</span> <span class="token keyword">FROM</span> tree <span class="token keyword">WHERE</span> node_id <span class="token operator">=</span> p_node_id<span class="token punctuation">;</span>
    <span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> p_result <span class="token keyword">FROM</span> tree <span class="token keyword">WHERE</span> lft <span class="token operator">&lt;=</span> p_lft <span class="token operator">AND</span> rgt <span class="token operator">&gt;=</span> p_rgt<span class="token punctuation">;</span>
    <span class="token keyword">end</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> p_result<span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
    <span class="token keyword">RETURN</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>
<span class="token comment">-- 执行函数查询</span>
<span class="token keyword">select</span> CountLayer<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取节点的子孙节点" tabindex="-1"><a class="header-anchor" href="#获取节点的子孙节点" aria-hidden="true">#</a> 获取节点的子孙节点</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 基于层次计算函数，我们创建⼀个视图，添加了新的记录节点层次的数列</span>
<span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> tree_view <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> node_id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> lft<span class="token punctuation">,</span> rgt <span class="token punctuation">,</span> CountLayer<span class="token punctuation">(</span>Node_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> layer <span class="token keyword">FROM</span> tree <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Lft
<span class="token comment">-- 创建存储过程，⽤于计算给定节点的所有⼦孙节点及相应的层次</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token identifier"><span class="token punctuation">\`</span>GetChildrenNodeList<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>p_node_id <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span> <span class="token keyword">declare</span> p_lft<span class="token punctuation">,</span>p_rgt <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> node_id <span class="token keyword">from</span> tree <span class="token keyword">where</span> node_id <span class="token operator">=</span> p_node_id<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">begin</span>
    <span class="token keyword">SELECT</span> lft<span class="token punctuation">,</span> rgt <span class="token keyword">INTO</span> <span class="token punctuation">(</span>p_lft<span class="token punctuation">,</span> p_rgt<span class="token punctuation">)</span> <span class="token keyword">FROM</span> tree <span class="token keyword">WHERE</span> node_id <span class="token operator">=</span> p_node_id<span class="token punctuation">;</span>
    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tree_view <span class="token keyword">WHERE</span> lft <span class="token operator">BETWEEN</span> p_lft <span class="token operator">AND</span> p_rgt <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> lft <span class="token keyword">ASC</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>
<span class="token comment">-- 执行存储过程</span>
<span class="token keyword">call</span> GetChildrenNodeList<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取某节点的父节点" tabindex="-1"><a class="header-anchor" href="#获取某节点的父节点" aria-hidden="true">#</a> 获取某节点的⽗节点</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 获取某节点的⽗节点</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tree <span class="token keyword">WHERE</span> lft <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">AND</span> rgt <span class="token operator">&gt;</span> <span class="token number">11</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> lft <span class="token keyword">ASC</span>
<span class="token comment">-- 存储过程</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token identifier"><span class="token punctuation">\`</span>GetParentNodePath<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>p_node_id <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span> <span class="token keyword">declare</span> p_lft<span class="token punctuation">,</span>p_rgt <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> node_id <span class="token keyword">from</span> tree <span class="token keyword">where</span> node_id <span class="token operator">=</span> p_node_id<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">begin</span>
    <span class="token keyword">SELECT</span> lft<span class="token punctuation">,</span> rgt <span class="token keyword">INTO</span> <span class="token punctuation">(</span>p_lft<span class="token punctuation">,</span> p_rgt<span class="token punctuation">)</span> <span class="token keyword">FROM</span> tree <span class="token keyword">WHERE</span> node_id <span class="token operator">=</span> p_node_id<span class="token punctuation">;</span>
    <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tree_view <span class="token keyword">WHERE</span> lft <span class="token operator">&lt;</span> p_lft <span class="token operator">AND</span> rgt <span class="token operator">&gt;</span> p_rgt <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> lft <span class="token keyword">ASC</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>
<span class="token comment">-- 执行存储过程</span>
<span class="token keyword">call</span> GetParentNodePath<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加子节点" tabindex="-1"><a class="header-anchor" href="#添加子节点" aria-hidden="true">#</a> 添加⼦节点</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 添加⼦节点</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token identifier"><span class="token punctuation">\`</span>AddSubNode<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span> p_node_id <span class="token keyword">int</span><span class="token punctuation">,</span> p_node_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span> <span class="token keyword">declare</span> p_rgt <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> node_id <span class="token keyword">from</span> tree <span class="token keyword">where</span> node_id <span class="token operator">=</span> p_node_id<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">begin</span> <span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>
    <span class="token keyword">SELECT</span> rgt <span class="token keyword">INTO</span> p_rgt <span class="token keyword">FROM</span> tree <span class="token keyword">WHERE</span> node_id <span class="token operator">=</span> p_node_id<span class="token punctuation">;</span>
    <span class="token keyword">UPDATE</span> tree <span class="token keyword">SET</span> rgt <span class="token operator">=</span> rgt <span class="token operator">+</span> <span class="token number">2</span> <span class="token keyword">WHERE</span> rgt <span class="token operator">&gt;=</span> p_rgt<span class="token punctuation">;</span>
    <span class="token keyword">UPDATE</span> tree <span class="token keyword">SET</span> lft <span class="token operator">=</span> lft <span class="token operator">+</span> <span class="token number">2</span> <span class="token keyword">WHERE</span> lft <span class="token operator">&gt;=</span> p_rgt<span class="token punctuation">;</span>
    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tree <span class="token punctuation">(</span>name<span class="token punctuation">,</span> lft<span class="token punctuation">,</span> rgt<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>p_node_name<span class="token punctuation">,</span> p_rgt<span class="token punctuation">,</span> p_rgt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>
<span class="token comment">-- 执行添加⼦节点</span>
<span class="token keyword">call</span> AddSubNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;Apple&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除某节点" tabindex="-1"><a class="header-anchor" href="#删除某节点" aria-hidden="true">#</a> 删除某节点</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 删除某节点</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token identifier"><span class="token punctuation">\`</span>DelNode<span class="token punctuation">\`</span></span><span class="token punctuation">(</span>p_node_id <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span> <span class="token keyword">declare</span> p_lft<span class="token punctuation">,</span>p_rgt <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> node_id <span class="token keyword">from</span> tree <span class="token keyword">where</span> node_id <span class="token operator">=</span> p_node_id<span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>
    <span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> tree <span class="token keyword">WHERE</span> lft <span class="token operator">&gt;=</span> p_lft <span class="token operator">AND</span> rgt <span class="token operator">&lt;=</span> p_rgt<span class="token punctuation">;</span>
    <span class="token keyword">UPDATE</span> tree <span class="token keyword">SET</span> lft <span class="token operator">=</span> lft <span class="token operator">-</span> <span class="token punctuation">(</span>p_rgt <span class="token operator">-</span> p_lft <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> lft <span class="token operator">&gt;</span> p_lft<span class="token punctuation">;</span>
    <span class="token keyword">UPDATE</span> tree <span class="token keyword">SET</span> rgt <span class="token operator">=</span> rgt <span class="token operator">-</span> <span class="token punctuation">(</span>p_rgt <span class="token operator">-</span> p_lft <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> rgt <span class="token operator">&gt;</span> p_rgt<span class="token punctuation">;</span>
    <span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
<span class="token keyword">END</span>
<span class="token comment">-- 执行删除节点</span>
<span class="token keyword">call</span> DelNode<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function b(_,E){const a=o("router-link");return c(),l("div",null,[u,d,k(" more "),n("nav",m,[n("ul",null,[n("li",null,[p(a,{to:"#继承关系驱动的-schema-设计"},{default:e(()=>[s("继承关系驱动的 Schema 设计")]),_:1})]),n("li",null,[p(a,{to:"#基于左右值编码的-schema-设计"},{default:e(()=>[s("基于左右值编码的 Schema 设计")]),_:1})])])]),y,w,v])}const h=t(i,[["render",b],["__file","10.数据库树形结构设计.html.vue"]]);export{h as default};
