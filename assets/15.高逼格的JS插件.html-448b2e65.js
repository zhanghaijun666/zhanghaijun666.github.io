import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as p,f as t}from"./app-d6438571.js";const i={},u=t(`<h2 id="_1、原型链写法" tabindex="-1"><a class="header-anchor" href="#_1、原型链写法" aria-hidden="true">#</a> 1、原型链写法</h2><p>要开始编写插件就得先了解<strong>JS模块化</strong>，早期的模块化是利用了<strong>函数自执行</strong>来实现的，在单独的函数作用域中执行代码可以避免插件中定义的变量污染到全局变量，举个栗子🌰，以下代码实现了一个简单随机数生成的插件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> <span class="token function-variable function">MyPlugin</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">MyPlugin</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;欢迎你：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">random</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span> <span class="token operator">&amp;&amp;</span> max <span class="token operator">&lt;=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 函数自执行将 this（全局下为window）传入，并在其下面挂载方法</span>
    global<span class="token punctuation">.</span>MyPlugin <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>
    <span class="token comment">// 兼容CommonJs规范导出</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接使用 <strong>script</strong> 标签引入该插件，接着 <code>new</code> 一个实例就能使用插件啦：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> aFn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> num <span class="token operator">=</span> aFn<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 打印一个 10~20 之间的随机数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、闭包式写法-推荐" tabindex="-1"><a class="header-anchor" href="#_2、闭包式写法-推荐" aria-hidden="true">#</a> 2、闭包式写法（推荐）</h2><p>上面的插件使用时如果调用 <code>say</code> 方法，会打印方法中的欢迎字样，并显示初始化的 <code>name</code> 值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> aFn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token string">&#39;呀哈哈&#39;</span><span class="token punctuation">)</span>
aFn<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 欢迎你: 呀哈哈</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但由于属性能被直接访问，插件中的变量就可以随意修改，这可能是我们不想看到的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> aFn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token string">&#39;呀哈哈&#39;</span><span class="token punctuation">)</span>
aFn<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">null</span>
aFn<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 欢迎你: null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么如果要创建<strong>私有变量</strong>，可以利用<strong>JS闭包</strong>原理来编写插件，我们使用<strong>工厂模式</strong>来创建函数，再举个栗子🌰，如下代码实现了一个简单正则校验的插件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">MyPlugin</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 私有变量不绑定到this上，符合JS包闭原则的写法</span>
        <span class="token keyword">var</span> val <span class="token operator">=</span> value
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[3456789]\\d{9}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^-?\\d*\\.?\\d+$</span><span class="token regex-delimiter">/</span></span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token function">getRegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> reg
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function">setRegs</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                reg <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>reg<span class="token punctuation">,</span> <span class="token operator">...</span>params <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function">isPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                reg<span class="token punctuation">.</span>phone<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是手机号&#39;</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                reg<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是数字&#39;</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 函数自执行将 this（全局下为window）传入，并在其下面挂载方法</span>
    global<span class="token punctuation">.</span>MyPlugin <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>
    <span class="token comment">// 兼容CommonJs规范导出</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时我们再调用插件，其内部的变量是不可访问的，只能通过插件<strong>内部的方法查看/修改</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> aFn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> aFn<span class="token punctuation">.</span>reg <span class="token punctuation">)</span> <span class="token comment">// undefined</span>

<span class="token keyword">var</span> reg <span class="token operator">=</span> aFn<span class="token punctuation">.</span><span class="token function">getRegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg <span class="token punctuation">)</span> <span class="token comment">// {&quot;phone&quot;:{....},&quot;number&quot;:{.....}}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中我们在 <code>isPhone</code> <code>isNumber</code> 方法的最后都返回了 <code>this</code>，这是为了实现如下的链式调用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> aFn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">(</span><span class="token number">13800138000</span><span class="token punctuation">)</span>

aFn<span class="token punctuation">.</span><span class="token function">isPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// log: &gt; 这是手机号 &gt; 这是数字</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、仿-jquery写法" tabindex="-1"><a class="header-anchor" href="#_3、仿-jquery写法" aria-hidden="true">#</a> 3、仿 <code>JQuery</code>写法</h2><p>这种写法是仿造<strong>JQ</strong>实现的一种编写模式，可以省去调用时<code>new</code>实例化的步骤，并实现类似 <code>$(xxx).someFn(....)</code> 这样的调用方法，在需要频繁<strong>DOM</strong>操作的时候就很适合这么编写插件。笔者以前会在小项目中自己实现一些类<strong>JQ</strong>选择器操作的功能插件，来避免引入整个<strong>JQ</strong>，实现插件的核心思路如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Fn <span class="token operator">=</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fn<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以看出核心是对<strong>JS原型链</strong>的极致利用，首先主动对其原型上的<code>init</code>方法进行实例化并返回，<code>init</code>相当于构造函数的效果，而此时返回的实例里并没有包含<code>Fn</code>的方法，我们调用时<strong>JS</strong>自然就会从<code>init</code>的原型对象上去查找，于是最终<code>init</code>下的原型才又指向了<code>Fn</code>的原型，通过这种&quot;套娃&quot;的手法，使得我们能够不通过实例化<code>Fn</code>又能正确地访问到<code>Fn</code>下的原型对象。</p></blockquote><p>说了这么多，还是举个栗子🌰，以下代码实现了一个简单的样式操作插件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> <span class="token function-variable function">MyPlugin</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPlugin<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token class-name">MyPlugin</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> <span class="token keyword">typeof</span> el <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">:</span> el<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setBg</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">bg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> bg<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setWidth</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> w<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setHeight</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token class-name">MyPlugin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">MyPlugin</span><span class="token punctuation">.</span>prototype
  <span class="token comment">// script标签引入插件后全局下挂载一个_$的方法</span>
  global<span class="token punctuation">.</span>_$ <span class="token operator">=</span> MyPlugin<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">||</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用演示：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 页面元素 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为元素设置背景：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">_$</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBg</span><span class="token punctuation">(</span><span class="token string">&#39;#ff0&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为元素设置背景并改变宽高：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">_$</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBg</span><span class="token punctuation">(</span><span class="token string">&#39;#ff0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token string">&#39;100px&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token string">&#39;200px&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4、工程化插件" tabindex="-1"><a class="header-anchor" href="#_4、工程化插件" aria-hidden="true">#</a> 4、工程化插件</h2><p>前面讲的插件编写方法已经足够优雅了，但还不够逼格，假设以后会有多人同时开发的情况，仅靠一个<strong>JS</strong>维护大型插件肯定是独木难支，这时候就需要组件化把颗粒度打细，将插件拆分成多个文件，分别负责各自的功能，最终再打包成一个文件引用。如今<strong>ES</strong>模块化已经可以轻松应对功能拆分了，所以我们只需要一个打包器，<strong>Rollup.js</strong> 就是不错的选择，有了它我们可以更优雅地编写插件，它会帮我们打包。许多大型框架例如 <strong>Vue</strong>、<strong>React</strong> 都是用它打包的。</p>`,30),r={href:"https://rollupjs.org/guide/en/",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>下面我们一步步实现这个工程化的插件，没有那么复杂，先创建一个目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> my-project/src
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着运行 <code>npm init</code> 进行项目初始化，一路回车，接着为项目安装 <strong>Rollup</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev rollup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根目录下创建入口文件 <strong>index.js</strong>，以及 <strong>src</strong>下的<strong>main.js</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> main <span class="token keyword">from</span> <span class="token string">&#39;./src/main.js&#39;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// src/main.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根目录下创建 <code>rollup.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> babel <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-babel&#39;</span>
<span class="token keyword">import</span> commonjs <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-commonjs&#39;</span>
<span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-node-resolve&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;dist/main.umd.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;bundle-name&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;dist/main.es.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;es&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&#39;dist/main.cjs.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;cjs&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token string">&#39;node_modules/**&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">jsnext</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>稍微解释上面配置的插件：</p><p><code>babel</code>：将最终代码编译成 <strong>es5</strong>，我们的开发代码可以不用处理兼容性。</p><p><code>resolve</code>、<code>commonjs</code>：用于兼容可以依赖 <strong>commonjs</strong> 规范的包。</p></blockquote><p>把上面的依赖安装一下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/core @babel/preset-env rollup-plugin-babel@latest rollup-plugin-node-resolve rollup-plugin-commonjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改 <strong>package.json</strong>，增加一条脚本命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token operator">...</span>
    <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rollup -c -w&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>npm run dev</code> 看看效果吧：</p>`,14),k=n("thead",null,[n("tr",null,[n("th",null,"打包文件"),n("th",null,"测试运行")])],-1),v=n("td",null,[n("img",{src:"https://mmbiz.qpic.cn/mmbiz_png/EFMcFLSf0WhoUMUbnliaE4hkqznVjlbOgUZ6Go1I6Sq7I3iaiapxg8ZgYjiaQ5hBsthibGKsplGdwdkrndEuLfSETRw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片",loading:"lazy"})],-1),m=n("code",null,"node dist/main.cjs.js",-1),g={href:"http://www.w3.org/2000/svg",target:"_blank",rel:"noopener noreferrer"},b={href:"http://www.w3.org/1999/xlink",target:"_blank",rel:"noopener noreferrer"},y=t(`<blockquote><p>打包文件格式说明</p></blockquote><h3 id="_4-1-umd" tabindex="-1"><a class="header-anchor" href="#_4-1-umd" aria-hidden="true">#</a> 4.1. <code>umd</code></h3><p>集合了 <strong>CommonJS</strong>、<strong>AMD</strong>、<strong>CMD</strong>、<strong>IIFE</strong> 为一体的打包模式，看看上面的 <strong>hello world</strong> 会被打包成什么：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">?</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd <span class="token operator">?</span> <span class="token function">define</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span> <span class="token operator">:</span>
    <span class="token punctuation">(</span>global <span class="token operator">=</span> <span class="token keyword">typeof</span> globalThis <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">?</span> globalThis <span class="token operator">:</span> global <span class="token operator">||</span> self<span class="token punctuation">,</span> global<span class="token punctuation">[</span><span class="token string">&quot;bundle-name&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>代码省略<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
    <span class="token keyword">return</span> xxxxxxxx<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出导出的文件就是我们前面一直使用的<strong>函数自执行</strong>开发方式，其中加了各种兼容判断代码将在哪个环境下导入。</p><h3 id="_4-2-es" tabindex="-1"><a class="header-anchor" href="#_4-2-es" aria-hidden="true">#</a> 4.2. <code>ES</code></h3><p>现代JS的标准，导出的文件只能使用 <strong>ES模块化</strong> 方式导入。</p><h3 id="_4-3-cjs" tabindex="-1"><a class="header-anchor" href="#_4-3-cjs" aria-hidden="true">#</a> 4.3. <code>CJS</code></h3><p>这个是指 <code>CommonJS</code> 规范导出的格式，只可在 <strong>Node</strong> 环境下导入。</p><h2 id="_5、模块化的发展" tabindex="-1"><a class="header-anchor" href="#_5、模块化的发展" aria-hidden="true">#</a> 5、模块化的发展</h2><ul><li>• 早期利用<strong>函数自执行</strong>实现，在单独的函数作用域中执行代码（如 JQuery ）</li><li>• <strong>AMD</strong>：引入 <code>require.js</code> 编写模块化，引用依赖必须提前声明</li><li>• <strong>CMD</strong>：引入 <code>sea.js</code> 编写模块化，特点是可以动态引入依赖</li><li>• <strong>CommonJS</strong>：NodeJs 中的模块化，只在服务端适用，是同步加载</li><li>• <strong>ES Modules</strong>：ES6 中新增的模块化，是目前的主流</li></ul><p>本文前三种插件编写方式均属于利用函数自执行（<strong>IIFE</strong>）实现的插件，同时在向全局注入插件时兼容了 <strong>CommonJS</strong> 规范，但并未兼容 AMD CMD，是因为目前基本没有项目会使用到这两种模块化。</p><h2 id="_5、自动化api文档" tabindex="-1"><a class="header-anchor" href="#_5、自动化api文档" aria-hidden="true">#</a> 5、自动化API文档</h2><p>私以为一个好的 <strong>JS</strong> 插件决不能没有一份文档，如果别人使用你的插件，他不可能去查看源码才知道这个插件有哪些方法，是做什么的，要传哪些参数等。这里我们使用 <strong>JSDoc</strong> 来创建 <strong>API文档</strong>，它使用简单，只需要在代码中编写规范的<strong>注释</strong>，即能根据注释自动生成文档，一举多得，非常优雅！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> --save-dev jsdoc <span class="token function">open</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改 <strong>package.json</strong>，增加一条脚本命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token operator">...</span>
    <span class="token string-property property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jsdoc dist/main.es.js &amp;&amp; node server.js&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根目录下创建文件 <strong>server.js</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> open <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">open</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">out/index.html</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是apidoc默认生成的路径，这里只是为了自动打开网页</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，现在可以使用 <code>npm run doc</code> 命令来生成文档了，依然是举个栗子🌰，我们在<strong>src</strong>目录下添加一个文件 <code>ArrayDelSome.js</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 *
 * <span class="token keyword">@desc</span> 对象数组去重
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">arr</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> 对象中相同的关键字(如id)
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> 返回新数组，eg: ArrayDelSome([<span class="token punctuation">{</span>id: 1<span class="token punctuation">}</span>,<span class="token punctuation">{</span>id: 2<span class="token punctuation">}</span>,<span class="token punctuation">{</span>id: 1<span class="token punctuation">}</span>], &#39;id&#39;) -&gt; 返回: [<span class="token punctuation">{</span>id: 1<span class="token punctuation">}</span>,<span class="token punctuation">{</span>id: 2<span class="token punctuation">}</span>]
 */</span>
<span class="token keyword">function</span> <span class="token function">ArrayDelSome</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ArrayDelSome
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>本例只演示最基础的用法，<strong>JSDoc</strong>有许多类型注释大家可以自行搜索学习下，不过本例最基本的这几个注释依旧是够用的。</p></blockquote><p>运行 <code>npm run doc</code>，将会打开一个网页，可以查看我们刚写的工具函数：</p><blockquote><p>注意在生成文当前需要先进行过 <strong>rollup</strong> 的打包，且不能开启去注释之类的插件，因为上面的例子实际是对 <code>dist/</code> 目录下的最终文件进行文档编译的。</p></blockquote><h2 id="_6、发布插件" tabindex="-1"><a class="header-anchor" href="#_6、发布插件" aria-hidden="true">#</a> 6、发布插件</h2><p>如果你的公司有私域npm管理源，或者平时喜欢用淘宝源，推荐使用 <code>nrm</code> 进行切换：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i nrm <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>查看源: <code>nrm ls</code></li><li>添加源: <code>nrm add name http//:xxx.xxx.xxx.xxx:4873/</code></li><li>删除源: <code>nrm del name</code></li><li>使用指定源: <code>nrm use npm</code></li></ol><h2 id="_7、总结" tabindex="-1"><a class="header-anchor" href="#_7、总结" aria-hidden="true">#</a> 7、总结</h2><p>功能较简单的<strong>JS</strong>插件我们可以直接采用前三种方式开发，如果涉及<strong>DOM</strong>操作较多，可以编写仿<strong>JQ</strong>的插件更好用，如果插件功能较多，有可能形成长期维护的大型插件，那么可以采用工程化的方式开发，方便多人协作，配套生成文档也利于维护。</p>`,30);function h(f,w){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("Rollup 是一个用于 JavaScript 的模块打包器，它将小段代码编译成更大更复杂的东西，例如库或应用程序。"),n("em",null,[n("a",r,[s("https://rollupjs.org/guide/en/"),p(a)])])])]),d,n("table",null,[k,n("tbody",null,[n("tr",null,[v,n("td",null,[m,s(": ![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='"),n("a",g,[s("http://www.w3.org/2000/svg"),p(a)]),s("' xmlns:xlink='"),n("a",b,[s("http://www.w3.org/1999/xlink"),p(a)]),s("'%3E%3Ctitle%3E%3C/title%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)")])])])]),y])}const _=e(i,[["render",h],["__file","15.高逼格的JS插件.html.vue"]]);export{_ as default};
