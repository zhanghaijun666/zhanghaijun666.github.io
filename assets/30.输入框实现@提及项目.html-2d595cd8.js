import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as a,d as t,f as l}from"./app-d6438571.js";const i={},u=n("h2",{id:"一、效果预览",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、效果预览","aria-hidden":"true"},"#"),a(" 一、效果预览")],-1),r={href:"https://zhangxinxu.gitee.io/okr-at-mention/",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"项目地址")],-1),k={href:"https://gitee.com/zhangxinxu/okr-at-mention",target:"_blank",rel:"noopener noreferrer"},v=l(`<blockquote><p>使用说明</p></blockquote><p>使用很简单，引入对应的CSS和JS，然后按照暴露的方法进行调用就可以了。</p><p>例如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./src/atMention.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假设有容器元素（也就是输入框元素）：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>则对应的 JavaScript 代码则可以这么使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token operator">&gt;</span>
    <span class="token keyword">import</span> atWakaka <span class="token keyword">from</span> <span class="token string">&#39;./src/atWakaka.js&#39;</span><span class="token punctuation">;</span>
    <span class="token function">atWakaka</span><span class="token punctuation">(</span><span class="token string">&#39;container&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;./cgi/data.json&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、实现技巧" tabindex="-1"><a class="header-anchor" href="#二、实现技巧" aria-hidden="true">#</a> 二、实现技巧</h2><p>这里有三个实现技巧我觉得值得和大家分享下。</p><h3 id="_1-描述整删整加" tabindex="-1"><a class="header-anchor" href="#_1-描述整删整加" aria-hidden="true">#</a> 1. @描述整删整加</h3><p>在可编辑的 div 元素中，要想让里面某段文字不能编辑，有个简单的方法，就是设置 <code>contenteditable=&quot;false&quot;</code>，例如，下面 HTML 代码中的 <code>&lt;span&gt;</code> 元素就无法编辑，里面的文字五毒不侵。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   我是文字，可逐个删除，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我只能整体删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>！
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，上面的实现看似完美，实际上有个很头疼的问题，设置了 <code>contenteditable=&quot;false&quot;</code> 的元素后面是不能光标定位的，这就导致我想定位在 @xxx 的后面，然后删除，做不到，要么 JS 实时观察并改变光标位置，要么在后面插入一个零宽空格。</p><p>上面无论哪个方法，成本都比较高。</p><p>在本 JS 的实现中，创新的采用了单标签元素 <code>&lt;hr&gt;</code> 来模拟 @xxx 效果，由于单标签元素本身内容 textContent 是空的，因此，无需设置 <code>contenteditable=&quot;false&quot;</code>，就能实现删除只能删整体。</p><p>在所有浏览器中，<code>&lt;hr&gt;</code> 元素都支持 <code>::before/::after</code> 伪元素，因此，可以创建丰富的内容和图形生成，有兴趣的同学可以看看我之前的这篇文章：<strong>“666，看hr标签实现分隔线如何玩出花”</strong>[1]。</p><h3 id="_2-hover出现浮层交互" tabindex="-1"><a class="header-anchor" href="#_2-hover出现浮层交互" aria-hidden="true">#</a> 2. hover出现浮层交互</h3><p>Hover出现浮层的交互并不难实现，可如果是在可编辑的 div 内部呢？以及，要是是在 Vue 或者 React 等框架中的。</p><p>如果还是按照传统的实现，找到对应的 trigger 元素，然后使用组件包一下，那可能就会出现很多的问题，比方说包不了，又比方说事件绑定不上。</p><p>面对这样的场景，解决方法都是类似的，那就是委托。</p><p>将<code>mouseover</code>/<code>mouseout</code>的行为绑定在容器上，然后进行定位处理。</p><p>因为容器元素是固定的，而里面的元素是多变的，绑定在容器上就能以不变应万变，性能也更好。</p><h3 id="_3-复制粘贴或者拖拽进去的都是纯文本" tabindex="-1"><a class="header-anchor" href="#_3-复制粘贴或者拖拽进去的都是纯文本" aria-hidden="true">#</a> 3. 复制粘贴或者拖拽进去的都是纯文本</h3><p>富文本编辑机纯手打应该是打不了富文本的，但是粘贴和拖拽却能将富文本弄进去。</p><p>有没有什么办法过滤富文本，让用户粘贴或拖拽的内容默认就是纯文本呢？</p><p>有的哈！</p><p>浏览器其实提供了原生的能力。</p><p>包括获取剪切板里面的文本和富文本内容，获取拖拽内容中的文本和富文本，此时，我们就可以阻止默认行为，将纯文本内容插入就可以了。</p><p>来一招神不知鬼不觉的移花接木。</p><p>相关代码如下所示（拖拽和粘贴二合一了，因为 API 类似）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">doStripHtml</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> dataInput <span class="token operator">=</span> event<span class="token punctuation">.</span>clipboardData <span class="token operator">||</span> event<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">;</span>
    <span class="token comment">// 富文本</span>
    <span class="token keyword">let</span> htmlOrigin <span class="token operator">=</span> dataInput<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&#39;text/html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 纯文本</span>
    <span class="token keyword">let</span> textOrigin <span class="token operator">=</span> dataInput<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果包含富文本</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>htmlOrigin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 手动插入</span>
        <span class="token comment">// 阻止默认的行为</span>
        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 只插入纯文本</span>
        <span class="token keyword">let</span> lastRange <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRangeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> newNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>textOrigin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lastRange<span class="token punctuation">.</span><span class="token function">deleteContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lastRange<span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lastRange<span class="token punctuation">.</span><span class="token function">setStartAfter</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        event<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，插入内容这段代码对于任意的富文本编辑器都是受用的，关于光标和选区更多知识可以参见这篇公众号文章：<strong>Web 中的“选区”和“光标”</strong>[3]。</p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>使用 <code>&lt;hr&gt;</code> 来模拟 <code>@xxx</code> 效果也并非完美无瑕，也是有所牺牲的，首先就是 <code>@xxx</code> 这样的文字内容是无法框选复制的，因为伪元素生成的文本是无法选择的。</p><p>其次，就是数据提交的时候，直接 <code>div.textContent</code> 是不行的，因为会丢失 <code>@xxx</code> 这样的信息，需要在额外处理下。</p><p>不过相比弊，带来的利想让是更大的。</p>`,37);function m(g,h){const s=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[a("先看demo: "),n("a",r,[a("https://zhangxinxu.gitee.io/okr-at-mention/"),t(s)])]),d,n("p",null,[a("项目地址: "),n("a",k,[a("https://gitee.com/zhangxinxu/okr-at-mention"),t(s)])]),v])}const f=e(i,[["render",m],["__file","30.输入框实现@提及项目.html.vue"]]);export{f as default};
