import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as u,a as n,b as s,d as a,e as r,w as e,f as o}from"./app-d6438571.js";const k={},d=n("p",null,"Springboot-注解-通用操作日志组件",-1),v=n("p",null,"此组件解决的问题是： 「谁」在「什么时间」对「什么」做了「什么事」",-1),m={href:"https://github.com/mouzt/mzt-biz-log",target:"_blank",rel:"noopener noreferrer"},b={class:"table-of-contents"},g=o(`<h2 id="maven-依赖添加-sdk-依赖" tabindex="-1"><a class="header-anchor" href="#maven-依赖添加-sdk-依赖" aria-hidden="true">#</a> maven 依赖添加 SDK 依赖</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.mouzt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>bizlog-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加-enablelogrecord-注解" tabindex="-1"><a class="header-anchor" href="#添加-enablelogrecord-注解" aria-hidden="true">#</a> 添加 @EnableLogRecord 注解</h2><p>tenant 是代表租户的标识，一般一个服务或者一个业务下的多个服务都写死一个 tenant 就可以</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token annotation punctuation">@EnableLogRecord</span><span class="token punctuation">(</span>tenant <span class="token operator">=</span> <span class="token string">&quot;com.mzt.test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="日志埋点" tabindex="-1"><a class="header-anchor" href="#日志埋点" aria-hidden="true">#</a> 日志埋点</h2><h3 id="_1-普通的记录日志" tabindex="-1"><a class="header-anchor" href="#_1-普通的记录日志" aria-hidden="true">#</a> 1. 普通的记录日志</h3>`,7),f=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token comment"},`/*
* pefix：是拼接在 bizNo 上作为 log 的一个标识。避免 bizNo 都为整数 ID 的时候和其他的业务中的 ID 重复。比如订单 ID、用户 ID 等
* bizNo：就是业务的 ID，比如订单ID，我们查询的时候可以根据 bizNo 查询和它相关的操作日志
* success：方法调用成功后把 success 记录在日志的内容中
*
* SpEL 表达式：其中用双大括号包围起来的（例如：{{#order.purchaseName}}）#order.purchaseName 是 SpEL表达式。Spring中支持的它都支持的。
*/`),s(`
`),n("span",{class:"token annotation punctuation"},"@LogRecordAnnotation"),n("span",{class:"token punctuation"},"("),s(`
    success `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.purchaseName}}下了一个订单,购买商品「{{#order.productName}}」,下单结果:{{#_ret}}"'),n("span",{class:"token punctuation"},","),s(`
    prefix `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"LogRecordType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ORDER"),n("span",{class:"token punctuation"},","),s(`
    bizNo `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.orderNo}}"'),s(`
`),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"boolean"),s(),n("span",{class:"token function"},"createOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Order"),s(" order"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"【创建订单】orderNo={}"'),n("span",{class:"token punctuation"},","),s(" order"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getOrderNo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// db insert order"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},'// 此时会打印操作日志 "张三下了一个订单,购买商品「超值优惠红烧肉套餐」,下单结果:true"'),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("h3",{id:"_2-期望记录失败的日志-如果抛出异常则记录-fail-的日志-没有抛出记录-success-的日志",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-期望记录失败的日志-如果抛出异常则记录-fail-的日志-没有抛出记录-success-的日志","aria-hidden":"true"},"#"),s(" 2. 期望记录失败的日志, 如果抛出异常则记录 fail 的日志，没有抛出记录 success 的日志")],-1),y=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 其中的 #_errorMsg 是取的方法抛出异常后的异常的 errorMessage。"),s(`
`),n("span",{class:"token annotation punctuation"},"@LogRecordAnnotation"),n("span",{class:"token punctuation"},"("),s(`
    fail `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"创建订单失败，失败原因：「{{#_errorMsg}}」"'),n("span",{class:"token punctuation"},","),s(`
    success `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.purchaseName}}下了一个订单,购买商品「{{#order.productName}}」,下单结果:{{#_ret}}"'),n("span",{class:"token punctuation"},","),s(`
    prefix `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"LogRecordType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ORDER"),n("span",{class:"token punctuation"},","),s(`
    bizNo `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.orderNo}}"'),s(`
`),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"boolean"),s(),n("span",{class:"token function"},"createOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Order"),s(" order"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"【创建订单】orderNo={}"'),n("span",{class:"token punctuation"},","),s(" order"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getOrderNo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// db insert order"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("h3",{id:"_3-日志支持种类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-日志支持种类","aria-hidden":"true"},"#"),s(" 3. 日志支持种类")],-1),w=n("p",null,"对日志做分类，查询方便，支持更多的业务。",-1),R=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@LogRecordAnnotation"),n("span",{class:"token punctuation"},"("),s(`
    fail `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"创建订单失败，失败原因：「{{#_errorMsg}}」"'),n("span",{class:"token punctuation"},","),s(`
    category `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"MANAGER"'),n("span",{class:"token punctuation"},","),s(`
    success `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.purchaseName}}下了一个订单,购买商品「{{#order.productName}}」,下单结果:{{#_ret}}"'),n("span",{class:"token punctuation"},","),s(`
    prefix `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"LogRecordType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ORDER"),n("span",{class:"token punctuation"},","),s(`
    bizNo `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.orderNo}}"'),s(`
`),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"boolean"),s(),n("span",{class:"token function"},"createOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Order"),s(" order"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"【创建订单】orderNo={}"'),n("span",{class:"token punctuation"},","),s(" order"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getOrderNo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// db insert order"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("h3",{id:"_4-支持记录操作的详情或者额外信息",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-支持记录操作的详情或者额外信息","aria-hidden":"true"},"#"),s(" 4. 支持记录操作的详情或者额外信息")],-1),S=n("p",null,"如果一个操作修改了很多字段，但是 success 的日志模版里面防止过长不能把修改详情全部展示出来，这时候需要把修改的详情保存到 detail 字段， detail 是一个 String ，需要自己序列化。",-1),I=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@LogRecordAnnotation"),n("span",{class:"token punctuation"},"("),s(`
    fail `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"创建订单失败，失败原因：「{{#_errorMsg}}」"'),n("span",{class:"token punctuation"},","),s(`
    category `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"MANAGER_VIEW"'),n("span",{class:"token punctuation"},","),s(`
    detail `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.toString()}}"'),n("span",{class:"token punctuation"},","),s(`
    success `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.purchaseName}}下了一个订单,购买商品「{{#order.productName}}」,下单结果:{{#_ret}}"'),n("span",{class:"token punctuation"},","),s(`
    prefix `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"LogRecordType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ORDER"),n("span",{class:"token punctuation"},","),s(`
    bizNo `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.orderNo}}"'),s(`
`),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"boolean"),s(),n("span",{class:"token function"},"createOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Order"),s(" order"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"【创建订单】orderNo={}"'),n("span",{class:"token punctuation"},","),s(" order"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getOrderNo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// db insert order"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("h3",{id:"_5-如何指定操作日志的操作人是什么-框架提供了两种方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-如何指定操作日志的操作人是什么-框架提供了两种方法","aria-hidden":"true"},"#"),s(" 5. 如何指定操作日志的操作人是什么？框架提供了两种方法")],-1),N=n("p",null,"第一种：手工在 LogRecord 的注解上指定。这种需要方法参数上有 operator",-1),q=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 需要方法参数上有 operator 参数，或者通过 SpEL 调用静态方法获取当前用户。"),s(`
`),n("span",{class:"token annotation punctuation"},"@LogRecordAnnotation"),n("span",{class:"token punctuation"},"("),s(`
    fail `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"创建订单失败，失败原因：「{{#_errorMsg}}」"'),n("span",{class:"token punctuation"},","),s(`
    category `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"MANAGER_VIEW"'),n("span",{class:"token punctuation"},","),s(`
    detail `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.toString()}}"'),n("span",{class:"token punctuation"},","),s(`
    operator `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#currentUser}}"'),n("span",{class:"token punctuation"},","),s(`
    success `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.purchaseName}}下了一个订单,购买商品「{{#order.productName}}」,下单结果:{{#_ret}}"'),n("span",{class:"token punctuation"},","),s(`
    prefix `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"LogRecordType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"ORDER"),n("span",{class:"token punctuation"},","),s(`
    bizNo `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{{#order.orderNo}}"'),s(`
`),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"boolean"),s(),n("span",{class:"token function"},"createOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Order"),s(" order"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"String"),s(" currentUser"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"【创建订单】orderNo={}"'),n("span",{class:"token punctuation"},","),s(" order"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getOrderNo"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// db insert order"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=o(`<p>第二种：通过默认实现类来自动的获取操作人，由于在大部分 web 应用中当前的用户都是保存在一个线程上下文中的，所以每个注解都加一个 operator 获取操作人显得有些重复劳动，所以提供了一个扩展接口来获取操作人 框架提供了一个扩展接口，使用框架的业务可以 implements 这个接口自己实现获取当前用户的逻辑， 对于使用 Springboot 的只需要实现 IOperatorGetService 接口，然后把这个 Service 作为一个单例放到 Spring 的上下文中。使用 Spring Mvc 的就需要自己手工装配这些 bean 了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogRecordConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">IOperatorGetService</span> <span class="token function">operatorGetService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">OrgUserUtils</span><span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">OperatorDO</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getMisId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;user is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//也可以这么搞：</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultOperatorGetServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IOperatorGetService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">OperatorDO</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">OperatorDO</span> operatorDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperatorDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        operatorDO<span class="token punctuation">.</span><span class="token function">setOperatorId</span><span class="token punctuation">(</span><span class="token string">&quot;SYSTEM&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> operatorDO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-日志文案调整" tabindex="-1"><a class="header-anchor" href="#_6-日志文案调整" aria-hidden="true">#</a> 6. 日志文案调整</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
对于更新等方法，方法的参数上大部分都是订单ID、或者产品ID等， 比如下面的例子：日志记录的success内容是：“更新了订单{{#orderId}},更新内容为…”，这种对于运营或者产品来说难以理解，所以引入了自定义函数的功能。使用方法是在原来的变量的两个大括号之间加一个函数名称 例如 “{ORDER{#orderId}}” 其中 ORDER 是一个函数名称。只有一个函数名称是不够的,需要添加这个函数的定义和实现。可以看下面例子 自定义的函数需要实现框架里面的IParseFunction的接口，需要实现两个方法：
functionName() 方法就返回注解上面的函数名；
apply()函数参数是 &quot;{ORDER{#orderId}}&quot;中SpEL解析的#orderId的值，这里是一个数字1223110，接下来只需要在实现的类中把 ID 转换为可读懂的字符串就可以了， 一般为了方便排查问题需要把名称和ID都展示出来，例如：&quot;订单名称（ID）&quot;的形式。
这里有个问题：加了自定义函数后，框架怎么能调用到呢？答：对于Spring boot应用很简单，只需要把它暴露在Spring的上下文中就可以了，可以加上Spring的 @Component 或者 @Service 很方便😄。Spring mvc 应用需要自己装配 Bean。
*/</span>
<span class="token comment">// 没有使用自定义函数</span>
<span class="token annotation punctuation">@LogRecordAnnotation</span><span class="token punctuation">(</span>
    success <span class="token operator">=</span> <span class="token string">&quot;更新了订单{{#orderId}},更新内容为....&quot;</span><span class="token punctuation">,</span>
    prefix <span class="token operator">=</span> <span class="token class-name">LogRecordType</span><span class="token punctuation">.</span><span class="token constant">ORDER</span><span class="token punctuation">,</span>
    bizNo <span class="token operator">=</span> <span class="token string">&quot;{{#order.orderNo}}&quot;</span><span class="token punctuation">,</span>
    detail <span class="token operator">=</span> <span class="token string">&quot;{{#order.toString()}}&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Long</span> orderId<span class="token punctuation">,</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//使用了自定义函数，主要是在 {{#orderId}} 的大括号中间加了 functionName</span>
<span class="token annotation punctuation">@LogRecordAnnotation</span><span class="token punctuation">(</span>
    success <span class="token operator">=</span> <span class="token string">&quot;更新了订单ORDER{#orderId}},更新内容为...&quot;</span><span class="token punctuation">,</span>
    prefix <span class="token operator">=</span> <span class="token class-name">LogRecordType</span><span class="token punctuation">.</span><span class="token constant">ORDER</span><span class="token punctuation">,</span>
    bizNo <span class="token operator">=</span> <span class="token string">&quot;{{#order.orderNo}}&quot;</span><span class="token punctuation">,</span>
    detail <span class="token operator">=</span> <span class="token string">&quot;{{#order.toString()}}&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Long</span> orderId<span class="token punctuation">,</span> <span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 还需要加上函数的实现</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderParseFunction</span> <span class="token keyword">implements</span> <span class="token class-name">IParseFunction</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token annotation punctuation">@Lazy</span> <span class="token comment">//为了避免类加载顺序的问题 最好为Lazy，没有问题也可以不加</span>
    <span class="token keyword">private</span> <span class="token class-name">OrderQueryService</span> orderQueryService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//  函数名称为 ORDER</span>
        <span class="token keyword">return</span> <span class="token string">&quot;ORDER&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token comment">//这里的 value 可以吧 Order 的JSON对象的传递过来，然后反解析拼接一个定制的操作日志内容</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Order</span> order <span class="token operator">=</span> orderQueryService<span class="token punctuation">.</span><span class="token function">queryOrder</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//把订单产品名称加上便于理解，加上 ID 便于查问题</span>
        <span class="token keyword">return</span> order<span class="token punctuation">.</span><span class="token function">getProductName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-日志文案调整-使用-spel-三目表达式" tabindex="-1"><a class="header-anchor" href="#_7-日志文案调整-使用-spel-三目表达式" aria-hidden="true">#</a> 7. 日志文案调整 使用 SpEL 三目表达式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@LogRecordAnnotation</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token class-name">LogRecordTypeConstant</span><span class="token punctuation">.</span><span class="token constant">CUSTOM_ATTRIBUTE</span><span class="token punctuation">,</span> bizNo <span class="token operator">=</span> <span class="token string">&quot;{{#businessLineId}}&quot;</span><span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token string">&quot;{{#disable ? &#39;停用&#39; : &#39;启用&#39;}}了自定义属性{ATTRIBUTE{#attributeId}}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">CustomAttributeVO</span> <span class="token function">disableAttribute</span><span class="token punctuation">(</span><span class="token class-name">Long</span> businessLineId<span class="token punctuation">,</span> <span class="token class-name">Long</span> attributeId<span class="token punctuation">,</span> <span class="token keyword">boolean</span> disable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> xxx<span class="token punctuation">;</span> <span class="token punctuation">}</span> \`
框架的扩展点，重写 <span class="token class-name">OperatorGetServiceImpl</span> 通过上下文获取用户的扩展，例子如下
\`\`\` java
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultOperatorGetServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IOperatorGetService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Operator</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token class-name">UserUtils</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Operator</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">getLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;user is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ILogRecordService 保存/查询日志的例子,使用者可以根据数据量保存到合适的存储介质上，比如保存在数据库/或者 ES。自己实现保存和删除就可以了</p><p>也可以只实现查询的接口，毕竟已经保存在业务的存储上了，查询业务可以自己实现，不走 ILogRecordService 这个接口，毕竟产品经理会提一些千奇百怪的查询需求。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbLogRecordServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ILogRecordService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">LogRecordMapper</span> logRecordMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">record</span><span class="token punctuation">(</span><span class="token class-name">LogRecord</span> logRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;【logRecord】log={}&quot;</span><span class="token punctuation">,</span> logRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LogRecordPO</span> logRecordPO <span class="token operator">=</span> <span class="token class-name">LogRecordPO</span><span class="token punctuation">.</span><span class="token function">toPo</span><span class="token punctuation">(</span>logRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logRecordMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>logRecordPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogRecord</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryLog</span><span class="token punctuation">(</span><span class="token class-name">String</span> bizKey<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PageDO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogRecord</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryLogByBizNo</span><span class="token punctuation">(</span><span class="token class-name">String</span> bizNo<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> types<span class="token punctuation">,</span> <span class="token class-name">PageRequestDO</span> pageRequestDO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> logRecordMapper<span class="token punctuation">.</span><span class="token function">selectByBizNoAndCategory</span><span class="token punctuation">(</span>bizNo<span class="token punctuation">,</span> types<span class="token punctuation">,</span> pageRequestDO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IParseFunction 自定义转换函数的接口，可以实现 IParseFunction 实现对 LogRecord 注解中使用的函数扩展 例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserParseFunction</span> <span class="token keyword">implements</span> <span class="token class-name">IParseFunction</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Splitter</span> splitter <span class="token operator">=</span> <span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token annotation punctuation">@Lazy</span>
    <span class="token keyword">private</span> <span class="token class-name">UserQueryService</span> userQueryService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;USER&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token comment">// 11,12 返回 11(小明)，12(张三)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userIds <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>splitter<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> misDOList <span class="token operator">=</span> userQueryService<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span>userIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userMap <span class="token operator">=</span> <span class="token class-name">StreamUtil</span><span class="token punctuation">.</span><span class="token function">extractMap</span><span class="token punctuation">(</span>misDOList<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> userId <span class="token operator">:</span> userIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;,$&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function E(D,j){const c=p("ExternalLinkIcon"),t=p("router-link");return i(),u("div",null,[n("blockquote",null,[d,v,n("p",null,[s("github地址："),n("a",m,[s("https://github.com/mouzt/mzt-biz-log"),a(c)])])]),r(" more "),n("nav",b,[n("ul",null,[n("li",null,[a(t,{to:"#maven-依赖添加-sdk-依赖"},{default:e(()=>[s("maven 依赖添加 SDK 依赖")]),_:1})]),n("li",null,[a(t,{to:"#添加-enablelogrecord-注解"},{default:e(()=>[s("添加 @EnableLogRecord 注解")]),_:1})]),n("li",null,[a(t,{to:"#日志埋点"},{default:e(()=>[s("日志埋点")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_1-普通的记录日志"},{default:e(()=>[s("1. 普通的记录日志")]),_:1})]),n("li",null,[a(t,{to:"#_2-期望记录失败的日志-如果抛出异常则记录-fail-的日志-没有抛出记录-success-的日志"},{default:e(()=>[s("2. 期望记录失败的日志, 如果抛出异常则记录 fail 的日志，没有抛出记录 success 的日志")]),_:1})]),n("li",null,[a(t,{to:"#_3-日志支持种类"},{default:e(()=>[s("3. 日志支持种类")]),_:1})]),n("li",null,[a(t,{to:"#_4-支持记录操作的详情或者额外信息"},{default:e(()=>[s("4. 支持记录操作的详情或者额外信息")]),_:1})]),n("li",null,[a(t,{to:"#_5-如何指定操作日志的操作人是什么-框架提供了两种方法"},{default:e(()=>[s("5. 如何指定操作日志的操作人是什么？框架提供了两种方法")]),_:1})]),n("li",null,[a(t,{to:"#_6-日志文案调整"},{default:e(()=>[s("6. 日志文案调整")]),_:1})]),n("li",null,[a(t,{to:"#_7-日志文案调整-使用-spel-三目表达式"},{default:e(()=>[s("7. 日志文案调整 使用 SpEL 三目表达式")]),_:1})])])])])]),g,f,h,y,_,w,R,O,S,I,L,N,q,x])}const M=l(k,[["render",E],["__file","13.springboot_bizlog日志.html.vue"]]);export{M as default};
