import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r,o,c as d,e as p,a as e,d as n,w as l,b as a,f as t}from"./app-d6438571.js";const m={},u={class:"table-of-contents"},h=e("h2",{id:"helm-介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#helm-介绍","aria-hidden":"true"},"#"),a(" Helm 介绍")],-1),v=e("li",null,[e("code",null,"Helm"),a(" 是 "),e("code",null,"Kubernetes"),a(" 的包管理器，可以帮我们简化 "),e("code",null,"kubernetes"),a(" 的操作，一键部署应用。")],-1),b={href:"https://helm.sh/zh/",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"Helm",-1),g={href:"https://artifacthub.io/",target:"_blank",rel:"noopener noreferrer"},_=e("h2",{id:"一、前言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一、前言","aria-hidden":"true"},"#"),a(" 一、前言")],-1),f=e("p",null,[a("在 k8s 中，我们很多时候需要部署很多个应用，特别是微服务的项目，如果每个服务部署都需要使用"),e("code",null,"kubectl apply"),a("依次执行，这将是一件很痛苦的事。")],-1),y={href:"https://helm.xn--sh-wu2csbj7oo1u1qcy5xf9af3l01nlvkcql8w5dga1966b2u6crdu8i89bcca1r",target:"_blank",rel:"noopener noreferrer"},H=t('<ul><li>简化部署 ：Helm允许使用单个命令轻松部署和管理应用程序，从而简化了整个部署过程；</li><li>高度可配置：Helm Charts提供了高度可配置的选项，可以轻松自定义和修改应用程序的部署配置；</li><li>版本控制 ：Helm允许管理应用程序的多个版本，从而轻松实现版本控制和回滚；</li><li>模板化：Helm Charts使用YAML模板来定义Kubernetes对象的配置，从而简化了配置过程，并提高了可重复性和可扩展性；</li><li>应用程序库：Helm具有应用程序库的概念，可以轻松地共享和重用Helm Charts，从而简化了多个应用程序的部署和管理；</li><li>插件系统：Helm拥有一个强大的插件系统，允许您扩展和定制Helm的功能，以满足特定的需求和要求。</li></ul><blockquote><p>Helm本质就是一个k8s的包管理器。</p></blockquote><h2 id="二、helm工作流程" tabindex="-1"><a class="header-anchor" href="#二、helm工作流程" aria-hidden="true">#</a> 二、Helm工作流程</h2><p>以下是Helm的工作流程（注意：这里使用的是Helm的v3版本，该版本没有了<code>tiller</code>而是用更加简单和灵活的架构，直接通过<code>kubeconfig</code>连接<code>apiserver</code>，简化安全模块，降低了用户的使用壁垒）：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/y2S9bsiaVEGpWaP6w4esgvU8ib3vicyS8rxXcFtlHmc4ia8FV8Syl8ibV1VBFUia6PwJseHsg1QqTWyFXOxRqgBAib7pw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>如上图所示，Helm的工作流程总结如下：</p><ol><li>开发者首先创建并编辑chart的配置；</li><li>接着打包并发布至Helm的仓库（Repository）；</li><li>当管理员使用helm命令安装时，相关的依赖会从仓库下载；</li><li>接着helm会根据下载的配置部署资源至k8s。</li></ol><h2 id="三、helm概念" tabindex="-1"><a class="header-anchor" href="#三、helm概念" aria-hidden="true">#</a> 三、Helm概念</h2><p>在使用Helm的过程中，需要理解如下的几个核心的概念：</p><table><thead><tr><th><strong>概念</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Chart</td><td>一个Helm包，其中包含了运行一个应用所需要的镜像、依赖和资源定义等，还可能包含Kubernetes集群中的服务定义，类似Homebrew中的formula、APT的dpkg或者Yum的rpm文件</td></tr><tr><td>Repository</td><td>存储Helm Charts的地方</td></tr><tr><td>Release</td><td>Chart在k8s上运行的Chart的一个实例，例如，如果一个MySQL Chart想在服务器上运行两个数据库，可以将这个Chart安装两次，并在每次安装中生成自己的Release以及Release名称</td></tr><tr><td>Value</td><td>Helm Chart的参数，用于配置Kubernetes对象</td></tr><tr><td>Template</td><td>使用Go模板语言生成Kubernetes对象的定义文件</td></tr><tr><td>Namespace</td><td>Kubernetes中用于隔离资源的逻辑分区</td></tr></tbody></table><h2 id="四、helm的使用" tabindex="-1"><a class="header-anchor" href="#四、helm的使用" aria-hidden="true">#</a> 四、Helm的使用</h2><p>下面简单讲下Helm的使用。</p><h3 id="_4-1-安装helm" tabindex="-1"><a class="header-anchor" href="#_4-1-安装helm" aria-hidden="true">#</a> 4.1 安装Helm</h3>',13),C={href:"https://helm.sh",target:"_blank",rel:"noopener noreferrer"},x=t(`<h3 id="_4-2-创建chart" tabindex="-1"><a class="header-anchor" href="#_4-2-创建chart" aria-hidden="true">#</a> 4.2 创建Chart</h3><p>使用helm create命令创建一个新的Chart，Chart目录包含描述应用程序的文件和目录，包括Chart.yaml、values.yaml、templates目录等；</p><h3 id="_4-3-配置chart" tabindex="-1"><a class="header-anchor" href="#_4-3-配置chart" aria-hidden="true">#</a> 4.3 配置Chart</h3><p>使用编辑器编辑Chart配置文件，包括Chart.yaml和values.yaml。</p><blockquote><p><code>Chart.yaml</code>包含<code>Chart</code>的元数据和依赖项</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> chart API 版本 （必需）  <span class="token comment">#必须有</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> chart名称 （必需）     <span class="token comment"># 必须有 </span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> 语义化2 版本（必需） <span class="token comment"># 必须有</span>

<span class="token key atrule">kubeVersion</span><span class="token punctuation">:</span> 兼容Kubernetes版本的语义化版本（可选）
<span class="token key atrule">description</span><span class="token punctuation">:</span> 一句话对这个项目的描述（可选）
<span class="token key atrule">type</span><span class="token punctuation">:</span> chart类型 （可选）
<span class="token key atrule">keywords</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> 关于项目的一组关键字（可选）
<span class="token key atrule">home</span><span class="token punctuation">:</span> 项目home页面的URL （可选）
<span class="token key atrule">sources</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> 项目源码的URL列表（可选）
<span class="token key atrule">dependencies</span><span class="token punctuation">:</span> <span class="token comment"># chart 必要条件列表 （可选）</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> chart名称 (nginx)
    <span class="token key atrule">version</span><span class="token punctuation">:</span> chart版本 (&quot;1.2.3&quot;)
    <span class="token key atrule">repository</span><span class="token punctuation">:</span> （可选）仓库URL (&quot;https<span class="token punctuation">:</span>//example.com/charts&quot;) 或别名 (&quot;@repo<span class="token punctuation">-</span>name&quot;)
    <span class="token key atrule">condition</span><span class="token punctuation">:</span> （可选） 解析为布尔值的yaml路径，用于启用/禁用chart (e.g. subchart1.enabled )
    <span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token comment"># （可选）</span>
      <span class="token punctuation">-</span> 用于一次启用/禁用 一组chart的tag
    <span class="token key atrule">import-values</span><span class="token punctuation">:</span> <span class="token comment"># （可选）</span>
      <span class="token punctuation">-</span> ImportValue 保存源值到导入父键的映射。每项可以是字符串或者一对子/父列表项
    <span class="token key atrule">alias</span><span class="token punctuation">:</span> （可选） chart中使用的别名。当你要多次添加相同的chart时会很有用

<span class="token key atrule">maintainers</span><span class="token punctuation">:</span> <span class="token comment"># （可选） # 可能用到</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 维护者名字 （每个维护者都需要）
    <span class="token key atrule">email</span><span class="token punctuation">:</span> 维护者邮箱 （每个维护者可选）
    <span class="token key atrule">url</span><span class="token punctuation">:</span> 维护者URL （每个维护者可选）

<span class="token key atrule">icon</span><span class="token punctuation">:</span> 用做icon的SVG或PNG图片URL （可选）
<span class="token key atrule">appVersion</span><span class="token punctuation">:</span> 包含的应用版本（可选）。不需要是语义化，建议使用引号
<span class="token key atrule">deprecated</span><span class="token punctuation">:</span> 不被推荐的chart （可选，布尔值）
<span class="token key atrule">annotations</span><span class="token punctuation">:</span>
  <span class="token key atrule">example</span><span class="token punctuation">:</span> 按名称输入的批注列表 （可选）.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-打包chart" tabindex="-1"><a class="header-anchor" href="#_4-4-打包chart" aria-hidden="true">#</a> 4.4 打包Chart</h3><p>使用helm package命令将Chart打包为一个tarball文件，例如在wordpress目录中使用helm package命令将Chart打包为一个tarball文件，这将生成一个名为<code>wordpress-0.1.0.tgz</code>的<code>tarball</code>文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>helm package wordpress/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-5-发布chart" tabindex="-1"><a class="header-anchor" href="#_4-5-发布chart" aria-hidden="true">#</a> 4.5 发布Chart</h3><p>将打包好的Chart发布到一个Helm Repository中。可以使用 helm repo add 命令添加一个Repository，然后使用helm push命令将Chart推送到Repository中，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>helm repo <span class="token function">add</span> myrepo https://example.com/chartshelm push wordpress-0.1.0.tgz myrepo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-6-安装release" tabindex="-1"><a class="header-anchor" href="#_4-6-安装release" aria-hidden="true">#</a> 4.6 安装Release</h2><p>使用helm install命令安装Chart的Release，可以通过命令行选项或指定values.yaml文件来配置Release，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>helm <span class="token function">install</span> mywordpress myrepo/wordpress
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将在<code>Kubernetes</code>集群中创建一个名为<code>mywordpress</code>的<code>Release</code>，包含<code>WordPress</code>应用程序和<code>MySQL</code>数据库。</p><h3 id="_4-7-管理release" tabindex="-1"><a class="header-anchor" href="#_4-7-管理release" aria-hidden="true">#</a> 4.7 管理Release</h3><p>使用helm ls命令查看当前运行的Release列表，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 升级 \`mywordpress\` 的\`WordPress\`应用程序镜像版本为\`5.7.3-php8.0-fpm-alpine\`。</span>
helm upgrade mywordpress myrepo/wordpress <span class="token parameter variable">--set</span> <span class="token assign-left variable">image.tag</span><span class="token operator">=</span><span class="token number">5.7</span>.3-php8.0-fpm-alpine
<span class="token comment">## 可以使用\`helm rollback\`命令回滚到先前版本</span>
helm rollback mywordpress <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8-更新chart" tabindex="-1"><a class="header-anchor" href="#_4-8-更新chart" aria-hidden="true">#</a> 4.8 更新Chart</h3><p>在应用程序更新时，可以更新Chart配置文件和模板，并使用helm package命令重新打包Chart。然后可以使用helm upgrade命令升级已安装的Release，可以按照以下步骤更新Chart：</p><ol><li>在本地编辑Chart配置或添加新的依赖项；</li><li>使用helm package命令打包新的Chart版本；</li><li>使用helm push命令将新的Chart版本推送到Repository中；</li><li>使用helm repo update命令更新本地或远程的Helm Repository；</li><li>使用helm upgrade命令升级现有Release到新的Chart版本。</li></ol><p>例如，可以使用以下命令更新WordPress的Chart版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 这将升级mywordpress的Chart版本到0.2.0，其中包括新的配置和依赖项。</span>
helm upgrade mywordpress myrepo/wordpress <span class="token parameter variable">--version</span> <span class="token number">0.2</span>.0

<span class="token comment">## 如果需要删除一个Release，可以使用helm uninstall命令。</span>
helm uninstall mywordpress

<span class="token comment">## 如果需要删除与Release相关的PersistentVolumeClaim，可以使用helm uninstall命令的--delete-data选项，例如：</span>
helm uninstall mywordpress --delete-data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、helm的执行安装顺序" tabindex="-1"><a class="header-anchor" href="#五、helm的执行安装顺序" aria-hidden="true">#</a> 五、Helm的执行安装顺序</h2><p>Helm按照以下顺序安装资源：</p><ul><li>Namespace</li><li>NetworkPolicy</li><li>ResourceQuota</li><li>LimitRange</li><li>PodSecurityPolicy</li><li>PodDisruptionBudget</li><li>ServiceAccount</li><li>Secret</li><li>SecretList</li><li>ConfigMap</li><li>StorageClass</li><li>PersistentVolume</li><li>PersistentVolumeClaim</li><li>CustomResourceDefinition</li><li>ClusterRole</li><li>ClusterRoleList</li><li>ClusterRoleBinding</li><li>ClusterRoleBindingList</li><li>Role</li><li>RoleList</li><li>RoleBinding</li><li>RoleBindingList</li><li>Service</li><li>DaemonSet</li><li>Pod</li><li>ReplicationController</li><li>ReplicaSet</li><li>Deployment</li><li>HorizontalPodAutoscaler</li><li>StatefulSet</li><li>Job</li><li>CronJob</li><li>Ingress</li><li>APIService</li></ul><p>Helm 客户端不会等到所有资源都运行才退出，可以使用 helm status 来追踪 release 的状态，或是重新读取配置信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>helm status mynginx
<span class="token comment">## NAME: mynginx</span>
<span class="token comment">## LAST DEPLOYED: Fri Oct 29 14:27:32 2021</span>
<span class="token comment">## NAMESPACE: default</span>
<span class="token comment">## STATUS: deployed</span>
<span class="token comment">## REVISION: 1</span>
<span class="token comment">## TEST SUITE: None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="helm-安装" tabindex="-1"><a class="header-anchor" href="#helm-安装" aria-hidden="true">#</a> Helm 安装</h2>`,30),R={href:"https://github.com/helm/helm/releases",target:"_blank",rel:"noopener noreferrer"},w=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## Helm V3</span>
<span class="token comment">## 在 &lt;https://github.com/helm/helm/releases&gt; 找到对应系统的二进制包下载，比如下载v3.0.0-beta.3 的 linux amd64 版:</span>
<span class="token function">wget</span> https://get.helm.sh/helm-v3.11.1-linux-amd64.tar.gz
<span class="token comment">## 查看 helm 版本</span>
helm version

<span class="token comment">## Helm V2</span>
<span class="token comment"># curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="helm-仓库" tabindex="-1"><a class="header-anchor" href="#helm-仓库" aria-hidden="true">#</a> Helm 仓库</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 查看当前仓库</span>
helm repo list
<span class="token comment">## 增加仓库</span>
helm repo <span class="token function">add</span> stable http://mirror.azure.cn/kubernetes/charts
helm repo <span class="token function">add</span> bitnami https://charts.bitnami.com/bitnami
<span class="token comment">## 跳过ssl证书认证</span>
helm repo <span class="token function">add</span> --insecure-skip-tls-verify <span class="token parameter variable">--username</span><span class="token operator">=</span><span class="token string">&#39;admin&#39;</span> <span class="token parameter variable">--password</span><span class="token operator">=</span><span class="token number">12345</span> devops https://docker.devops.tr/chartrepo/bedrock 
<span class="token comment">## 指定ca.crt证书</span>
helm repo <span class="token function">add</span> --ca-file ca.crt <span class="token parameter variable">--username</span><span class="token operator">=</span>admin <span class="token parameter variable">--password</span><span class="token operator">=</span><span class="token number">123456</span> library https://docker.devops.kk/chartrepo/library
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="helm-查找" tabindex="-1"><a class="header-anchor" href="#helm-查找" aria-hidden="true">#</a> Helm 查找</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 查询 bitnami 下的 charts</span>
helm search repo bitnami
<span class="token comment">## 搜索 harbor 应用</span>
helm search repo harbor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="helm-部署" tabindex="-1"><a class="header-anchor" href="#helm-部署" aria-hidden="true">#</a> Helm 部署</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 下载远程仓库jenkins应用到本地</span>
helm pull bitnami/harbor

<span class="token comment">## 部署 bitnami/harbor 应用</span>
helm <span class="token function">install</span> <span class="token parameter variable">--name</span> harbor bitnami/harbor <span class="token parameter variable">--namespace</span><span class="token operator">=</span>harbor --create-namespace
<span class="token comment">## 查看应用状态</span>
helm status harbor

<span class="token comment">## 列出已部署的应用</span>
helm list
<span class="token comment">## 删除应用版本</span>
helm uninstall harbor
<span class="token comment">## 列出已删除的应用版本</span>
helm <span class="token function">ls</span> <span class="token parameter variable">--deleted</span>

<span class="token comment">## 列出历史版本</span>
helm <span class="token function">history</span> harbor
<span class="token comment">## 回退上一个版本</span>
helm rollback harbor <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="helm-应用" tabindex="-1"><a class="header-anchor" href="#helm-应用" aria-hidden="true">#</a> Helm 应用</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>helm repo <span class="token function">add</span> devops https://docker.devops.kk <span class="token parameter variable">--username</span> admin <span class="token parameter variable">--password</span> Harbor12345
<span class="token comment">## 创建一个名为mychart的chart</span>
helm create mychart
<span class="token comment">## 打包chart</span>
helm package mychart/
<span class="token comment">## 上传chart</span>
helm registry login docker.devops.kk <span class="token parameter variable">--insecure</span> <span class="token parameter variable">--username</span> admin <span class="token parameter variable">--password</span> Harbor12345 --ca-file ca.crt 
helm push blog-docs-0.2.0.tgz oci://docker.devops.kk/chartrepo/bedrock --ca-file ca.crt 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function S(V,P){const s=r("router-link"),i=r("ExternalLinkIcon");return o(),d("div",null,[p(" more "),e("nav",u,[e("ul",null,[e("li",null,[n(s,{to:"#helm-介绍"},{default:l(()=>[a("Helm 介绍")]),_:1})]),e("li",null,[n(s,{to:"#一、前言"},{default:l(()=>[a("一、前言")]),_:1})]),e("li",null,[n(s,{to:"#二、helm工作流程"},{default:l(()=>[a("二、Helm工作流程")]),_:1})]),e("li",null,[n(s,{to:"#三、helm概念"},{default:l(()=>[a("三、Helm概念")]),_:1})]),e("li",null,[n(s,{to:"#四、helm的使用"},{default:l(()=>[a("四、Helm的使用")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#_4-1-安装helm"},{default:l(()=>[a("4.1 安装Helm")]),_:1})]),e("li",null,[n(s,{to:"#_4-2-创建chart"},{default:l(()=>[a("4.2 创建Chart")]),_:1})]),e("li",null,[n(s,{to:"#_4-3-配置chart"},{default:l(()=>[a("4.3 配置Chart")]),_:1})]),e("li",null,[n(s,{to:"#_4-4-打包chart"},{default:l(()=>[a("4.4 打包Chart")]),_:1})]),e("li",null,[n(s,{to:"#_4-5-发布chart"},{default:l(()=>[a("4.5 发布Chart")]),_:1})])])]),e("li",null,[n(s,{to:"#_4-6-安装release"},{default:l(()=>[a("4.6 安装Release")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#_4-7-管理release"},{default:l(()=>[a("4.7 管理Release")]),_:1})]),e("li",null,[n(s,{to:"#_4-8-更新chart"},{default:l(()=>[a("4.8 更新Chart")]),_:1})])])]),e("li",null,[n(s,{to:"#五、helm的执行安装顺序"},{default:l(()=>[a("五、Helm的执行安装顺序")]),_:1})]),e("li",null,[n(s,{to:"#helm-安装"},{default:l(()=>[a("Helm 安装")]),_:1})]),e("li",null,[n(s,{to:"#helm-仓库"},{default:l(()=>[a("Helm 仓库")]),_:1})]),e("li",null,[n(s,{to:"#helm-查找"},{default:l(()=>[a("Helm 查找")]),_:1})]),e("li",null,[n(s,{to:"#helm-部署"},{default:l(()=>[a("Helm 部署")]),_:1})]),e("li",null,[n(s,{to:"#helm-应用"},{default:l(()=>[a("Helm 应用")]),_:1})])])]),h,e("ul",null,[v,e("li",null,[a("官网地址："),e("a",b,[a("https://helm.sh/zh/"),n(i)])]),e("li",null,[k,a("广场："),e("a",g,[a("https://artifacthub.io/"),n(i)])])]),_,f,e("p",null,[a("这个时候，如果一键部署所有应用，使用 Helm （"),e("a",y,[a("https://helm.sh）是一个很不错的选择，它具备如下的能力："),n(i)])]),H,e("p",null,[a("首先需要在本地机器或Kubernetes集群上安装Helm。可以从Helm官方网站下载适合自己平台的二进制文件，或使用包管理器安装Helm，安装教程参考 "),e("a",C,[a("https://helm.sh"),n(i)]),a(" 。")]),x,e("blockquote",null,[e("p",null,[a("下载地址："),e("a",R,[a("https://github.com/helm/helm/releases"),n(i)])])]),w])}const N=c(m,[["render",S],["__file","30.helm打包工具.html.vue"]]);export{N as default};
