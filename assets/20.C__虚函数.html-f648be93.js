const e=JSON.parse('{"key":"v-28629c6c","path":"/30.%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/50.C__/20.C__%E8%99%9A%E5%87%BD%E6%95%B0.html","title":"C++虚函数","lang":"zh-CN","frontmatter":{"title":"C++虚函数","date":"2023-05-14T00:00:00.000Z","category":["编程技巧","C++"],"tag":["C++"],"description":"C++ 虚函数 C++的虚函数是一种特殊的成员函数，可以在派生类中被重写。 虚函数的作用是实现多态性，当我们使用基类指针或引用来调用虚函数时，程序会根据实际的对象类型来调用相应的派生类函数。 我们可以将一个成员函数声明为虚函数，只需要在函数声明前加上关键字 virtual 即可。比如这样： class Base { public: virtual void func() { // ... } }; class Derived : public Base { public: void func() override { // ... } };","head":[["meta",{"property":"og:url","content":"https://haijunit.top/30.%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/50.C__/20.C__%E8%99%9A%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"C++虚函数"}],["meta",{"property":"og:description","content":"C++ 虚函数 C++的虚函数是一种特殊的成员函数，可以在派生类中被重写。 虚函数的作用是实现多态性，当我们使用基类指针或引用来调用虚函数时，程序会根据实际的对象类型来调用相应的派生类函数。 我们可以将一个成员函数声明为虚函数，只需要在函数声明前加上关键字 virtual 即可。比如这样： class Base { public: virtual void func() { // ... } }; class Derived : public Base { public: void func() override { // ... } };"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-23T07:13:54.000Z"}],["meta",{"property":"article:author","content":"知识库"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2023-05-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-23T07:13:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++虚函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-23T07:13:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"知识库\\",\\"url\\":\\"https://haijunit.top\\",\\"email\\":\\"zhanghaijun_java@163.com\\"}]}"]]},"headers":[{"level":2,"title":"C++ 虚函数","slug":"c-虚函数","link":"#c-虚函数","children":[]},{"level":2,"title":"C++ 虚函数案例","slug":"c-虚函数案例","link":"#c-虚函数案例","children":[]},{"level":2,"title":"C++ 虚函数注意事项","slug":"c-虚函数注意事项","link":"#c-虚函数注意事项","children":[]}],"git":{"createdTime":1684826034000,"updatedTime":1684826034000,"contributors":[{"name":"zhanghaijun","email":"zhanghaijun@bjtxra.com","commits":1}]},"readingTime":{"minutes":2.02,"words":607},"filePathRelative":"30.编程技巧/50.C++/20.C++虚函数.md","localizedDate":"2023年5月14日","excerpt":"<h2> C++ 虚函数</h2>\\n<blockquote>\\n<p>C++的虚函数是一种特殊的成员函数，可以在派生类中被重写。</p>\\n<p>虚函数的作用是实现多态性，当我们使用基类指针或引用来调用虚函数时，程序会根据实际的对象类型来调用相应的派生类函数。</p>\\n<p>我们可以将一个成员函数声明为虚函数，只需要在函数声明前加上关键字 virtual 即可。比如这样：</p>\\n</blockquote>\\n<div class=\\"language-c++ line-numbers-mode\\" data-ext=\\"c++\\"><pre class=\\"language-c++\\"><code>class Base {\\npublic:\\n    virtual void func() {\\n        // ...\\n    }\\n};\\n\\nclass Derived : public Base {\\npublic:\\n    void func() override {\\n        // ...\\n    }\\n};\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
