import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o,c as p,a as e,b as a,d as i,f as r}from"./app-d6438571.js";const c={},l=r(`<h3 id="一、portainer是什么" tabindex="-1"><a class="header-anchor" href="#一、portainer是什么" aria-hidden="true">#</a> 一、Portainer是什么？</h3><p>Portainer是一款开源的容器管理平台，支持多种容器技术，如Docker、Kubernetes和Swarm等。它提供了一个易于使用的Web UI界面，可用于管理和监控容器和集群。Portainer旨在使容器管理更加简单和可视化，并且它适用于各种规模的容器环境，从个人计算机到企业级部署，而且能够一次性管理多种类型的多个集群。</p><p>Portainer主张让容器管理变得更加简单，所以它的界面更加人性化，操作不复杂，即便非专业性非常强的人员，也能够很快掌握基本的管理能力。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7XncZnQvQOibn7hR6KXY5Ljkmiaic7QT1E41MBYibrHUWJEpAiaNuUdibpPVQ/640?wx_fmt=other&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>Portainer分为企业版<strong>Portainer Business Edition</strong>和社区版<strong>Portainer Community Edition</strong>。<strong>Portainer Business Edition</strong>建立在开源版本的基础上，包括一系列专门针对业务用户需求的高级特性和功能（如 RBAC等）。</p><p>社区版本的功能已经非常强大了，满足一般的集群管理完全没有问题，本文的安装和演示都基于社区版本来。</p><h3 id="二、portainer功能介绍" tabindex="-1"><a class="header-anchor" href="#二、portainer功能介绍" aria-hidden="true">#</a> 二、portainer功能介绍</h3><p>Portainer提供了丰富的功能，包括但不限于：</p><ol><li>集群管理：支持kubernetes、docker swarm等各类集群，能够非常清楚展示各集群的节点、服务等情况，支持多类集群，集群信息可视化。</li><li>容器管理：通过Portainer可以轻松地创建、删除、启动、停止和重启容器，还可以查看容器的日志和详细信息。</li><li>镜像管理：Portainer提供了镜像管理功能，可以管理本地和远程仓库中的镜像，还可以拉取、推送和删除镜像。</li><li>仓库管理：Portainer支持Docker Hub、Docker Registry和Harbor等多个仓库，并提供了仓库管理功能。</li><li>用户和团队管理：Portainer支持创建用户和团队，并分配不同的权限和角色。</li><li>仪表盘和监控：Portainer提供了仪表盘和监控功能，可以轻松地查看容器运行状态、资源使用情况、日志等信息。</li><li>插件和扩展：Portainer支持插件和扩展，可以通过它们扩展和定制Portainer的功能，例如，Portainer提供了Kubernetes插件，可以将Portainer与Kubernetes集成，从而管理Kubernetes集群。</li><li>存储管理：支持存储卷的查询、增加和删除，非常方便。</li><li>安全支持：Portainer提供了许多安全性特性，例如基于角色的访问控制、多租户支持、LDAP集成等，使得用户可以安全地管理和监控容器和集群。</li></ol><h3 id="三、portainer核心设计" tabindex="-1"><a class="header-anchor" href="#三、portainer核心设计" aria-hidden="true">#</a> 三、portainer核心设计</h3><p>Portainer集群由两个部分组成:Portainer Server 和 Portainer Agent。两者都可以在现有的容器化基础设施上作为轻量级容器运行。</p><p>Portainer Agent部署在集群中的每个节点,并配置为向 Portainer Server报告数据，单个 Portainer Server将接受来自任意数量的 Portainer Agent的连接,从而提供从一个集中式界面管理多个集群的能力。为此,Portainer Server 容器需要数据持久性，其默认使用sqllite数据，也支持自定义其他类型的数据库。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_jpg/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7d9PFufSBAXKl1Y1LFdWZDWmb66NtTe3Eas7ILiaNAPiafg0sEaX2q1Ug/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>Portainer Agent是一个非常重要的组件，它负责与Docker引擎、kubelet通信，并收集和传递容器和镜像等信息，从而实现了Portainer对Docker和kubernetes的管理和监控。</p><p>Portainer Server内置了Portainer API和Portainer UI。Portainer API作为核心的业务逻辑处理单元，为用户提供了RESTful API接口，实现了用户权限管理、容器编排、镜像管理、网络管理等功能。Portainer UI则提供了Web界面，方便用户通过浏览器访问和管理Portainer服务。</p><p>通过部署多个Portainer Server可以实现Portainer Server集群的高可用。Portainer Agent可以配置连接多个Portainer Server，通过<code>--host</code>指定多个Portainer Server，在这种情况下，Portainer Agent会将数据同时同步到多个Portainer Server,数据发送之前会进行去重，Server端也会根据数据ID进行去重处理。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">agent</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> portainer/agent
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>host=hostname_or_ip <span class="token punctuation">-</span><span class="token punctuation">-</span>port=9000 <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>tls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个Portainer Server可以配置使用同一个数据库，在配置文件中指定数据库的类型、地址、端口、数据库名称、用户名和密码等参数即可，以下是Docker Compose配置文件示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">portainer</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> portainer/portainer<span class="token punctuation">-</span>ce
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;DB_TYPE=mysql&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;DB_HOST=your_database_host&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;DB_PORT=3306&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;DB_NAME=your_database_name&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;DB_USERNAME=your_database_username&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;DB_PASSWORD=your_database_password&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说，portainer的核心设计使得集群的架构和部署都比较简单。</p><h3 id="四、portainer安装和部署" tabindex="-1"><a class="header-anchor" href="#四、portainer安装和部署" aria-hidden="true">#</a> 四、portainer安装和部署</h3><p>portainer的安装非常简单，可以直接通过docker容器快速部署，支持在Linux或Windows服务器上本地安装,如下：</p><ol><li><p>使用docker stack安装portainer</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>docker@node1 ~<span class="token punctuation">]</span>$ <span class="token function">docker</span> stack deploy <span class="token parameter variable">-c</span> portainer-agent-stack.yml portainer
Creating network portainer_agent_network
Creating <span class="token function">service</span> portainer_agent
Creating <span class="token function">service</span> portainer_portainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询portainer容器</p><blockquote><p>安装完成以后，使用<code>docker ps</code>应该能查看到portainer容器</p><p>启动以后开放了9443作为web端口访问，在浏览器中输入<code>http://{IP}:9443</code>即可访问portainer页面，在未设置密码之前，首先会进入密码设置页</p></blockquote><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7pibsDph0V228RVvEBibjbrWoYvrlL032QnIsVpfnzErOLyadliajG9vfA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><blockquote><p>创建账号密码登录以后，进入首页，会显示所有的环境Environments，如下图，我本地安装了一个docker swarm，一个manager节点和一个worker节点。</p></blockquote><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7FicVkXjiatGDexcHveK7NTPnFYf5ic9ZdHsVTxxibqgoI3MworQ9fDK2wQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure></li></ol><h3 id="五、portainer的使用介绍" tabindex="-1"><a class="header-anchor" href="#五、portainer的使用介绍" aria-hidden="true">#</a> 五、portainer的使用介绍</h3><p>下面一起来体验一下portainer的主要功能：包括Dashboard仪表板、容器管理、镜像管理、Service管理、Volumes管理、用户和团队管理。这里以docker集群的管理为例，如果你连接的是kubernetes集群，那么会有kubernetes集群的相关功能。</p><h4 id="_5-1、dashboard仪表板" tabindex="-1"><a class="header-anchor" href="#_5-1、dashboard仪表板" aria-hidden="true">#</a> 5.1、Dashboard仪表板</h4><p>清晰简洁地展示集群的相关信息，以及集群内关键资源的分布情况，如Stack、Service、Container、Image、Volume、Network、GPU等。</p><p>能让你快速对所管理的集群有一个大概的掌握。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7A6zCSDPjsY6gZKGvTCM2Q61BWOcl4icvPEHO61ocRHuFCicPyepGHmYg/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h4 id="_5-2、swarm集群管理" tabindex="-1"><a class="header-anchor" href="#_5-2、swarm集群管理" aria-hidden="true">#</a> 5.2、Swarm集群管理</h4><p>有专门针对Swarm集群的面板，笔者本地就是搭建了一个简单的2个节点的swarm集群（一个manager和一个worker），如下图可以看到清楚列出了swarm集群节点、cpu、内存等相关信息，节点的类型、IP地址、运行状态等也展示了出来。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7vOko9DfjUFtQEAbUjT0gEwL2uXQMTyhtZzIs7f05Pz3PB3U5lkpfsw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>除此之外，通过&quot;cluster visualizer&quot;还可以以可视化的形式进行展示：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7dHiaibTUEiao5hjgiaJiaYlxsRmHXFTJWkT9ibNZBtgIc08OlNe3XkQQiaQxA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h4 id="_5-3、容器管理" tabindex="-1"><a class="header-anchor" href="#_5-3、容器管理" aria-hidden="true">#</a> 5.3、容器管理</h4><p>以容器的维度列出所管理集群下所有的容器，支持容器的创建、查询、启动、停止、删除等，所有容器的IP、状态、对应的镜像等信息也在这里展示，非常方便。</p><p>在容器的详细信息页面中，可以查看容器的日志，包括标准输出和标准错误输出。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7Xmk0mBrEe5BNrQ6B0hpEuORhia9GA3MgX7EWrFhP2R3AXWt6geZicHag/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h4 id="_5-3、镜像管理" tabindex="-1"><a class="header-anchor" href="#_5-3、镜像管理" aria-hidden="true">#</a> 5.3、镜像管理</h4><p>列出了本地所有的镜像，支持从远程仓库如DockerHub拉取镜像到本地，还支持镜像导入、查询、删除，甚至是在线构建新的镜像。</p>`,40),d={href:"http://www.w3.org/2000/svg",target:"_blank",rel:"noopener noreferrer"},m={href:"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg",target:"_blank",rel:"noopener noreferrer"},u=e("h4",{id:"_5-4、service管理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-4、service管理","aria-hidden":"true"},"#"),a(" 5.4、Service管理")],-1),g=e("p",null,"支持在线可视化进行Service创建，支持端口映射配置、replicated和global不同模式配置，比起命令行来说简单方便了不少。",-1),b={href:"http://www.w3.org/2000/svg",target:"_blank",rel:"noopener noreferrer"},h={href:"http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg",target:"_blank",rel:"noopener noreferrer"},f=r('<p>还可以实时查看service列表，查询和删除对应的service。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7cOeZHuvyS0nSRibA1tVJAicTENdSoKsV52aevGZTrticaxXib8zzHacY1A/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h4 id="_5-5、volumes管理" tabindex="-1"><a class="header-anchor" href="#_5-5、volumes管理" aria-hidden="true">#</a> 5.5、Volumes管理</h4><p>portainer支持数据卷的管理，卷的详情查看、挂载的容器、权限控制，支持卷的新建、查询和删除。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7IEascSqTP6Xq3jxBafRu4dr9Teol6jNBrWl6yWYoKtf4yu9BKJ0vicw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7bh1tnjcTqdbFGfnpCCjPYFQGAa5Q7ricOBCFESl0NiaAZ3zLPiamHsbDw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h4 id="_5-6、用户和团队管理" tabindex="-1"><a class="header-anchor" href="#_5-6、用户和团队管理" aria-hidden="true">#</a> 5.6、用户和团队管理</h4><p>在Portainer的主界面中，选择“设置”，然后选择“用户管理”或“团队管理”，可以创建和管理用户和团队，并为他们分配不同的权限和角色，其中角色权限控制是属于企业版本才有的功能。</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7ehr7hlS8uqLib0BWNKe7djXV2g6Ho5ad4QnibvP472IOU7uHt6y9teAQ/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><figure><img src="https://mmbiz.qpic.cn/mmbiz_png/2KFeibOwsJRLCzXGicAoCsNedXsJC4ZSU7IZibaiaOK7ibJQPjT7ic7hypLKcDu8mFoMcHdYD1GJLNJpyolfddSGbGog/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>总的来说，Portainer是一个功能强大的容器管理平台，通过它可以轻松地管理和监控容器集群，特别是它的部署和管理比较简单，不像很多其他的平台，本身复杂，在解决问题的情况下又引入了新的问题。无论是个人用户还是企业用户，Portainer都是一个不错的选择,特别如果是docker swarm集群配合portainer，对于中小企业来说堪称利器。</p>',11);function w(k,v){const n=s("ExternalLinkIcon");return o(),p("div",null,[l,e("p",null,[a("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='"),e("a",d,[a("http://www.w3.org/2000/svg"),i(n)]),a("' xmlns:xlink='"),e("a",m,[a("http://www.w3.org/1999/xlink'><title></title><g"),i(n)]),a(" stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)")]),u,g,e("p",null,[a("![图片](data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3Csvg width='1px' height='1px' viewBox='0 0 1 1' version='1.1' xmlns='"),e("a",b,[a("http://www.w3.org/2000/svg"),i(n)]),a("' xmlns:xlink='"),e("a",h,[a("http://www.w3.org/1999/xlink'><title></title><g"),i(n)]),a(" stroke='none' stroke-width='1' fill='none' fill-rule='evenodd' fill-opacity='0'%3E%3Cg transform='translate(-249.000000, -126.000000)' fill='%23FFFFFF'%3E%3Crect x='249' y='126' width='1' height='1'%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)")]),f])}const C=t(c,[["render",w],["__file","10.Portainer容器管理.html.vue"]]);export{C as default};
