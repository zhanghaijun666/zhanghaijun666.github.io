import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as d,c as t,e as c,a,d as n,w as s,f as o,b as l}from"./app-d6438571.js";const u={},v=a("p",null,"日常编码中，代码的命名是个大的学问。能快速的看懂开源软件的代码结构和意图，也是一项必备的能力。那它们有什么规律呢？",-1),p=a("p",null,"Java项目的代码结构，能够体现它的设计理念。Java采用长命名的方式来规范类的命名，能够自己表达它的主要意图。配合高级的IDE，可以减少编码人员的记忆负担，靠模糊的匹配就能找到自己所需要的资源。",-1),m=a("p",null,"为了让大家更好的理解命名的套路，我借鉴了最流行的Java接开源软件（spring系列，netty，libgdx，guava，logback等等），总结了10类常见的类命名。大多数是以后缀形式存在的，也有不少可以组合使用，用来表达多重的意义。",-1),h={class:"table-of-contents"},b=o(`<h2 id="管理类命名" tabindex="-1"><a class="header-anchor" href="#管理类命名" aria-hidden="true">#</a> 管理类命名</h2><blockquote><p>写代码，少不了对统一资源的管理，清晰的启动过程可以有效的组织代码。为了让程序运行起来，少不了各种资源的注册、调度，少不了公共集合资源的管理。</p></blockquote><h3 id="bootstrap-starter" tabindex="-1"><a class="header-anchor" href="#bootstrap-starter" aria-hidden="true">#</a> Bootstrap，Starter</h3><blockquote><p>一般作为程序启动器使用，或者作为启动器的基类。通俗来说，可以认为是main函数的入口。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AbstractBootstrap</span>
<span class="token class-name">ServerBootstrap</span>
<span class="token class-name">MacosXApplicationStarter</span>
<span class="token class-name">DNSTaskStarter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="processor" tabindex="-1"><a class="header-anchor" href="#processor" aria-hidden="true">#</a> Processor</h3><blockquote><p>某一类功能的处理器，用来表示某个处理过程，是一系列代码片段的集合。如果你不知道一些顺序类的代码怎么命名，就可以使用它，显得高大上一些。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CompoundProcessor</span>
<span class="token class-name">BinaryComparisonProcessor</span>
<span class="token class-name">DefaultDefaultValueProcessor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="manager" tabindex="-1"><a class="header-anchor" href="#manager" aria-hidden="true">#</a> Manager</h3><blockquote><p>对有生命状态的对象进行管理，通常作为某一类资源的管理入口。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AccountManager</span>
<span class="token class-name">DevicePolicyManager</span>
<span class="token class-name">TransactionManager</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="holder" tabindex="-1"><a class="header-anchor" href="#holder" aria-hidden="true">#</a> Holder</h3><blockquote><p>表示持有某个或者某类对象的引用，并可以对其进行统一管理。多见于不好回收的内存统一处理，或者一些全局集合容器的缓存。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">QueryHolder</span>
<span class="token class-name">InstructionHolder</span>
<span class="token class-name">ViewHolder</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="factory" tabindex="-1"><a class="header-anchor" href="#factory" aria-hidden="true">#</a> Factory</h3><blockquote><p>毫无疑问，工厂模式的命名，耳熟能详。尤其是Spring中，多不胜数。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SessionFactory</span>
<span class="token class-name">ScriptEngineFactory</span>
<span class="token class-name">LiveCaptureFactory</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="provider" tabindex="-1"><a class="header-anchor" href="#provider" aria-hidden="true">#</a> Provider</h3><blockquote><p>Provider = Strategy + Factory Method。它更高级一些，把策略模式和方法工厂揉在了一块，让人用起来很顺手。Provider一般是接口或者抽象类，以便能够完成子实现。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AccountFeatureProvider</span>
<span class="token class-name">ApplicationFeatureProviderImpl</span>
<span class="token class-name">CollatorProvider</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="registrar" tabindex="-1"><a class="header-anchor" href="#registrar" aria-hidden="true">#</a> Registrar</h3><blockquote><p>注册并管理一系列资源。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ImportServiceRegistrar</span>
<span class="token class-name">IKryoRegistrar</span>
<span class="token class-name">PipelineOptionsRegistrar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="engine" tabindex="-1"><a class="header-anchor" href="#engine" aria-hidden="true">#</a> Engine</h3><blockquote><p>一般是核心模块，用来处理一类功能。引擎是个非常高级的名词，一般的类是没有资格用它的。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ScriptEngine</span>
<span class="token class-name">DataQLScriptEngine</span>
<span class="token class-name">C2DEngine</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> Service</h3><blockquote><p>某个服务。太简单，不忍举例。范围太广，不要滥用哦。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">IntegratorServiceImpl</span>
<span class="token class-name">ISelectionService</span>
<span class="token class-name">PersistenceService</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="task" tabindex="-1"><a class="header-anchor" href="#task" aria-hidden="true">#</a> Task</h3><blockquote><p>某个任务。通常是个runnable</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">WorkflowTask</span>
<span class="token class-name">FutureTask</span>
<span class="token class-name">ForkJoinTask</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="传播类命名" tabindex="-1"><a class="header-anchor" href="#传播类命名" aria-hidden="true">#</a> 传播类命名</h2><blockquote><p>为了完成一些统计类或者全局类的功能，有些参数需要一传到底。传播类的对象就可以通过统一封装的方式进行传递，并在合适的地方进行拷贝或者更新。</p></blockquote><h3 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> Context</h3><blockquote><p>如果你的程序执行，有一些变量，需要从函数执行的入口开始，一直传到大量子函数执行完毕之后。这些变量或者集合，如果以参数的形式传递，将会让代码变得冗长无比。这个时候，你就可以把变量统一塞到Context里面，以单个对象的形式进行传递。</p></blockquote><p>在Java中，由于ThreadLocal的存在，Context甚至可以不用在参数之间进行传递。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AppContext</span>
<span class="token class-name">ServletContext</span>
<span class="token class-name">ApplicationContext</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="propagator" tabindex="-1"><a class="header-anchor" href="#propagator" aria-hidden="true">#</a> Propagator</h3><blockquote><p>传播，繁殖。用来将context中传递的值进行复制，添加，清除，重置，检索，恢复等动作。通常，它会提供一个叫做propagate的方法，实现真正的变量管理。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TextMapPropagator</span>
<span class="token class-name">FilePropagator</span>
<span class="token class-name">TransactionPropagator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="回调类命名" tabindex="-1"><a class="header-anchor" href="#回调类命名" aria-hidden="true">#</a> 回调类命名</h2><blockquote><p>使用多核可以增加程序运行的效率，不可避免的引入异步化。我们需要有一定的手段，获取异步任务执行的结果，对任务执行过程中的关键点进行检查。回调类API可以通过监听、通知等形式，获取这些事件。</p></blockquote><h3 id="handler-callback-trigger-listener" tabindex="-1"><a class="header-anchor" href="#handler-callback-trigger-listener" aria-hidden="true">#</a> Handler，Callback，Trigger，Listener</h3><blockquote><p>callback通常是一个接口，用于响应某类消息，进行后续处理；Handler通常表示持有真正消息处理逻辑的对象，它是有状态的；tigger触发器代表某类事件的处理，属于Handler，通常不会出现在类的命名中；Listener的应用更加局限，通常在观察者模式中用来表示特定的含义。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ChannelHandler</span>
<span class="token class-name">SuccessCallback</span>
<span class="token class-name">CronTrigger</span>
<span class="token class-name">EventListener</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aware" tabindex="-1"><a class="header-anchor" href="#aware" aria-hidden="true">#</a> Aware</h3><blockquote><p>Aware就是感知的意思，一般以该单词结尾的类，都实现了Aware接口。拿spring来说，Aware 的目的是为了让bean获取spring容器的服务。具体回调方法由子类实现，比如ApplicationContextAware。它有点回调的意思。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ApplicationContextAware</span>
<span class="token class-name">ApplicationStartupAware</span>
<span class="token class-name">ApplicationEventPublisherAware</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="监控类命名" tabindex="-1"><a class="header-anchor" href="#监控类命名" aria-hidden="true">#</a> 监控类命名</h2><blockquote><p>现在的程序都比较复杂，运行状态监控已经成为居家必备之良品。监控数据的收集往往需要侵入到程序的边边角角，如何有效的与正常业务进行区分，是非常有必要的。</p></blockquote><h3 id="metric" tabindex="-1"><a class="header-anchor" href="#metric" aria-hidden="true">#</a> Metric</h3><blockquote><p>表示监控数据。不要用Monitor了，比较丑。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TimelineMetric</span>
<span class="token class-name">HistogramMetric</span>
<span class="token class-name">Metric</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="estimator" tabindex="-1"><a class="header-anchor" href="#estimator" aria-hidden="true">#</a> Estimator</h3><blockquote><p>估计，统计。用于计算某一类统计数值的计算器。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConditionalDensityEstimator</span>
<span class="token class-name">FixedFrameRateEstimator</span>
<span class="token class-name">NestableLoadProfileEstimator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="accumulator" tabindex="-1"><a class="header-anchor" href="#accumulator" aria-hidden="true">#</a> Accumulator</h3><blockquote><p>累加器的意思。用来缓存累加的中间计算结果，并提供读取通道。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AbstractAccumulator</span>
<span class="token class-name">StatsAccumulator</span>
<span class="token class-name">TopFrequencyAccumulator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tracker" tabindex="-1"><a class="header-anchor" href="#tracker" aria-hidden="true">#</a> Tracker</h3><blockquote><p>一般用于记录日志或者监控值，通常用于apm中。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">VelocityTracker</span>
<span class="token class-name">RocketTracker</span>
<span class="token class-name">MediaTracker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内存管理类命名" tabindex="-1"><a class="header-anchor" href="#内存管理类命名" aria-hidden="true">#</a> 内存管理类命名</h2><blockquote><p>如果你的应用用到了自定义的内存管理，那么下面这些名词是绕不开的。比如Netty，就实现了自己的内存管理机制。</p></blockquote><h3 id="allocator" tabindex="-1"><a class="header-anchor" href="#allocator" aria-hidden="true">#</a> Allocator</h3><blockquote><p>与存储相关，通常表示内存分配器或者管理器。如果你得程序需要申请有规律得大块内存，allocator是你得不二选择。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AbstractByteBufAllocator</span>
<span class="token class-name">ArrayAllocator</span>
<span class="token class-name">RecyclingIntBlockAllocator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="chunk" tabindex="-1"><a class="header-anchor" href="#chunk" aria-hidden="true">#</a> Chunk</h3><blockquote><p>表示一块内存。如果你想要对一类存储资源进行抽象，并统一管理，可以采用它。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">EncryptedChunk</span>
<span class="token class-name">ChunkFactory</span>
<span class="token class-name">MultiChunk</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arena" tabindex="-1"><a class="header-anchor" href="#arena" aria-hidden="true">#</a> Arena</h3><blockquote><p>英文是舞台、竞技场的意思。由于Linux把它用在内存管理上发扬光大，它普遍用于各种存储资源的申请、释放与管理。为不同规格的存储chunk提供舞台，好像也是非常形象的表示。</p></blockquote><p>关键是，这个词很美，作为后缀让类名显得很漂亮。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BookingArena</span>
<span class="token class-name">StandaloneArena</span>
<span class="token class-name">PoolArena</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pool" tabindex="-1"><a class="header-anchor" href="#pool" aria-hidden="true">#</a> Pool</h3><blockquote><p>表示池子。内存池，线程池，连接池，池池可用。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ConnectionPool</span>
<span class="token class-name">ObjectPool</span>
<span class="token class-name">MemoryPool</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="过滤检测类命名" tabindex="-1"><a class="header-anchor" href="#过滤检测类命名" aria-hidden="true">#</a> 过滤检测类命名</h2><blockquote><p>程序收到的事件和信息是非常多的，有些是合法的，有些需要过滤扔掉。根据不同的使用范围和功能性差别，过滤操作也有多种形式。你会在框架类代码中发现大量这样的名词。</p></blockquote><h3 id="pipeline-chain" tabindex="-1"><a class="header-anchor" href="#pipeline-chain" aria-hidden="true">#</a> Pipeline，Chain</h3><blockquote><p>一般用在责任链模式中。Netty，Spring MVC，Tomcat等都有大量应用。通过将某个处理过程加入到责任链的某个位置中，就可以接收前面处理过程的结果，强制添加或者改变某些功能。就像Linux的管道操作一样，最终构造出想要的结果。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pipeline</span>
<span class="token class-name">ChildPipeline</span>
<span class="token class-name">DefaultResourceTransformerChain</span>
<span class="token class-name">FilterChain</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> Filter</h3><blockquote><p>过滤器，用来筛选某些满足条件的数据集，或者在满足某些条件的时候执行一部分逻辑。如果和责任链连接起来，则通常能够实现多级的过滤。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FilenameFilter</span>
<span class="token class-name">AfterFirstEventTimeFilter</span>
<span class="token class-name">ScanFilter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="interceptor" tabindex="-1"><a class="header-anchor" href="#interceptor" aria-hidden="true">#</a> Interceptor</h3><blockquote><p>拦截器，其实和Filter差不多。不过在Tomcat中，Interceptor可以拿到controller对象，但filter不行。拦截器是被包裹在过滤器中。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HttpRequestInterceptor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="evaluator" tabindex="-1"><a class="header-anchor" href="#evaluator" aria-hidden="true">#</a> Evaluator</h3><blockquote><p>英文里是评估器的意思。可用于判断某些条件是否成立，一般内部方法<code>evaluate</code>会返回bool类型。比如你传递进去一个非常复杂的对象，或者字符串，进行正确与否的判断。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ScriptEvaluator</span>
<span class="token class-name">SubtractionExpressionEvaluator</span>
<span class="token class-name">StreamEvaluator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="detector" tabindex="-1"><a class="header-anchor" href="#detector" aria-hidden="true">#</a> Detector</h3><blockquote><p>探测器。用来管理一系列探测性事件，并在发生的时候能够进行捕获和响应。比如Android的手势检测，温度检测等。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">FileHandlerReloadingDetector</span>
<span class="token class-name">TransformGestureDetector</span> 
<span class="token class-name">ScaleGestureDetector</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结构类命名" tabindex="-1"><a class="header-anchor" href="#结构类命名" aria-hidden="true">#</a> 结构类命名</h2><blockquote><p>除了基本的数据结构，如数组、链表、队列、栈等，其他更高一层的常见抽象类，能够大量减少大家的交流，并能封装常见的变化。</p></blockquote><h3 id="cache" tabindex="-1"><a class="header-anchor" href="#cache" aria-hidden="true">#</a> Cache</h3><p>这个没啥好说的，就是缓存。大块的缓存。常见的缓存算法有LRU、LFU、FIFO等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LoadingCache</span>
<span class="token class-name">EhCacheCache</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> Buffer</h3><blockquote><p>buffer是缓冲，不同于缓存，它一般用在数据写入阶段。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span>
<span class="token class-name">RingBuffer</span>
<span class="token class-name">DirectByteBuffer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="composite" tabindex="-1"><a class="header-anchor" href="#composite" aria-hidden="true">#</a> Composite</h3><blockquote><p>将相似的组件进行组合，并以相同的接口或者功能进行暴露，使用者不知道这到底是一个组合体还是其他个体。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CompositeData</span>
<span class="token class-name">CompositeMap</span>
<span class="token class-name">ScrolledComposite</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wrapper" tabindex="-1"><a class="header-anchor" href="#wrapper" aria-hidden="true">#</a> Wrapper</h3><blockquote><p>用来包装某个对象，做一些额外的处理，以便增加或者去掉某些功能。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">IsoBufferWrapper</span>
<span class="token class-name">ResponseWrapper</span>
<span class="token class-name">MavenWrapperDownloader</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="option-param-attribute" tabindex="-1"><a class="header-anchor" href="#option-param-attribute" aria-hidden="true">#</a> Option, Param,Attribute</h3><blockquote><p>用来表示配置信息。说实话，它和Properties的区别并不大，但由于Option通常是一个类，所以功能可以扩展的更强大一些。它通常比Config的级别更小，关注的也是单个属性的值。Param一般是作为参数存在，对象生成的速度要快一些。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SpecificationOption</span>
<span class="token class-name">SelectOption</span>
<span class="token class-name">AlarmParam</span>
<span class="token class-name">ModelParam</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tuple" tabindex="-1"><a class="header-anchor" href="#tuple" aria-hidden="true">#</a> Tuple</h3><blockquote><p>元组的概念。由于Java中缺乏元组结构，我们通常会自定义这样的类。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Tuple2</span>
<span class="token class-name">Tuple3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aggregator" tabindex="-1"><a class="header-anchor" href="#aggregator" aria-hidden="true">#</a> Aggregator</h3><blockquote><p>聚合器，可以做一些聚合计算。比如分库分表中的sum，max，min等聚合函数的汇集。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimalMaxAggregator</span>
<span class="token class-name">PipelineAggregator</span>
<span class="token class-name">TotalAggregator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iterator" tabindex="-1"><a class="header-anchor" href="#iterator" aria-hidden="true">#</a> Iterator</h3><blockquote><p>迭代器。可以实现Java的迭代器接口，也可以有自己的迭代方式。在数据集很大的时候，需要进行深度遍历，迭代器可以说是必备的。使用迭代器还可以在迭代过程中安全的删除某些元素。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BreakIterator</span>
<span class="token class-name">StringCharacterIterator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="batch" tabindex="-1"><a class="header-anchor" href="#batch" aria-hidden="true">#</a> Batch</h3><blockquote><p>某些可以批量执行的请求或者对象。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SavedObjectBatch</span>
<span class="token class-name">BatchRequest</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="limiter" tabindex="-1"><a class="header-anchor" href="#limiter" aria-hidden="true">#</a> Limiter</h3><blockquote><p>限流器，使用漏桶算法或者令牌桶来完成平滑的限流。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DefaultTimepointLimiter</span>
<span class="token class-name">RateLimiter</span>
<span class="token class-name">TimeBasedLimiter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见设计模式命名" tabindex="-1"><a class="header-anchor" href="#常见设计模式命名" aria-hidden="true">#</a> 常见设计模式命名</h2><blockquote><p>设计模式是名词的重灾区，这里只列出最常使用的几个。</p></blockquote><h3 id="strategy" tabindex="-1"><a class="header-anchor" href="#strategy" aria-hidden="true">#</a> Strategy</h3><blockquote><p>将抽象部分与它的实现部分分离，使它们都可以独立地变化。策略模式。相同接口，不同实现类，同一方法结果不同，实现策略不同。比如一个配置文件，是放在xml里，还是放在json文件里，都可以使用不同的provider去命名。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RemoteAddressStrategy</span>
<span class="token class-name">StrategyRegistration</span>
<span class="token class-name">AppStrategy</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="adapter" tabindex="-1"><a class="header-anchor" href="#adapter" aria-hidden="true">#</a> Adapter</h3><blockquote><p>将一个类的接口转换为客户希望的另一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类一起工作。</p><p>不过，相对于传统的适配器进行api转接，如果你的某个Handler里面方法特别的多，可以使用Adapter实现一些默认的方法进行0适配。那么其他类使用的时候，只需要继承Adapter，然后重写他想要重写的方法就可以了。这也是Adapter的常见用法。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ExtendedPropertiesAdapter</span>
<span class="token class-name">ArrayObjectAdapter</span>
<span class="token class-name">CardGridCursorAdapter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="action-command" tabindex="-1"><a class="header-anchor" href="#action-command" aria-hidden="true">#</a> Action，Command</h3><blockquote><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p></blockquote><p>用来表示一系列动作指令，用来实现命令模式，封装一系列动作或者功能。Action一般用在UI操作上，后端框架可以无差别的使用。</p><p>在DDD的概念中，CQRS的Command的C，既为Command。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DeleteAction</span>
<span class="token class-name">BoardCommand</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="event" tabindex="-1"><a class="header-anchor" href="#event" aria-hidden="true">#</a> Event</h3><blockquote><p>表示一系列事件。一般的，在语义上，Action，Command等，来自于主动触发；Event来自于被动触发。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObservesProtectedEvent</span>
<span class="token class-name">KeyEvent</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delegate" tabindex="-1"><a class="header-anchor" href="#delegate" aria-hidden="true">#</a> Delegate</h3><blockquote><p>代理或者委托模式。委托模式是将一件属于委托者做的事情，交给另外一个被委托者来处理。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LayoutlibDelegate</span>
<span class="token class-name">FragmentDelegate</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="builder" tabindex="-1"><a class="header-anchor" href="#builder" aria-hidden="true">#</a> Builder</h3><blockquote><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>构建者模式的标准命名。比如StringBuilder。当然StringBuffer是个另类。这也说明了，规则是人定的，人也可以破坏。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">JsonBuilder</span>
<span class="token class-name">RequestBuilder</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="template" tabindex="-1"><a class="header-anchor" href="#template" aria-hidden="true">#</a> Template</h3><blockquote><p>模板方法类的命名。定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">JDBCTemplate</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> Proxy</h3><blockquote><p>代理模式。为其他对象提供一种代理以控制对这个对象的访问。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ProxyFactory</span> 
<span class="token class-name">SlowQueryProxy</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析类命名" tabindex="-1"><a class="header-anchor" href="#解析类命名" aria-hidden="true">#</a> 解析类命名</h2><blockquote><p>写代码要涉及到大量的字符串解析、日期解析、对象转换等。根据语义和使用场合的区别，它们也分为多种。</p></blockquote><h3 id="converter-resolver" tabindex="-1"><a class="header-anchor" href="#converter-resolver" aria-hidden="true">#</a> Converter，Resolver</h3><blockquote><p>转换和解析。一般用于不同对象之间的格式转换，把一类对象转换成另一类。注意它们语义上的区别，一般特别复杂的转换或者有加载过程的需求，可以使用Resolver。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DataSetToListConverter</span>
<span class="token class-name">LayoutCommandLineConverter</span>
<span class="token class-name">InitRefResolver</span>
<span class="token class-name">MustacheViewResolver</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parser" tabindex="-1"><a class="header-anchor" href="#parser" aria-hidden="true">#</a> Parser</h3><blockquote><p>用来表示非常复杂的解析器，比如解析DSL。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SQLParser</span>
<span class="token class-name">JSONParser</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="customizer" tabindex="-1"><a class="header-anchor" href="#customizer" aria-hidden="true">#</a> Customizer</h3><blockquote><p>用来表示对某个对象进行特别的配置。由于这些配置过程特别的复杂，值得单独提取出来进行自定义设置。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ContextCustomizer</span>
<span class="token class-name">DeviceFieldCustomizer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="formatter" tabindex="-1"><a class="header-anchor" href="#formatter" aria-hidden="true">#</a> Formatter</h3><blockquote><p>格式化类。主要用于字符串、数字或者日期的格式化处理工作。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DateFormatter</span>
<span class="token class-name">StringFormatter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网络类命名" tabindex="-1"><a class="header-anchor" href="#网络类命名" aria-hidden="true">#</a> 网络类命名</h2><blockquote><p>网络编程的同学，永远绕不过去的几个名词。</p></blockquote><h3 id="packet" tabindex="-1"><a class="header-anchor" href="#packet" aria-hidden="true">#</a> Packet</h3><blockquote><p>通常用于网络编程中的数据包。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DhcpPacket</span>
<span class="token class-name">PacketBuffer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="protocol" tabindex="-1"><a class="header-anchor" href="#protocol" aria-hidden="true">#</a> Protocol</h3><blockquote><p>同样用户网络编程中，用来表示某个协议。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RedisProtocol</span>
<span class="token class-name">HttpProtocol</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="encoder、decoder、codec" tabindex="-1"><a class="header-anchor" href="#encoder、decoder、codec" aria-hidden="true">#</a> Encoder、Decoder、Codec</h3><blockquote><p>编码解码器</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RedisEncoder</span>
<span class="token class-name">RedisDecoder</span>
<span class="token class-name">RedisCodec</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="request-response" tabindex="-1"><a class="header-anchor" href="#request-response" aria-hidden="true">#</a> Request，Response</h3><blockquote><p>一般用于网络请求的进和出。如果你用在非网络请求的方法上，会显得很怪异。</p></blockquote><h2 id="crud命名" tabindex="-1"><a class="header-anchor" href="#crud命名" aria-hidden="true">#</a> CRUD命名</h2><blockquote><p>这个就有意思多了，统一的Controller，Service，Repository，没什么好说的。但你一旦用了DDD，那就得按照DDD那一套的命名来。</p><p>由于DDD不属于通用编程范畴，它的名词就不多做介绍了。</p></blockquote><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="util-helper" tabindex="-1"><a class="header-anchor" href="#util-helper" aria-hidden="true">#</a> Util，Helper</h3><blockquote><p>都表示工具类，Util一般是无状态的，Helper以便需要创建实例才能使用。但是一般没有使用Tool作为后缀的。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HttpUtil</span>
<span class="token class-name">TestKeyFieldHelper</span>
<span class="token class-name">CreationHelper</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mode-type" tabindex="-1"><a class="header-anchor" href="#mode-type" aria-hidden="true">#</a> Mode，Type</h3><blockquote><p>看到mode这个后缀，就能猜到这个类大概率是枚举。它通常把常见的可能性都列到枚举类里面，其他地方就可以引用这个Mode。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">OperationMode</span>
<span class="token class-name">BridgeMode</span>
<span class="token class-name">ActionType</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="invoker-invocation" tabindex="-1"><a class="header-anchor" href="#invoker-invocation" aria-hidden="true">#</a> Invoker，Invocation</h3><blockquote><p>invoker是一类接口，通常会以反射或者触发的方式，执行一些具体的业务逻辑。通过抽象出invoke方法，可以在invoke执行之前对入参进行记录或者处理；在invoke执行之后对结果和异常进行处理，是AOP中常见的操作方式。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MethodInvoker</span>
<span class="token class-name">Invoker</span>
<span class="token class-name">ConstructorInvocation</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="initializer" tabindex="-1"><a class="header-anchor" href="#initializer" aria-hidden="true">#</a> Initializer</h3><blockquote><p>如果你的应用程序，需要经过大量的初始化操作才能启动，那就需要把它独立出来，专门处理初始化动作。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MultiBackgroundInitialize</span>
<span class="token class-name">ApplicationContextInitializer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="feture-promise" tabindex="-1"><a class="header-anchor" href="#feture-promise" aria-hidden="true">#</a> Feture，Promise</h3><blockquote><p>它们都是用在多线程之间的，进行数据传递。</p><p>Feture相当于一个占位符，代表一个操作将来的结果。一般通过get可以直接阻塞得到结果，或者让它异步执行然后通过callback回调结果。</p><p>但如果回调中嵌入了回调呢？如果层次很深，就是回调地狱。Java中的CompletableFuture其实就是Promise，用来解决回调地狱问题。Promise是为了让代码变得优美而存在的。</p></blockquote><h3 id="selector" tabindex="-1"><a class="header-anchor" href="#selector" aria-hidden="true">#</a> Selector</h3><blockquote><p>根据一系列条件，获得相应的同类资源。它比较像Factory，但只处理单项资源。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">X509CertSelector</span>
<span class="token class-name">NodeSelector</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reporter" tabindex="-1"><a class="header-anchor" href="#reporter" aria-hidden="true">#</a> Reporter</h3><blockquote><p>用来汇报某些执行结果。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ExtentHtmlReporter</span>
<span class="token class-name">MetricReporter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constants" tabindex="-1"><a class="header-anchor" href="#constants" aria-hidden="true">#</a> Constants</h3><blockquote><p>一般用于常量列表。</p></blockquote><h3 id="accessor" tabindex="-1"><a class="header-anchor" href="#accessor" aria-hidden="true">#</a> Accessor</h3><blockquote><p>封装了一系列get和set方法的类。像lombok就有Accessors注解，生成这些方法。但Accessor类一般是要通过计算来完成get和set，而不是直接操作变量。这适合比较复杂的对象存取服务。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ComponentAccessor</span>
<span class="token class-name">StompHeaderAccessor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="generator" tabindex="-1"><a class="header-anchor" href="#generator" aria-hidden="true">#</a> Generator</h3><blockquote><p>生成器，一般用于生成代码，生成id等。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CodeGenerator</span>
<span class="token class-name">CipherKeyGenerator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> [End]</h2><blockquote><p>写代码，看源码，怎么少得了意会和神通？代码要带感，命名也风骚。命名起的好，代码会看起来很爽，大家也都喜欢。</p><p>说不清楚的事情，给一段代码，咱就能懂！就是这么神奇！</p></blockquote>`,215);function k(g,f){const e=r("router-link");return d(),t("div",null,[v,p,m,c(" more "),a("nav",h,[a("ul",null,[a("li",null,[n(e,{to:"#管理类命名"},{default:s(()=>[l("管理类命名")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#bootstrap-starter"},{default:s(()=>[l("Bootstrap，Starter")]),_:1})]),a("li",null,[n(e,{to:"#processor"},{default:s(()=>[l("Processor")]),_:1})]),a("li",null,[n(e,{to:"#manager"},{default:s(()=>[l("Manager")]),_:1})]),a("li",null,[n(e,{to:"#holder"},{default:s(()=>[l("Holder")]),_:1})]),a("li",null,[n(e,{to:"#factory"},{default:s(()=>[l("Factory")]),_:1})]),a("li",null,[n(e,{to:"#provider"},{default:s(()=>[l("Provider")]),_:1})]),a("li",null,[n(e,{to:"#registrar"},{default:s(()=>[l("Registrar")]),_:1})]),a("li",null,[n(e,{to:"#engine"},{default:s(()=>[l("Engine")]),_:1})]),a("li",null,[n(e,{to:"#service"},{default:s(()=>[l("Service")]),_:1})]),a("li",null,[n(e,{to:"#task"},{default:s(()=>[l("Task")]),_:1})])])]),a("li",null,[n(e,{to:"#传播类命名"},{default:s(()=>[l("传播类命名")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#context"},{default:s(()=>[l("Context")]),_:1})]),a("li",null,[n(e,{to:"#propagator"},{default:s(()=>[l("Propagator")]),_:1})])])]),a("li",null,[n(e,{to:"#回调类命名"},{default:s(()=>[l("回调类命名")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#handler-callback-trigger-listener"},{default:s(()=>[l("Handler，Callback，Trigger，Listener")]),_:1})]),a("li",null,[n(e,{to:"#aware"},{default:s(()=>[l("Aware")]),_:1})])])]),a("li",null,[n(e,{to:"#监控类命名"},{default:s(()=>[l("监控类命名")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#metric"},{default:s(()=>[l("Metric")]),_:1})]),a("li",null,[n(e,{to:"#estimator"},{default:s(()=>[l("Estimator")]),_:1})]),a("li",null,[n(e,{to:"#accumulator"},{default:s(()=>[l("Accumulator")]),_:1})]),a("li",null,[n(e,{to:"#tracker"},{default:s(()=>[l("Tracker")]),_:1})])])]),a("li",null,[n(e,{to:"#内存管理类命名"},{default:s(()=>[l("内存管理类命名")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#allocator"},{default:s(()=>[l("Allocator")]),_:1})]),a("li",null,[n(e,{to:"#chunk"},{default:s(()=>[l("Chunk")]),_:1})]),a("li",null,[n(e,{to:"#arena"},{default:s(()=>[l("Arena")]),_:1})]),a("li",null,[n(e,{to:"#pool"},{default:s(()=>[l("Pool")]),_:1})])])]),a("li",null,[n(e,{to:"#过滤检测类命名"},{default:s(()=>[l("过滤检测类命名")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#pipeline-chain"},{default:s(()=>[l("Pipeline，Chain")]),_:1})]),a("li",null,[n(e,{to:"#filter"},{default:s(()=>[l("Filter")]),_:1})]),a("li",null,[n(e,{to:"#interceptor"},{default:s(()=>[l("Interceptor")]),_:1})]),a("li",null,[n(e,{to:"#evaluator"},{default:s(()=>[l("Evaluator")]),_:1})]),a("li",null,[n(e,{to:"#detector"},{default:s(()=>[l("Detector")]),_:1})])])]),a("li",null,[n(e,{to:"#结构类命名"},{default:s(()=>[l("结构类命名")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#cache"},{default:s(()=>[l("Cache")]),_:1})]),a("li",null,[n(e,{to:"#buffer"},{default:s(()=>[l("Buffer")]),_:1})]),a("li",null,[n(e,{to:"#composite"},{default:s(()=>[l("Composite")]),_:1})]),a("li",null,[n(e,{to:"#wrapper"},{default:s(()=>[l("Wrapper")]),_:1})]),a("li",null,[n(e,{to:"#option-param-attribute"},{default:s(()=>[l("Option, Param,Attribute")]),_:1})]),a("li",null,[n(e,{to:"#tuple"},{default:s(()=>[l("Tuple")]),_:1})]),a("li",null,[n(e,{to:"#aggregator"},{default:s(()=>[l("Aggregator")]),_:1})]),a("li",null,[n(e,{to:"#iterator"},{default:s(()=>[l("Iterator")]),_:1})]),a("li",null,[n(e,{to:"#batch"},{default:s(()=>[l("Batch")]),_:1})]),a("li",null,[n(e,{to:"#limiter"},{default:s(()=>[l("Limiter")]),_:1})])])]),a("li",null,[n(e,{to:"#常见设计模式命名"},{default:s(()=>[l("常见设计模式命名")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#strategy"},{default:s(()=>[l("Strategy")]),_:1})]),a("li",null,[n(e,{to:"#adapter"},{default:s(()=>[l("Adapter")]),_:1})]),a("li",null,[n(e,{to:"#action-command"},{default:s(()=>[l("Action，Command")]),_:1})]),a("li",null,[n(e,{to:"#event"},{default:s(()=>[l("Event")]),_:1})]),a("li",null,[n(e,{to:"#delegate"},{default:s(()=>[l("Delegate")]),_:1})]),a("li",null,[n(e,{to:"#builder"},{default:s(()=>[l("Builder")]),_:1})]),a("li",null,[n(e,{to:"#template"},{default:s(()=>[l("Template")]),_:1})]),a("li",null,[n(e,{to:"#proxy"},{default:s(()=>[l("Proxy")]),_:1})])])]),a("li",null,[n(e,{to:"#解析类命名"},{default:s(()=>[l("解析类命名")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#converter-resolver"},{default:s(()=>[l("Converter，Resolver")]),_:1})]),a("li",null,[n(e,{to:"#parser"},{default:s(()=>[l("Parser")]),_:1})]),a("li",null,[n(e,{to:"#customizer"},{default:s(()=>[l("Customizer")]),_:1})]),a("li",null,[n(e,{to:"#formatter"},{default:s(()=>[l("Formatter")]),_:1})])])]),a("li",null,[n(e,{to:"#网络类命名"},{default:s(()=>[l("网络类命名")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#packet"},{default:s(()=>[l("Packet")]),_:1})]),a("li",null,[n(e,{to:"#protocol"},{default:s(()=>[l("Protocol")]),_:1})]),a("li",null,[n(e,{to:"#encoder、decoder、codec"},{default:s(()=>[l("Encoder、Decoder、Codec")]),_:1})]),a("li",null,[n(e,{to:"#request-response"},{default:s(()=>[l("Request，Response")]),_:1})])])]),a("li",null,[n(e,{to:"#crud命名"},{default:s(()=>[l("CRUD命名")]),_:1})]),a("li",null,[n(e,{to:"#其他"},{default:s(()=>[l("其他")]),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#util-helper"},{default:s(()=>[l("Util，Helper")]),_:1})]),a("li",null,[n(e,{to:"#mode-type"},{default:s(()=>[l("Mode，Type")]),_:1})]),a("li",null,[n(e,{to:"#invoker-invocation"},{default:s(()=>[l("Invoker，Invocation")]),_:1})]),a("li",null,[n(e,{to:"#initializer"},{default:s(()=>[l("Initializer")]),_:1})]),a("li",null,[n(e,{to:"#feture-promise"},{default:s(()=>[l("Feture，Promise")]),_:1})]),a("li",null,[n(e,{to:"#selector"},{default:s(()=>[l("Selector")]),_:1})]),a("li",null,[n(e,{to:"#reporter"},{default:s(()=>[l("Reporter")]),_:1})]),a("li",null,[n(e,{to:"#constants"},{default:s(()=>[l("Constants")]),_:1})]),a("li",null,[n(e,{to:"#accessor"},{default:s(()=>[l("Accessor")]),_:1})]),a("li",null,[n(e,{to:"#generator"},{default:s(()=>[l("Generator")]),_:1})])])]),a("li",null,[n(e,{to:"#end"},{default:s(()=>[l("[End]")]),_:1})])])]),b])}const q=i(u,[["render",k],["__file","11.JAVA代码命名规范.html.vue"]]);export{q as default};
