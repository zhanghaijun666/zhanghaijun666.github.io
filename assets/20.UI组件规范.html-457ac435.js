import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c as i,e as u,a as n,d as a,w as t,b as s,f as o}from"./app-d6438571.js";const d={},k=n("blockquote",null,[n("p",null,"组件，是前端最常打交道的东西，对于 React、Vue 等应用来说，万物皆组件毫不为过。")],-1),v={class:"table-of-contents"},m=o(`<h2 id="意识" tabindex="-1"><a class="header-anchor" href="#意识" aria-hidden="true">#</a> 意识</h2><blockquote><p>首先在意识层面，我们需要站在使用组件的开发者角度来观察这个组件，所以下面几点需要在组件开发过程中种在意识里面：</p></blockquote><ol><li><p>我应该注重 <code>TypeScript API</code> 定义，好用的组件API都应该看上去 理所应当 且 绝不多余。</p></li><li><p>我应该注重 <code>README</code> 和 <code>Mock</code> ，一个没有文档的组件 = 没有，最好不要使用 link 模式去开发组件。</p></li><li><p>我不应引入任何副作用依赖，比如全局状态（<code>Vuex</code>、<code>Redux</code>），除非他们能自我收敛。</p></li><li><p>我在开发一个开放组件，以后很有可能会有人来看我的代码，我得写好点。</p></li></ol><h2 id="接口设计" tabindex="-1"><a class="header-anchor" href="#接口设计" aria-hidden="true">#</a> 接口设计</h2><p>好的 Interface 是开发者最快能搞清楚组件入参的途径，也是让你后续开发能够有更好代码提示的前提。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type Size <span class="token operator">=</span> any<span class="token punctuation">;</span> <span class="token comment">// 😖 ❌</span>
type Size <span class="token operator">=</span> string<span class="token punctuation">;</span> <span class="token comment">// 🤷🏻♀️</span>
type Size <span class="token operator">=</span> <span class="token string">&quot;small&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;medium&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;large&quot;</span><span class="token punctuation">;</span> <span class="token comment">// ✅</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom属性-⭐️⭐️⭐️⭐️⭐️" tabindex="-1"><a class="header-anchor" href="#dom属性-⭐️⭐️⭐️⭐️⭐️" aria-hidden="true">#</a> DOM属性（⭐️⭐️⭐️⭐️⭐️）</h3><p>组件最终需要变成页面DOM，所以如果你的组件不是那种一次性的，请默认顺手定义基础的DOM属性类型。</p><h3 id="型注释-⭐️⭐️⭐️" tabindex="-1"><a class="header-anchor" href="#型注释-⭐️⭐️⭐️" aria-hidden="true">#</a> 型注释（⭐️⭐️⭐️）</h3><ol><li><p><code>export</code> 组件 <code>props</code> 类型定义</p></li><li><p>为组件暴露的类型添加 规范的注释</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type IListProps<span class="token punctuation">{</span>
<span class="token operator">/</span>
   <span class="token operator">*</span> Custom suffix element<span class="token punctuation">.</span>
   <span class="token operator">*</span> Used to append element after list
   <span class="token operator">*</span><span class="token operator">/</span>
  suffix<span class="token operator">?</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>
<span class="token operator">/</span>
   <span class="token operator">*</span> List column definition<span class="token punctuation">.</span>
   <span class="token operator">*</span> This makes List acts like a Table<span class="token punctuation">,</span> header depends on <span class="token keyword">this</span> property
   <span class="token operator">*</span> @<span class="token keyword">default</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
   <span class="token operator">*</span><span class="token operator">/</span>
  columns<span class="token operator">?</span><span class="token operator">:</span> IColumn<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">/</span>
   <span class="token operator">*</span> List dataSource<span class="token punctuation">.</span>
   <span class="token operator">*</span> Used <span class="token keyword">with</span> renderRow
   <span class="token operator">*</span> @<span class="token keyword">default</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
   <span class="token operator">*</span><span class="token operator">/</span>
  dataSource<span class="token operator">?</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的类型注释就是一个规范的类型注释，清晰的类型注释可以让消费者，直接点击进入你的类型定义中查看到关于这个参数的清晰解释。</p><p>小技巧：如果你非常厌倦写这些注释，不如试试著名的AI代码插件：<code>Copilot</code>，它可以帮你快速生成你想要表达的文字。</p><h3 id="组件插槽-⭐️⭐️⭐️" tabindex="-1"><a class="header-anchor" href="#组件插槽-⭐️⭐️⭐️" aria-hidden="true">#</a> 组件插槽（⭐️⭐️⭐️）</h3><p>对于一个组件开发新手来说，往往会犯 <code>string</code> 类型替代 <code>ReactNode</code> 的错误。</p><blockquote><p>比如要对一个 Input 组件定义一个 label 的 props ，许多新手开发者会使用 string 作为 label 类型，但这是错误的。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type IInputProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  label<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span> <span class="token comment">// ❌</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> type IInputProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  label<span class="token operator">?</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span> <span class="token comment">// ✅</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遇到这种类型时，需要意识到我们其实是在提供一个 React 插槽类型，如果在组件消费中仅仅是让他展示出来，而不做其他处理的话，就应当使用 ReactNode 类型作为类型定义。</p><h3 id="受控-与-非受控-⭐️⭐️⭐️⭐️⭐️" tabindex="-1"><a class="header-anchor" href="#受控-与-非受控-⭐️⭐️⭐️⭐️⭐️" aria-hidden="true">#</a> 受控 与 非受控（⭐️⭐️⭐️⭐️⭐️）</h3><p>如果要封装的组件类型是 <code>数据输入</code> 的用途，也就是存在双向绑定的组件。请务必提供以下类型定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type IFormProps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  value<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  defaultValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
  onChange<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且，这类接口定义不一定是针对 <code>value</code>， 其实对于所有有 受控需求 的组件都需要，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type IVisibleProps <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token operator">/</span>
   <span class="token operator">*</span> The visible state <span class="token keyword">of</span> the component<span class="token punctuation">.</span>
   <span class="token operator">*</span> If you want to control the visible state <span class="token keyword">of</span> the component<span class="token punctuation">,</span> you can use <span class="token keyword">this</span> property<span class="token punctuation">.</span>
   <span class="token operator">*</span> @<span class="token keyword">default</span> <span class="token boolean">false</span>
   <span class="token operator">*</span><span class="token operator">/</span>
  visible<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>
<span class="token operator">/</span>
   <span class="token operator">*</span> The <span class="token keyword">default</span> visible state <span class="token keyword">of</span> the component<span class="token punctuation">.</span>
   <span class="token operator">*</span> If you want to <span class="token keyword">set</span> the <span class="token keyword">default</span> visible state <span class="token keyword">of</span> the component<span class="token punctuation">,</span> you can use <span class="token keyword">this</span> property<span class="token punctuation">.</span>
   <span class="token operator">*</span> The component will be controlled by the visible property <span class="token keyword">if</span> it is set<span class="token punctuation">.</span>
   <span class="token operator">*</span> @<span class="token keyword">default</span> <span class="token boolean">false</span>
   <span class="token operator">*</span><span class="token operator">/</span>
  defaultVisible<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>
<span class="token operator">/</span>
   <span class="token operator">*</span> Callback when the visible state <span class="token keyword">of</span> the component changes<span class="token punctuation">.</span>
   <span class="token operator">*</span><span class="token operator">/</span>
  onVisibleChange<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">visible</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体原因请查看：《受控组件和非受控组件》</p><h3 id="表单类常用属性-⭐️⭐️⭐️⭐️" tabindex="-1"><a class="header-anchor" href="#表单类常用属性-⭐️⭐️⭐️⭐️" aria-hidden="true">#</a> 表单类常用属性（⭐️⭐️⭐️⭐️）</h3><p>如果你正在封装一个表单类型的组件，未来可能会配合 <code>antd</code>/ <code>fusion</code>等 Form 组件来消费，以下这些类型定义你可能会需要到：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type IFormProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * Field name
   */</span>
  name<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Field label
   */</span>
  label<span class="token operator">?</span><span class="token operator">:</span> ReactNode<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * The status of the field
   */</span>
  state<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;loading&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;success&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;error&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;warning&#39;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Whether the field is disabled
   * <span class="token keyword">@default</span> false
   */</span>
  disabled<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Size of the field
   */</span>
  size<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;small&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;medium&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;large&#39;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * The min value of the field
   */</span>
  min<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * The max value of the field
   */</span>
  max<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选择类型-⭐️⭐️⭐️⭐️" tabindex="-1"><a class="header-anchor" href="#选择类型-⭐️⭐️⭐️⭐️" aria-hidden="true">#</a> 选择类型（⭐️⭐️⭐️⭐️）</h3><p>如果你正在开发一个需要选择的组件，可能以下类型你会用到：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ISelection</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * The mode of selection
   * <span class="token keyword">@default</span> &#39;multiple&#39;
   */</span>
  mode<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;single&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;multiple&#39;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * The selected keys
   */</span>
  selectedRowKeys<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * The default selected keys
   */</span>
  defaultSelectedRowKeys<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Max count of selected keys
   */</span>
  maxSelection<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Whether take a snapshot of the selected records
   * If true, the selected records will be stored in the state
   */</span>
  keepSelected<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * You can get the selected records by this function
   */</span>
  getProps<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">record</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> disabled<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * The callback when the selected keys changed
   */</span>
  onChange<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">selectedRowKeys</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> records<span class="token operator">?</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * The callback when the selected records changed
   * The difference between \`onChange\` is that this function will return the single record
   */</span>
  onSelect<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">selected</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token literal-property property">record</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">records</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * The callback when the selected all records
   */</span>
  onSelectAll<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">selected</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token literal-property property">keys</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">records</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述参数定义，你可以参照 Merlion UI - useSelection[10]查看并消费。</p><p>另外，单选与多选存在时，组件的 value 可能会需要根据下传的 mode 自动变化数据类型。</p><p>比如，在 Select 组件中就会有以下区别：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>mode<span class="token operator">=</span><span class="token string">&quot;single&quot;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> value<span class="token operator">:</span> string <span class="token operator">|</span> number
mode<span class="token operator">=</span><span class="token string">&quot;multiple&quot;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> value<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以对于需要 多选、单选 的组件来说，value 的类型定义会有更多区别。</p><p>对于这类场景可以使用 Merlion UI - useCheckControllableValue[11]进行抹平。</p><h2 id="组件设计" tabindex="-1"><a class="header-anchor" href="#组件设计" aria-hidden="true">#</a> 组件设计</h2><h3 id="服务请求-⭐️⭐️⭐️⭐️⭐️" tabindex="-1"><a class="header-anchor" href="#服务请求-⭐️⭐️⭐️⭐️⭐️" aria-hidden="true">#</a> 服务请求（⭐️⭐️⭐️⭐️⭐️）</h3><p>这是一个在业务组件设计中经常会遇到的组件设计，对于很多场景来说，或许我们只是需要替换一下请求的 url ，于是便有了类似下面这样的API设计：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type IAsyncProps <span class="token punctuation">{</span>
  requestUrl<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  extParams<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后面接入方增多后，出现了后端的 API 结果不符合组件解析逻辑，或者出现了需要请求多个API组合后才能得到组件所需的数据，于是一个简单的请求就出现了以下这些参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type IAsyncProps <span class="token punctuation">{</span>
  requestUrl<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  extParams<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">;</span>
  beforeUpload<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any
  format<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">res</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这还只是其中一个请求，如果你的业务组件需要 2个、3个呢？组件的API就会变得越来越多，越来越复杂，这个组件慢慢的也就变得没有易用性 ，也慢慢没有了生气。</p><p>对于异步接口的API设计最佳实践应该是：提供一个 Promise 方法，并且详细定义其入参、出参类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type ProductList <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">total</span><span class="token operator">:</span> number<span class="token punctuation">;</span>
  <span class="token literal-property property">list</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
    <span class="token literal-property property">image</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> type <span class="token function-variable function">AsyncGetProductList</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">pageInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">current</span><span class="token operator">:</span> number<span class="token punctuation">;</span> pageSize<span class="token operator">:</span> number <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">searchParams</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span> id<span class="token operator">:</span> string<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Promise<span class="token operator">&lt;</span>ProductList<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> type IComponentProps <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token operator">/</span>
   <span class="token operator">*</span> The service to <span class="token keyword">get</span> product list
   <span class="token operator">*</span><span class="token operator">/</span>
  loadProduct<span class="token operator">?</span><span class="token operator">:</span> AsyncGetProductList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这样的参数定义后，对外只暴露了 1 个参数，该参数类型为一个 async 的方法。开发者需要下传一个符合上述入参和出参类型定义的函数。</p><p>在使用时组件内部并不关心请求是如何发生的，使用什么方式在请求，组件只关系返回的结果是符合类型定义的即可。</p><p>这对于使用组件的开发者来说是完全白盒的，可以清晰的看到需要下传什么，以及友好的错误提示等等。</p><h3 id="hooks-⭐️⭐️⭐️⭐️⭐️" tabindex="-1"><a class="header-anchor" href="#hooks-⭐️⭐️⭐️⭐️⭐️" aria-hidden="true">#</a> Hooks（⭐️⭐️⭐️⭐️⭐️）</h3><p>很多时候，或许你不需要组件！</p><p>对于很多业务组件来说，很多情况我们只是在原有的组件基础上封装一层浅浅的业务服务特性，比如：</p><ul><li>Lazada Uploader：Upload + Lazada Upload Service</li><li>Address Selector: Select + Address Service</li><li>Brand Selector: Select + Brand Service</li><li>...</li></ul><p>而对于这种浅浅的胶水组件，实际上组件封装是十分脆弱的。因为业务会对UI有各种调整，对于这种重写成本极低的组件，很容易导致组件的垃圾参数激增。</p><p>实际上，对于这类对服务逻辑的状态封装，更好的办法是将其封装为 React Hooks ，比如上传：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">const</span> lzdUploadProps <span class="token operator">=</span> <span class="token function">useLzdUpload</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">bu</span><span class="token operator">:</span> <span class="token string">&#39;seller&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token operator">&lt;</span>Upload <span class="token punctuation">{</span><span class="token operator">...</span>lzdUploadProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的封装既能保证逻辑的高度可复用性，又能保证 UI 的灵活性。</p><h3 id="consumer-⭐️⭐️⭐️" tabindex="-1"><a class="header-anchor" href="#consumer-⭐️⭐️⭐️" aria-hidden="true">#</a> Consumer（⭐️⭐️⭐️）</h3><p>对于插槽中需要使用到组件上下文的情况，我们可以考虑使用 Consumer 的设计进行组件入参设计。</p><p>对于这种类型的组件，明显容器内的内容需要拿到 isExpand 这个关键属性，从而决定索要渲染的内容，所以我们在组件设计时，可以考虑将其设计成可接受一个回调函数的插槽：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type IExpandProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  children<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">ctx</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">isExpand</span><span class="token operator">:</span> boolean <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在消费侧，则可以通过以下方式轻松消费：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>
<span class="token operator">&lt;</span>Expand<span class="token operator">&gt;</span>
      <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isExpand <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> isExpand <span class="token operator">?</span> <span class="token operator">&lt;</span>Table <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token operator">&lt;</span>AnotherTable <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Expand<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文档设计" tabindex="-1"><a class="header-anchor" href="#文档设计" aria-hidden="true">#</a> 文档设计</h2><h3 id="package-json-⭐️⭐️⭐️⭐️⭐️" tabindex="-1"><a class="header-anchor" href="#package-json-⭐️⭐️⭐️⭐️⭐️" aria-hidden="true">#</a> package.json（⭐️⭐️⭐️⭐️⭐️）</h3>`,64),b={href:"http://npmjs.com",target:"_blank",rel:"noopener noreferrer"},h=o(`<p>请确保 package.json 中存在常见的入口定义，比如 main\\module\\types\\exports，以下是一个 package.json 的示范：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxx-ui&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Out-of-box UI solution for enterprise applications from B-side.&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yee.wang@xxx.com&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/esm/index.js&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/cjs/index.js&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/cjs/index.js&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/esm/index.js&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/cjs/index.d.ts&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;repository&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;git&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;git@github.com:yee94/xxx.git&quot;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g={id:"readme-md-⭐️⭐️⭐️⭐️",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#readme-md-⭐️⭐️⭐️⭐️","aria-hidden":"true"},"#",-1),f={href:"http://README.md",target:"_blank",rel:"noopener noreferrer"},x=o('<p>如果你在做一个库，并希望有人来使用它，请至少为你的库提供一段描述，在我们的脚手架模板中已经为你生成了一份模板，并且会在编译过程中自动加入在线 DEMO 地址，但如果可以请至少为它添加一段描述。</p><p>这里的办法有很多，如果你实在不知道该如何写，可以找一些知名的开源库来参考，比如 <code>antd</code> \\ <code>react</code> \\ <code>vue</code> 等。</p><p>还有一个办法，或许你可以寻求 <code>ChatGPT</code> 的帮助，屡试不爽😄。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',4),_={href:"https://www.npmjs.com/package/classnames",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.npmjs.com/package/clsx",target:"_blank",rel:"noopener noreferrer"},j={href:"https://jsdoc.app/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://vitdocjs.github.io/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/features/copilot",target:"_blank",rel:"noopener noreferrer"},P={href:"https://segmentfault.com/a/1190000040308582",target:"_blank",rel:"noopener noreferrer"},T={href:"https://ahooks.js.org/hooks/use-controllable-value",target:"_blank",rel:"noopener noreferrer"},A={href:"https://ant.design/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/alibaba-fusion/next",target:"_blank",rel:"noopener noreferrer"},R={href:"https://mc.lazada.com/package/@ali/merlion-ui#/src/hooks/use-selection/README.md",target:"_blank",rel:"noopener noreferrer"},S={href:"https://mc.lazada.com/package/@ali/merlion-ui#/src/hooks/use-selection/README.md",target:"_blank",rel:"noopener noreferrer"};function C(U,M){const e=l("router-link"),p=l("ExternalLinkIcon");return r(),i("div",null,[k,u(" more "),n("nav",v,[n("ul",null,[n("li",null,[a(e,{to:"#意识"},{default:t(()=>[s("意识")]),_:1})]),n("li",null,[a(e,{to:"#接口设计"},{default:t(()=>[s("接口设计")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#dom属性-⭐️⭐️⭐️⭐️⭐️"},{default:t(()=>[s("DOM属性（⭐️⭐️⭐️⭐️⭐️）")]),_:1})]),n("li",null,[a(e,{to:"#型注释-⭐️⭐️⭐️"},{default:t(()=>[s("型注释（⭐️⭐️⭐️）")]),_:1})]),n("li",null,[a(e,{to:"#组件插槽-⭐️⭐️⭐️"},{default:t(()=>[s("组件插槽（⭐️⭐️⭐️）")]),_:1})]),n("li",null,[a(e,{to:"#受控-与-非受控-⭐️⭐️⭐️⭐️⭐️"},{default:t(()=>[s("受控 与 非受控（⭐️⭐️⭐️⭐️⭐️）")]),_:1})]),n("li",null,[a(e,{to:"#表单类常用属性-⭐️⭐️⭐️⭐️"},{default:t(()=>[s("表单类常用属性（⭐️⭐️⭐️⭐️）")]),_:1})]),n("li",null,[a(e,{to:"#选择类型-⭐️⭐️⭐️⭐️"},{default:t(()=>[s("选择类型（⭐️⭐️⭐️⭐️）")]),_:1})])])]),n("li",null,[a(e,{to:"#组件设计"},{default:t(()=>[s("组件设计")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#服务请求-⭐️⭐️⭐️⭐️⭐️"},{default:t(()=>[s("服务请求（⭐️⭐️⭐️⭐️⭐️）")]),_:1})]),n("li",null,[a(e,{to:"#hooks-⭐️⭐️⭐️⭐️⭐️"},{default:t(()=>[s("Hooks（⭐️⭐️⭐️⭐️⭐️）")]),_:1})]),n("li",null,[a(e,{to:"#consumer-⭐️⭐️⭐️"},{default:t(()=>[s("Consumer（⭐️⭐️⭐️）")]),_:1})])])]),n("li",null,[a(e,{to:"#文档设计"},{default:t(()=>[s("文档设计")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#package-json-⭐️⭐️⭐️⭐️⭐️"},{default:t(()=>[s("package.json（⭐️⭐️⭐️⭐️⭐️）")]),_:1})]),n("li",null,[a(e,{to:"#readme-md-⭐️⭐️⭐️⭐️"},{default:t(()=>[s("README.md（⭐️⭐️⭐️⭐️）")]),_:1})])])]),n("li",null,[a(e,{to:"#参考链接"},{default:t(()=>[s("参考链接")]),_:1})])])]),m,n("p",null,[s("请确保你的 repository 是正确的仓库地址，因为这里的配置是很多平台溯源的唯一途径，比如: "),n("a",b,[s("npmjs.com"),a(p)]),s("\\npm.alibaba-inc.com\\mc.lazada.com")]),h,n("h3",g,[y,s(),n("a",f,[s("README.md"),a(p)]),s("（⭐️⭐️⭐️⭐️）")]),x,n("p",null,[s("[classnames]"),n("a",_,[s("https://www.npmjs.com/package/classnames"),a(p)])]),n("p",null,[s("[clsx]"),n("a",w,[s("https://www.npmjs.com/package/clsx"),a(p)])]),n("p",null,[s("[jsdoc]"),n("a",j,[s("https://jsdoc.app/"),a(p)])]),n("p",null,[s("[vitdoc]"),n("a",q,[s("https://vitdocjs.github.io/"),a(p)])]),n("p",null,[s("[AI代码插件 Copilot]"),n("a",I,[s("https://github.com/features/copilot"),a(p)])]),n("p",null,[s("[受控组件和非受控组件]"),n("a",P,[s("https://segmentfault.com/a/1190000040308582"),a(p)])]),n("p",null,[s("[ahooks useControllableValue]"),n("a",T,[s("https://ahooks.js.org/hooks/use-controllable-value"),a(p)])]),n("p",null,[s("[antd]"),n("a",A,[s("https://ant.design/"),a(p)])]),n("p",null,[s("[fusion]"),n("a",E,[s("https://github.com/alibaba-fusion/next"),a(p)])]),n("p",null,[s("[useSelection]"),n("a",R,[s("https://mc.lazada.com/package/@ali/merlion-ui#/src/hooks/use-selection/README.md"),a(p)])]),n("p",null,[s("[useCheckControllableValue]"),n("a",S,[s("https://mc.lazada.com/package/@ali/merlion-ui#/src/hooks/use-selection/README.md"),a(p)])])])}const D=c(d,[["render",C],["__file","20.UI组件规范.html.vue"]]);export{D as default};
