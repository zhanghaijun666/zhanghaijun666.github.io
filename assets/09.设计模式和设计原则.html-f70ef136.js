import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as c,c as n,e as d,a as l,d as i,w as t,f as s,b as o}from"./app-d6438571.js";const _={},h=l("figure",null,[l("img",{src:"https://static001.geekbang.org/horde/e8/e812cf142371fed874cd5faaa797cc5d.png",alt:"",tabindex:"0",loading:"lazy"}),l("figcaption")],-1),u={class:"table-of-contents"},p=s('<h2 id="设计模式的三个分类" tabindex="-1"><a class="header-anchor" href="#设计模式的三个分类" aria-hidden="true">#</a> 设计模式的三个分类</h2><ul><li>创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程。</li><li>结构型模式：把类或对象结合在一起形成一个更大的结构。</li><li>行为型模式：类和对象如何交互，及划分责任和算法。</li></ul><h2 id="_23种设计模式" tabindex="-1"><a class="header-anchor" href="#_23种设计模式" aria-hidden="true">#</a> 23种设计模式</h2><blockquote><p>创建型:</p></blockquote><ol><li>单例模式（Singleton）：某个类只能有一个实例，提供一个全局的访问点。</li><li>抽象工厂（Abstract Factory）：创建相关或依赖对象的家族，而无需明确指定具体类。</li><li>工厂方法（Factory Method）：定义一个创建对象的接口，让子类决定实例化那个类。</li><li>建造模式（Builder）：封装一个复杂对象的构建过程，并可以按步骤构造。</li><li>原型模式（Prototype）：通过复制现有的实例来创建新的实例。</li></ol><blockquote><p>行为型：</p></blockquote><ol start="6"><li>迭代器模式（Iterator）：一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。</li><li>观察者模式（Observer）：对象间的一对多的依赖关系。</li><li>模板方法（Template Method）：定义一个算法结构，而将一些步骤延迟到子类实现。</li><li>命令模式（Command）：将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。</li><li>状态模式（State）：允许对象在其内部状态改变时改变他的行为。对象看起来似乎改变了他的类。</li><li>策略模式（Strategy）：定义一系列算法，把他们封装起来，并且使它们可以相互替换。</li><li>职责链模式（China of Responsibility）：将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。</li><li>中介者模式（Mediator）：用一个中介对象来封装一系列的对象交互。</li><li>访问者模式（Visitor）：在不改变数据结构的前提下，增加作用于一组对象元素的新功能。</li><li>解释器模式（Interpreter）：给定一个语言，定义它的文法的一种表示，并定义一个解释器。</li><li>备忘录模式（Memento）：在不破坏封装的前提下，保持对象的内部状态。</li></ol><blockquote><p>结构型：</p></blockquote><ol start="17"><li>组合模式（Composite）：将对象组合成树形结构以表示“部分-整体”的层次结构。</li><li>外观模式（Facade）：对外提供一个统一的方法，来访问子系统中的一群接口。</li><li>代理模式（Proxy）：为其他对象提供一种代理以控制对这个对象的访问。</li><li>适配器模式（Adapter）：将一类的接口转换成客户希望的另外一个接口。</li><li>装饰模式（Decrator）：动态的给对象添加新的功能。</li><li>桥模式（Bridge）：将抽象部分和它的实现部分分离，使它们都可以独立的变化。</li><li>享元（蝇量）模式（Flyweight）：通过共享技术来有效的支持大量细粒度的对象。</li></ol><h2 id="设计模式分析" tabindex="-1"><a class="header-anchor" href="#设计模式分析" aria-hidden="true">#</a> 设计模式分析</h2><ol><li>单例模式：</li></ol><blockquote><p>特点：1、只有一个实例。 2、自我实例化。 3、提供全局访问点。</p><p>优点：节约系统资源、提高了系统效率，同时也能够严格控制客户对它的访问。</p><p>缺点：单例类的职责过重，违背了“单一职责原则”，同时也没有抽象类，所以扩展起来有一定的困难。</p></blockquote>',12);function f(m,b){const e=r("router-link");return c(),n("div",null,[h,d(" more "),l("nav",u,[l("ul",null,[l("li",null,[i(e,{to:"#设计模式的三个分类"},{default:t(()=>[o("设计模式的三个分类")]),_:1})]),l("li",null,[i(e,{to:"#_23种设计模式"},{default:t(()=>[o("23种设计模式")]),_:1})]),l("li",null,[i(e,{to:"#设计模式分析"},{default:t(()=>[o("设计模式分析")]),_:1})])])]),p])}const x=a(_,[["render",f],["__file","09.设计模式和设计原则.html.vue"]]);export{x as default};
