import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as s,c,e as p,a,d as e,w as t,f as l,b as r}from"./app-d6438571.js";const d="/assets/10-01-b0538402.png",g="/assets/10-02-42967c82.png",_="/assets/10-03-1a6641bb.png",h="/assets/10-04-c3e11a40.png",f="/assets/10-05-f9704a98.png",u="/assets/10-06-fb7c047a.png",b="/assets/10-07-6f34a3c7.png",m="/assets/10-08-9fdf16c7.png",A="/assets/10-09-11b22169.png",C="/assets/10-10-fa95ceff.png",B="/assets/10-11-5143bbc2.png",R="/assets/10-12-daee7a42.png",x="/assets/10-13-3a3ab047.png",k="/assets/10-14-0241d925.png",y="/assets/10-15-0ad72e52.png",z="/assets/10-16-ed938e3f.png",q="/assets/10-17-a79db5ab.png",N={},V={class:"table-of-contents"},v=l('<h2 id="_1-为什么需要权限管理" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要权限管理" aria-hidden="true">#</a> 1 为什么需要权限管理</h2><p>日常工作中权限的问题时时刻刻伴随着我们，程序员新入职一家公司需要找人开通各种权限，比如网络连接的权限、编码下载提交的权限、监控平台登录的权限、运营平台查数据的权限等等。</p><p><strong>在很多时候我们会觉得这么多繁杂的申请给工作带来不便，并且如果突然想要查一些数据，发现没有申请过权限，需要再走审批流程，时间拉得会很长。那为什么还需要这么严格的权限管理呢？</strong></p><p>举个例子，一家支付公司有运营后台，运营后台可以查到所有的商户信息，法人代表信息，交易信息以及费率配置信息，如果我们把这些信息不加筛选都给到公司的每一个小伙伴，那么跑市场的都可以操作商家的费率信息，如果一个不小心把费率改了会造成巨大的损失。</p><p>又比如商户的信息都是非常隐秘的，有些居心不良的小伙伴把这些信息拿出来卖给商家的竞争对手，会给商家造成严重的不良后果。虽然这么做都是个别人人为的过错，但是制度上如果本身这些信息不开放出来就能在很大程度上避免违法乱纪的事情发生了。</p><p>总体来讲<strong>权限管理是公司数据安全的重要保证，针对不同的岗位，不同的级别看到的数据是不一样的，操作数据的限制也是不一样的</strong>。比如涉及到资金的信息只开放给财务的相关岗位，涉及到配置的信息只开放给运营的相关岗位，这样各司其职能避免很多不必要的安全问题。</p><blockquote><p>如何让各个岗位的人在系统上各司其职，就是权限管理要解决的问题。</p></blockquote><h2 id="_2-权限模型" tabindex="-1"><a class="header-anchor" href="#_2-权限模型" aria-hidden="true">#</a> 2 权限模型</h2><h3 id="_2-1-权限设计" tabindex="-1"><a class="header-anchor" href="#_2-1-权限设计" aria-hidden="true">#</a> <strong>2.1 权限设计</strong></h3><p>从业务分类上来讲权限可以分为数据查看权限，数据修改权限等，对应到系统设计中有页面权限、菜单权限、按钮权限等。菜单也分一级菜单、二级菜单甚至三级菜单，以csdn文章编辑页面左侧菜单栏为例是分了两级菜单。菜单对应的页面里又有很多按钮，我们在设计的时候最好把权限设计成树形结构，这样在申请权限的时候就可以一目了然的看到菜单的结构，需要哪些权限就非常的明了了。</p><p>如下图所示：</p><figure><img src="'+d+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>按照这个架构，按钮的父级是二级菜单，二级菜单的父级是一级菜单，这样用户申请权限的时候非常清晰的看到自己需要哪些权限。</p><h3 id="_2-2-主流的权限模型" tabindex="-1"><a class="header-anchor" href="#_2-2-主流的权限模型" aria-hidden="true">#</a> 2.2 主流的权限模型</h3><ul><li>ACL模型：访问控制列表</li><li>DAC模型：自主访问控制</li><li>MAC模型：强制访问控制</li><li>ABAC模型：基于属性的访问控制</li><li>RBAC模型：基于角色的权限访问控制</li></ul><h2 id="_2-2-为什么需要角色" tabindex="-1"><a class="header-anchor" href="#_2-2-为什么需要角色" aria-hidden="true">#</a> 2.2 为什么需要角色</h2><p>权限结构梳理清晰之后，需要思考怎么把权限分配给用户，用户少的情况下，可以直接分配，一个用户可以有多个权限，统一一个权限可以被多个用户拥有，用户-权限的模型结构如下所示：</p><figure><img src="'+g+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><figure><img src="'+_+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_2-3-权限模型的演进" tabindex="-1"><a class="header-anchor" href="#_2-3-权限模型的演进" aria-hidden="true">#</a> <strong>2.3 权限模型的演进</strong></h3><h4 id="_2-3-1-rbac0模型" tabindex="-1"><a class="header-anchor" href="#_2-3-1-rbac0模型" aria-hidden="true">#</a> 2.3.1 RBAC0模型</h4><blockquote><p>用户和角色、角色和权限多对多关系。</p></blockquote><p>有了角色之后可以把权限分配给角色，需要相同权限的用户和角色对应起来就可以了，一个权限可以分配给多个角色，一个角色可以拥有多个权限，同样一个用户可以分配多个角色，一个角色也可以对应多个用户，对应模型如下所示：</p><figure><img src="'+h+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>同时因为有角色作为媒介，大大降低了错综复杂的交互关系，比如一家有上万人的公司，角色可能只需要几百个就搞定了，因为很多用户需要的权限是一样的，分配一样的角色就可以了。这种模型的对应关系图如下所示：</p><figure><img src="'+f+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>用户和角色，角色和权限都是多对多的关系，这种模型是最通用的权限管理模型，节省了很大的权限维护成本， 但是实际的业务千变万化，权限管理的模型也需要根据不同的业务模型适当的调整，比如一个公司内部的组织架构是分层级的，层级越高权限越大，因为层级高的人不仅要拥有自己下属拥有的权限，二期还要有一些额外的权限。</p><p>RBAC模型可以给不同层级的人分配不同的角色，层级高的对应角色的权限就多，这样的处理方式可以解决问题，但是有没有更好的解决办法呢，答案肯定是有的，这就引出角色继承的RBAC模型。</p><h4 id="_2-3-2-rbac1模型" tabindex="-1"><a class="header-anchor" href="#_2-3-2-rbac1模型" aria-hidden="true">#</a> 2.3.2 RBAC1模型</h4><blockquote><p>相对于RBAC0模型，增加了角色分级的逻辑，类似于树形结构，下一节点继承上一节点的所有权限</p></blockquote><p>角色继承的RBAC模型又称<code>RBAC1</code>模型。每个公司都有自己的组织架构，比如公司里管理财务的人员有财务总监、财务主管、出纳员等，财务主管需要拥有但不限于出纳员的权限，财务总监需要拥有但不限于财务主管的权限，像这种管理关系向下兼容的模式就需要用到角色继承的RBAC模型。<strong>角色继承的RBAC模型的思路是上层角色继承下层角色的所有权限，并且可以额外拥有其他权限。</strong></p><p>模型如下所示：</p><figure><img src="'+u+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>从模型图中可以看出下级角色拥有的权限，上级角色都拥有，并且上级角色可以拥有其他的权限。角色的层级关系可以分为两种，一种是下级角色只能拥有一个上级角色，但是上级角色可以拥有多个下级角色，这种结构用图形表示是一个树形结构，如下图所示：</p><figure><img src="'+b+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>还有一种关系是下级角色可以拥有多个上级角色，上级角色也可以拥有多个下级角色，这种结构用图形表示是一个有向无环图，如下图所示：</p><figure><img src="'+m+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h4 id="_2-3-3-rbac2模型" tabindex="-1"><a class="header-anchor" href="#_2-3-3-rbac2模型" aria-hidden="true">#</a> 2.3.3 RBAC2模型</h4><blockquote><p>基于RBAC0模型，对角色增加了更多约束条件。</p></blockquote><p>带约束的RBAC模型又成<code>RBAC2</code>模型。在实际工作中，为了安全的考虑会有很多约束条件，比如财务部里同一个人不能即是会计又是审核员，跟一个人同一时间不能即是运动员又是裁判员是一个道理的，又比如财务部的审核员不能超过2个，不能1个也没有。因为角色和权限是关联的，所以我们做好角色的约束就可以了。</p><blockquote><p>常见的约束条件有：角色互斥、基数约束、先决条件约束等。</p></blockquote><p><strong>角色互斥</strong>：如果角色A和角色B是互斥关系的话，那么一个用户同一时间不能即拥有角色A，又拥有角色B，只能拥有其中的一个角色。</p><blockquote><p>比如我们给一个用户赋予了会计的角色就不能同时再赋予审核员的角色，如果想拥有审核员的角色就必须先去掉会计的角色。假设提交角色和审核角色是互质的，我们可以用图形表示：</p></blockquote><figure><img src="'+A+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>基数约束</strong>：同一个角色被分配的用户数量可以被限制，比如规定拥有超级管理员角色的用户有且只有1个；用户被分配的角色数量也需要被限制，角色被分配的权限数量也可以被限制。</p><p><strong>先决条件约束</strong>：用户想被赋予上级角色，首先需要拥有下级角色，比如技术负责人的角色和普通技术员工角色是上下级关系，那么用户想要用户技术负责人的角色就要先拥有普通技术员工的角色。</p><h4 id="_2-3-4-rbac3模型" tabindex="-1"><a class="header-anchor" href="#_2-3-4-rbac3模型" aria-hidden="true">#</a> 2.3.4 RBAC3模型</h4><blockquote><p>同样是基于RBAC0模型，但是综合了RBAC1和RBAC2的所有特点</p></blockquote><h3 id="_2-4-用户划分" tabindex="-1"><a class="header-anchor" href="#_2-4-用户划分" aria-hidden="true">#</a> <strong>2.4 用户划分</strong></h3><h4 id="_2-4-1-用户组" tabindex="-1"><a class="header-anchor" href="#_2-4-1-用户组" aria-hidden="true">#</a> 2.4.1 用户组</h4><p>我们创建角色是为了解决用户数量大的情况下，用户分配权限繁琐以及用户-权限关系维护成本高的问题。抽象出一个角色，把需要一起操作的权限分配给这个角色，把角色赋予用户，用户就拥有了角色上的权限，这样避免了一个个的给用户分配权限，节省了大量的资源。</p><p>同样的如果有一批用户需要相同的角色，我们也需要一个个的给用户分配角色，比如一个公司的客服部门有500多个人，有一天研发部研发了一套查询后台数据的产品，客服的小伙伴都需要使用，但是客服由于之前并没有统一的一个角色给到所有的客服小伙伴，这时候需要新加一个角色，把权限分配给该角色，然后再把角色一个个分配给客服人员，这时候会发现给500个用户一个个添加角色非常的麻烦。但是客服人员又有共同的属性，所以我们可以创建一个用户组，所有的客服人员都属于客服用户组，把角色分配给客服用户组，这个用户组下面的所有用户就拥有了需要的权限。</p><p>RBAC模型添加用户组之后的模型图如下所示：</p><figure><img src="'+C+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>很多朋友会问，用户组和角色有什么区别呢？简单的来说，<strong>用户组是一群用户的组合，而角色是用户和权限之间的桥梁</strong>。用户组把相同属性的用户组合起来，比如同一个项目的开发、产品、测试可以是一个用户组，同一个部门的相同职位的员工可以是一个用户组， 一个用户组可以是一个职级，可以是一个部门，可以是一起做事情的来自不同岗位的人。</p><p>用户可以分组，权限也可以分组，权限特别多的情况下，可以把一个模块的权限组合起来成为一个权限组，权限组也是解决权限和角色对应关系复杂的问题。</p><p>比如我们定义权限的时候一级菜单、二级菜单、按钮都可以是权限，一个一级菜单下面有几十个二级菜单，每个二级菜单下面又有几十个按钮，这时候我们把权限一个个分配给角色也是非常麻烦的，可以采用分组的方法把权限分组，然后把分好的组赋予角色就可以了。</p><p>给权限分组也是个技术活，需要理清楚权限之间的关系，比如支付的运营后台我们需要查各种信息，账务的数据、订单的数据、商户的数据等等，这些查询的数据并不在一个页面，每个页面也有很多按钮，我们可以把这几个页面以及按钮对应的权限组合成一个权限组赋予角色。加入权限组之后的RBAC模型如下所示：</p><figure><img src="'+B+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>实际工作中我们很少给权限分组，给用户分组的场景会多一些，有的时候用户组也可以直接和权限关联，这个看实际的业务场景是否需要，权限模型没有统一的，业务越复杂业务模型会约多样化。</p><h4 id="_2-4-2-组织" tabindex="-1"><a class="header-anchor" href="#_2-4-2-组织" aria-hidden="true">#</a> 2.4.2 组织</h4><p>每个公司都有自己的组织架构，很多时候权限的分配可以根据组织架构来划分。因为同一个组织内的小伙伴使用的大部分权限是一样的。如下所示一个公司的组织架构图：</p><figure><img src="'+R+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>实现权限分配的自动化</strong>：和组织关系打通之后，按照组织来分配角色，如果有新入职的用户，被划分在某个组织下面之后，会自动获取该组织下所有的权限，无需人工分配。又比如有用户调岗，只需要把组织关系调整就可以了，权限会跟着组织关系自动调整，也无需人工干预。这么做首先需要把权限和组织关系打通。</p><p><strong>控制数据权限</strong>：把角色关联到组织，组织里的成员只能看到本组织下的数据，比如市场推广和大客定制，市场推广针对的是零散的客户，大可定制针对的是有一定体量的客户，相互的数据虽然在一个平台，但是只能看自己组织下的数据。</p><p>加入组织之后的RBAC模型如下所示：</p><figure><img src="'+x+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>用户可以在多个组织中，因为组织也有层级结构，一个组织里只可以有多个用户，所以用户和组织的关系是多对多的关系，组织和角色的关系是一对一的关系。这个在工作中可以根据实际情况来确定对应关系。</p><h4 id="_2-4-3-职位" tabindex="-1"><a class="header-anchor" href="#_2-4-3-职位" aria-hidden="true">#</a> 2.4.3 职位</h4><p>一个组织下面会有很多职位，比如财务管理会有财务总监、财务主管、会计、出纳员等职位，每个职位需要的权限是不一样的，可以像组织那样根据职位来分配不同的角色，由于一个人的职位是固定的，所以用户跟职位的对应关系时一对一的关系，职位跟角色的对应关系可以是多对多的关系。加入职位的RBAC模型如下所示：</p><figure><img src="'+k+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_2-5-理想的rbac模型" tabindex="-1"><a class="header-anchor" href="#_2-5-理想的rbac模型" aria-hidden="true">#</a> <strong>2.5 理想的RBAC模型</strong></h3><p>RBAC模型根据不同业务场景的需要会有很多种演变，实际工作中业务是非常复杂的，权限分配也是非常复杂的，想要做出通用且高效的模型很困难。我们把RBAC模型的演变汇总起来会是一个支撑大数据量以及复杂业务的理想的模型。把RBAC、RBAC1、RBAC2、用户组、组织、职位汇总起来的模型如下所示：</p><figure><img src="'+y+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>按照这个模型基本上能够解决所有的权限问题，其中的对应关系可以根据实际的业务情况来确定，一般情况下，组织和职位是一对多的关系，特殊情况下可以有多对多的情况，需要根据实际情况来定。</p><p>理想的RBAC模型并不是说我们一开始建权限模型就可以这么做，而是数据体量、业务复杂度达到一定程度之后可以使用这个模型来解决权限的问题，如果数据量特别少，比如刚成立的公司只有十几个人，那完全可以用用户-权限模型，都没有必要使用RBAC模型。</p><h2 id="_3-权限系统表设计" tabindex="-1"><a class="header-anchor" href="#_3-权限系统表设计" aria-hidden="true">#</a> 3 权限系统表设计</h2><h3 id="_3-1-标准rbac模型表设计" tabindex="-1"><a class="header-anchor" href="#_3-1-标准rbac模型表设计" aria-hidden="true">#</a> <strong>3.1 标准RBAC模型表设计</strong></h3><p>标准RBAC模型的表是比较简单了，要表示<code>用户-角色-权限</code>三者之前的关系，首先要创建用户表、角色表、权限表，用户和角色是多对多的关系，角色和权限是多对多的关系，需要再创建两章关系表，分别是用户-角色关系表和角色-权限关系表。这六张表的ER图如下所示：</p><figure><img src="'+z+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h3 id="_3-2-理想rbac模型表设计" tabindex="-1"><a class="header-anchor" href="#_3-2-理想rbac模型表设计" aria-hidden="true">#</a> <strong>3.2 理想RBAC模型表设计</strong></h3><p>理想的RBAC模型是标准RBAC模型经过多次扩展得到的，表结构也会比较复杂，因为要维护很多关系，如下图所示是理想的RBAC模型的ER图：</p><figure><img src="'+q+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>这里面需要强调的是角色互斥表，互斥的关系可以放在角色上，也可以放在权限上，看实际工作的需求。</p><h2 id="_4-结语" tabindex="-1"><a class="header-anchor" href="#_4-结语" aria-hidden="true">#</a> 4 结语</h2><p>本文从易到难非常详细的介绍了权限模型的设计，在工作中需要根据实际情况来定义模型，千人以内的公司使用RBAC模型是完全够用的，没有必要吧权限模型设计的过于复杂。模型的选择要根据具体情况，比如公司体量、业务类型、人员数量等。总之最适合自己公司的模型就是最好的模型，权限模式和设计模式是一样的，都是为了更好的解决问题，不要为了使用模型而使用模型。</p>',86);function E(w,D){const i=o("router-link");return s(),c("div",null,[p(" more "),a("nav",V,[a("ul",null,[a("li",null,[e(i,{to:"#_1-为什么需要权限管理"},{default:t(()=>[r("1 为什么需要权限管理")]),_:1})]),a("li",null,[e(i,{to:"#_2-权限模型"},{default:t(()=>[r("2 权限模型")]),_:1}),a("ul",null,[a("li",null,[e(i,{to:"#_2-1-权限设计"},{default:t(()=>[r("2.1 权限设计")]),_:1})]),a("li",null,[e(i,{to:"#_2-2-主流的权限模型"},{default:t(()=>[r("2.2 主流的权限模型")]),_:1})])])]),a("li",null,[e(i,{to:"#_2-2-为什么需要角色"},{default:t(()=>[r("2.2 为什么需要角色")]),_:1}),a("ul",null,[a("li",null,[e(i,{to:"#_2-3-权限模型的演进"},{default:t(()=>[r("2.3 权限模型的演进")]),_:1})]),a("li",null,[e(i,{to:"#_2-4-用户划分"},{default:t(()=>[r("2.4 用户划分")]),_:1})]),a("li",null,[e(i,{to:"#_2-5-理想的rbac模型"},{default:t(()=>[r("2.5 理想的RBAC模型")]),_:1})])])]),a("li",null,[e(i,{to:"#_3-权限系统表设计"},{default:t(()=>[r("3 权限系统表设计")]),_:1}),a("ul",null,[a("li",null,[e(i,{to:"#_3-1-标准rbac模型表设计"},{default:t(()=>[r("3.1 标准RBAC模型表设计")]),_:1})]),a("li",null,[e(i,{to:"#_3-2-理想rbac模型表设计"},{default:t(()=>[r("3.2 理想RBAC模型表设计")]),_:1})])])]),a("li",null,[e(i,{to:"#_4-结语"},{default:t(()=>[r("4 结语")]),_:1})])])]),v])}const S=n(N,[["render",E],["__file","10.权限模型设计方案详解.html.vue"]]);export{S as default};
