import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as d,c,e as r,a as n,d as a,w as l,b as e,f as p}from"./app-d6438571.js";const u={},m={class:"table-of-contents"},k=p(`<h2 id="为什么要减小-docker-镜像大小" tabindex="-1"><a class="header-anchor" href="#为什么要减小-docker-镜像大小" aria-hidden="true">#</a> 为什么要减小 docker 镜像大小？</h2><ol><li>安装不必要的软件包会增加攻击面，从而增加安全风险。</li><li>镜像传输需要更多时间。</li><li>部署大镜像需要更多时间。</li></ol><h2 id="_1-最小化镜像层" tabindex="-1"><a class="header-anchor" href="#_1-最小化镜像层" aria-hidden="true">#</a> 1：最小化镜像层</h2><p>我们可以减少 <code>Dockerfile</code> 中的层数。</p><p><code>dockerfile</code> 中的每个 FROM、RUN、COPY 命令都会创建一个单独的层，并增加镜像的整体大小和构建时间。</p><p>要减小 <code>docker</code>镜像大小，请在单个<code>RUN</code>或 <code>COPY</code>指令中执行多个命令来最小化 <code>Dockerfile</code> 中的层数。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment">## 与其对每个命令使用单独的指令，不如将它们组合起来：</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt update  -y &amp;&amp; <span class="token operator">\\</span>
    apt install unzip -y &amp;&amp; <span class="token operator">\\</span>
    apt install curl -y &amp;&amp; <span class="token operator">\\</span>
    apt install python3 -y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-使用-docker-squash减小镜像大小" tabindex="-1"><a class="header-anchor" href="#_2-使用-docker-squash减小镜像大小" aria-hidden="true">#</a> 2：使用 <code>Docker Squash</code>减小镜像大小</h2><p>Docker 在构建镜像时创建了很多层。压缩有助于在逻辑层中组织镜像。我们可以控制镜像的结构，而不是让镜像具有多个不必要的层。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 运行以下命令来减小镜像的大小</span>
docker-squash image:old <span class="token parameter variable">-t</span> image:new
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用较小的基础镜像" tabindex="-1"><a class="header-anchor" href="#_3-使用较小的基础镜像" aria-hidden="true">#</a> 3：使用较小的基础镜像</h2><p>减小 docker 镜像大小最明显的方法是使用较小的基础镜像。</p><p>如果希望为 python 应用程序创建镜像，请考虑使用 <code>python:3.9-slim</code> 镜像而不是 <code>python:3.9</code>。</p><p><code>python:3.9</code> 的大小约为 1.3 GB，而 <code>python:3.9-slim</code> 的大小仅为 1 GB 左右。</p><p>您可以使用 alpine 版本进一步减少镜像。alpine 镜像是专门为作为容器运行而设计的，而且体积非常小。python:3.9-alpine 镜像只有 49 MB。</p><h2 id="_4-使用多阶段构建来减小大小" tabindex="-1"><a class="header-anchor" href="#_4-使用多阶段构建来减小大小" aria-hidden="true">#</a> 4：使用多阶段构建来减小大小</h2><p>为了显着减小大小，我们可以使用 docker 多阶段构建的概念。这里我们使用不同的 <code>images</code>/<code>Dockerfile</code> 来构建和打包应用代码。</p><p>它将 Dockerfile 分成多个阶段，并将所需的工件从一个阶段传递到另一个阶段，然后在最后一个阶段交付缩小镜像大小的最终镜像。它显着减小镜像尺寸。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># Official docker build image, Using  node:14.17-alpine3.14 image for stage-1.</span>
<span class="token comment"># Stage-1</span>
<span class="token instruction"><span class="token keyword">FROM</span> node:14.17-alpine3.14 <span class="token keyword">as</span> build</span>
<span class="token comment"># Copy Required files</span>
<span class="token instruction"><span class="token keyword">COPY</span> public /home/app/public/</span>
<span class="token instruction"><span class="token keyword">COPY</span> src /home/app/src/</span>
<span class="token comment"># dockerfile install multiple packages</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add g++ make python2</span>
<span class="token instruction"><span class="token keyword">RUN</span> npm install --silent</span>
<span class="token comment"># Create Build</span>
<span class="token instruction"><span class="token keyword">RUN</span> npm run build</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk --purge del python2</span>
<span class="token comment">#Run the build by copying the files form previous stage.</span>
<span class="token comment"># Stage-2</span>
<span class="token instruction"><span class="token keyword">FROM</span> nginx:stable-alpine</span>
<span class="token instruction"><span class="token keyword">COPY</span> nginx.conf /etc/nginx/conf.d/default.conf</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">build</span></span> /home/app/build /usr/share/nginx/html</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 80</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;nginx&quot;</span>, <span class="token string">&quot;-g&quot;</span>, <span class="token string">&quot;daemon off;&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们使用两个阶段从 docker 文件创建镜像。在 Stage-1 中，我们复制代码并构建它，在 stage-2 中，我们使用在 stage-1 中构建的代码在 Nginx 中运行。</p><h2 id="_5-apt安装中使用-no-install-recommends-标志" tabindex="-1"><a class="header-anchor" href="#_5-apt安装中使用-no-install-recommends-标志" aria-hidden="true">#</a> 5：<code>apt</code>安装中使用 <code>--no-install-recommends</code> 标志</h2><p>当我们运行 apt install 命令来安装某些包时，它会安装一些不需要的推荐包。使用 <code>--no-install-recommends</code> 标志可以显着减小镜像大小。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt update -y &amp;&amp; <span class="token operator">\\</span>
apt install unzip -y --no-install-recommends &amp;&amp; <span class="token operator">\\</span>
apt install curl --no-install-recommends -y &amp;&amp; <span class="token operator">\\</span>
apt install python3 -y --no-install-recommends</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在 <code>apk add</code> 命令中添加 <code>--no-cache</code></p><h2 id="_6-在-apt-install-命令后添加rm-rf-var-lib-apt-lists" tabindex="-1"><a class="header-anchor" href="#_6-在-apt-install-命令后添加rm-rf-var-lib-apt-lists" aria-hidden="true">#</a> 6：在 <code>apt install</code> 命令后添加<code>rm -rf /var/lib/apt/lists/*</code></h2><p>我们可以在 apt install 之后添加这个命令来减少 docker 镜像的大小。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt update -y &amp;&amp; <span class="token operator">\\</span>
apt install unzip -y --no-install-recommends &amp;&amp; <span class="token operator">\\</span>
apt install curl --no-install-recommends -y &amp;&amp; <span class="token operator">\\</span>
apt install python3 -y --no-install-recommends &amp;&amp; <span class="token operator">\\</span>
rm -rf /var/lib/apt/lists/*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-使用-dockerignore文件" tabindex="-1"><a class="header-anchor" href="#_7-使用-dockerignore文件" aria-hidden="true">#</a> 7：使用 <code>.dockerignore</code>文件</h2><p>如果您不想将某些文件复制到 docker 镜像，那么使用 <code>.dockerignore</code> 文件可以为您节省一些空间。</p><p>在构建上下文中有一些隐藏的文件/文件夹，您可以使用 ADD 或 COPY 命令（如 .git 等）将其传输到镜像。包含一个 .dockerignore 文件以减小 docker 镜像大小是一个很好的做法。</p><p><code>.dockerignore</code> 文件示例。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ignorethisfile.txt
logs/
ignorethisfolder/
.git
.cache
*.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-在-run-之后放置-copy" tabindex="-1"><a class="header-anchor" href="#_8-在-run-之后放置-copy" aria-hidden="true">#</a> 8：在 RUN 之后放置 COPY</h2><p>在某些情况下，您对代码进行了细微的更改，并且需要反复从 <code>dockerfile</code> 构建镜像。<br> 在这种情况下，将 COPY 命令放在 RUN 命令之后将有助于减小镜像大小，因为在这种情况下 docker 将能够更好地使用缓存功能。</p><p>它将为安装了依赖项的镜像创建缓存，每次更改代码时，docker 都会使用该缓存并创建镜像。它还将减少 docker 构建时间。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment">## Dockerfile-1</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt update -y &amp;&amp; <span class="token operator">\\</span>
apt install unzip -y --no-install-recommends &amp;&amp; <span class="token operator">\\</span>
apt install curl --no-install-recommends -y &amp;&amp; <span class="token operator">\\</span>
apt install python3 -y --no-install-recommends &amp;&amp; <span class="token operator">\\</span>
rm -rf /var/lib/apt/lists/*</span>
<span class="token instruction"><span class="token keyword">COPY</span> file /home/ubuntu</span>
<span class="token comment">## Dockerfile-2</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>
<span class="token instruction"><span class="token keyword">COPY</span> file /home/ubuntu</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt update -y &amp;&amp; <span class="token operator">\\</span>
apt install unzip -y --no-install-recommends &amp;&amp; <span class="token operator">\\</span>
apt install curl --no-install-recommends -y &amp;&amp; <span class="token operator">\\</span>
apt install python3 -y --no-install-recommends &amp;&amp; <span class="token operator">\\</span>
rm -rf /var/lib/apt/lists/*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述情况下，dockerfile-1 将能够比 dockerfile-2 表现得更好。另外，搜索公众号后端架构师后台回复“架构整洁”，获取一份惊喜礼包。</p><h2 id="_9-安装后删除软件包" tabindex="-1"><a class="header-anchor" href="#_9-安装后删除软件包" aria-hidden="true">#</a> 9：安装后删除软件包</h2><p>如果您需要在 docker 镜像中安装一些包，并且您是从外部下载它们，那么最好在安装后删除这些包。</p><p>例如，如果您希望从 zip 文件安装 AWS CLI V2，那么在成功安装后请记住也删除该 zip 文件。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>
<span class="token instruction"><span class="token keyword">RUN</span> curl <span class="token string">&quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot;</span> -o <span class="token string">&quot;awscliv2.zip&quot;</span> &amp;&amp; <span class="token operator">\\</span>
unzip awscliv2.zip &amp;&amp; <span class="token operator">\\</span>
sudo ./aws/install &amp;&amp; <span class="token operator">\\</span>
rm awscliv2.zip</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-使用-docker镜像缩容工具" tabindex="-1"><a class="header-anchor" href="#_10-使用-docker镜像缩容工具" aria-hidden="true">#</a> 10：使用 <code>Docker</code>镜像缩容工具</h2><p>有几个<strong>dockerfile 优化工具</strong>可以帮助你减少 docker 镜像的大小。下面列出了其中一些。</p>`,43),v=n("p",null,[n("code",null,"Dive"),e("：Dive 是一个开源工具，用于探索 Docker 镜像及其层内容，然后发现缩小 Docker/OCI 镜像大小的方法。")],-1),b={href:"https://github.com/wagoodman/dive",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,[n("code",null,"fromlatest.io"),e("：此工具将检查您的 Dockerfile 并检查可以执行的更多步骤以减小镜像大小。")],-1),g={href:"https://www.fromlatest.io/",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,[n("p",null,[n("code",null,"Docker Slim"),e("：它让你的容器更好、更小、更安全。您可以使用dockerslim 来最小化容器镜像。")])],-1);function f(y,w){const s=o("router-link"),i=o("ExternalLinkIcon");return d(),c("div",null,[r(" more "),n("nav",m,[n("ul",null,[n("li",null,[a(s,{to:"#为什么要减小-docker-镜像大小"},{default:l(()=>[e("为什么要减小 docker 镜像大小？")]),_:1})]),n("li",null,[a(s,{to:"#_1-最小化镜像层"},{default:l(()=>[e("1：最小化镜像层")]),_:1})]),n("li",null,[a(s,{to:"#_2-使用-docker-squash减小镜像大小"},{default:l(()=>[e("2：使用 Docker Squash减小镜像大小")]),_:1})]),n("li",null,[a(s,{to:"#_3-使用较小的基础镜像"},{default:l(()=>[e("3：使用较小的基础镜像")]),_:1})]),n("li",null,[a(s,{to:"#_4-使用多阶段构建来减小大小"},{default:l(()=>[e("4：使用多阶段构建来减小大小")]),_:1})]),n("li",null,[a(s,{to:"#_5-apt安装中使用-no-install-recommends-标志"},{default:l(()=>[e("5：apt安装中使用 --no-install-recommends 标志")]),_:1})]),n("li",null,[a(s,{to:"#_6-在-apt-install-命令后添加rm-rf-var-lib-apt-lists"},{default:l(()=>[e("6：在 apt install 命令后添加rm -rf /var/lib/apt/lists/*")]),_:1})]),n("li",null,[a(s,{to:"#_7-使用-dockerignore文件"},{default:l(()=>[e("7：使用 .dockerignore文件")]),_:1})]),n("li",null,[a(s,{to:"#_8-在-run-之后放置-copy"},{default:l(()=>[e("8：在 RUN 之后放置 COPY")]),_:1})]),n("li",null,[a(s,{to:"#_9-安装后删除软件包"},{default:l(()=>[e("9：安装后删除软件包")]),_:1})]),n("li",null,[a(s,{to:"#_10-使用-docker镜像缩容工具"},{default:l(()=>[e("10：使用 Docker镜像缩容工具")]),_:1})])])]),k,n("ol",null,[n("li",null,[v,n("blockquote",null,[n("p",null,[n("a",b,[e("https://github.com/wagoodman/dive"),a(i)])])])]),n("li",null,[h,n("blockquote",null,[n("p",null,[n("a",g,[e("https://www.fromlatest.io/"),a(i)])])])]),_])])}const O=t(u,[["render",f],["__file","23.减少Docker镜像大小.html.vue"]]);export{O as default};
