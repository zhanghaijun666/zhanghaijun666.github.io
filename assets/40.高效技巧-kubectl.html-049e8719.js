const n=JSON.parse(`{"key":"v-27a6a34a","path":"/61.%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/61.kubernetes%E5%BB%BA%E8%AE%BE/40.%E9%AB%98%E6%95%88%E6%8A%80%E5%B7%A7-kubectl.html","title":"高效技巧-kubectl","lang":"zh-CN","frontmatter":{"title":"高效技巧-kubectl","date":"2023-02-28T00:00:00.000Z","category":["容器技术","kubernetes建设"],"tag":["kubernetes建设"],"description":"k 命令 是否有过因为使用 kubectl 经常需要重复输入命名空间而苦恼？ function k() { cmdline=$(HISTTIMEFORMAT=\\"\\" history | awk '$2 == \\"kubectl\\" &amp;&amp; (/-n/ || /--namespace/) {for(i=2;i&lt;=NF;i++)printf(\\"%s \\",$i);print \\"\\"}' | tail -n 1) regs=('\\\\-n [\\\\w\\\\-\\\\d]+' '\\\\-n=[\\\\w\\\\-\\\\d]+' '\\\\-\\\\-namespace [\\\\w\\\\-\\\\d]+' '\\\\-\\\\-namespace=[\\\\w\\\\-\\\\d]+') for i in \\"\${!regs[@]}\\"; do reg=\${regs[i]} nsarg=$(echo $cmdline | grep -o -P \\"$reg\\") if [[ \\"$nsarg\\" == \\"\\" ]]; then continue fi cmd=\\"kubectl $nsarg $@\\" echo \\"$cmd\\" $cmd return done cmd=\\"kubectl $@\\" echo \\"$cmd\\" $cmd } ## 将上述脚本粘贴到当前shell(注册k命令到当前终端session): ## 将 k 当作 kubectl 来用，只是不需要输入命名空间，它会调用 kubectl 并自动加上上次使用的非默认的命名空间， ## 如果想切换命名空间，再常规的使用一次 kubectl 就行，","head":[["meta",{"property":"og:url","content":"https://haijunit.top/61.%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/61.kubernetes%E5%BB%BA%E8%AE%BE/40.%E9%AB%98%E6%95%88%E6%8A%80%E5%B7%A7-kubectl.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"高效技巧-kubectl"}],["meta",{"property":"og:description","content":"k 命令 是否有过因为使用 kubectl 经常需要重复输入命名空间而苦恼？ function k() { cmdline=$(HISTTIMEFORMAT=\\"\\" history | awk '$2 == \\"kubectl\\" &amp;&amp; (/-n/ || /--namespace/) {for(i=2;i&lt;=NF;i++)printf(\\"%s \\",$i);print \\"\\"}' | tail -n 1) regs=('\\\\-n [\\\\w\\\\-\\\\d]+' '\\\\-n=[\\\\w\\\\-\\\\d]+' '\\\\-\\\\-namespace [\\\\w\\\\-\\\\d]+' '\\\\-\\\\-namespace=[\\\\w\\\\-\\\\d]+') for i in \\"\${!regs[@]}\\"; do reg=\${regs[i]} nsarg=$(echo $cmdline | grep -o -P \\"$reg\\") if [[ \\"$nsarg\\" == \\"\\" ]]; then continue fi cmd=\\"kubectl $nsarg $@\\" echo \\"$cmd\\" $cmd return done cmd=\\"kubectl $@\\" echo \\"$cmd\\" $cmd } ## 将上述脚本粘贴到当前shell(注册k命令到当前终端session): ## 将 k 当作 kubectl 来用，只是不需要输入命名空间，它会调用 kubectl 并自动加上上次使用的非默认的命名空间， ## 如果想切换命名空间，再常规的使用一次 kubectl 就行，"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-23T07:13:54.000Z"}],["meta",{"property":"article:author","content":"知识库"}],["meta",{"property":"article:tag","content":"kubernetes建设"}],["meta",{"property":"article:published_time","content":"2023-02-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-23T07:13:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高效技巧-kubectl\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-23T07:13:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"知识库\\",\\"url\\":\\"https://haijunit.top\\",\\"email\\":\\"zhanghaijun_java@163.com\\"}]}"]]},"headers":[{"level":2,"title":"k 命令","slug":"k-命令","link":"#k-命令","children":[]},{"level":2,"title":"nginx 测试服务","slug":"nginx-测试服务","link":"#nginx-测试服务","children":[]},{"level":2,"title":"实用命令与脚本","slug":"实用命令与脚本","link":"#实用命令与脚本","children":[{"level":3,"title":"获取集群所有节点占用的 podCIDR","slug":"获取集群所有节点占用的-podcidr","link":"#获取集群所有节点占用的-podcidr","children":[]}]}],"git":{"createdTime":1684826034000,"updatedTime":1684826034000,"contributors":[{"name":"zhanghaijun","email":"zhanghaijun@bjtxra.com","commits":1}]},"readingTime":{"minutes":0.99,"words":298},"filePathRelative":"61.容器技术/61.kubernetes建设/40.高效技巧-kubectl.md","localizedDate":"2023年2月28日","excerpt":"\\n<h2> k 命令</h2>\\n<blockquote>\\n<p>是否有过因为使用 kubectl 经常需要重复输入命名空间而苦恼？</p>\\n</blockquote>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function-name function\\">k</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n <span class=\\"token assign-left variable\\">cmdline</span><span class=\\"token operator\\">=</span><span class=\\"token variable\\"><span class=\\"token variable\\">$(</span><span class=\\"token assign-left variable\\">HISTTIMEFORMAT</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"\\"</span> <span class=\\"token function\\">history</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">awk</span> <span class=\\"token string\\">'$2 == \\"kubectl\\" &amp;&amp; (/-n/ || /--namespace/) {for(i=2;i&lt;=NF;i++)printf(\\"%s \\",$i);print \\"\\"}'</span> <span class=\\"token operator\\">|</span> <span class=\\"token function\\">tail</span> <span class=\\"token parameter variable\\">-n</span> <span class=\\"token number\\">1</span><span class=\\"token variable\\">)</span></span>\\n <span class=\\"token assign-left variable\\">regs</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'\\\\-n [\\\\w\\\\-\\\\d]+'</span> <span class=\\"token string\\">'\\\\-n=[\\\\w\\\\-\\\\d]+'</span> <span class=\\"token string\\">'\\\\-\\\\-namespace [\\\\w\\\\-\\\\d]+'</span> <span class=\\"token string\\">'\\\\-\\\\-namespace=[\\\\w\\\\-\\\\d]+'</span><span class=\\"token punctuation\\">)</span>\\n <span class=\\"token keyword\\">for</span> <span class=\\"token for-or-select variable\\">i</span> <span class=\\"token keyword\\">in</span> <span class=\\"token string\\">\\"<span class=\\"token variable\\">\${<span class=\\"token operator\\">!</span>regs<span class=\\"token punctuation\\">[</span>@<span class=\\"token punctuation\\">]</span>}</span>\\"</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">do</span>\\n  <span class=\\"token assign-left variable\\">reg</span><span class=\\"token operator\\">=</span><span class=\\"token variable\\">\${regs<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span>}</span>\\n  <span class=\\"token assign-left variable\\">nsarg</span><span class=\\"token operator\\">=</span><span class=\\"token variable\\"><span class=\\"token variable\\">$(</span><span class=\\"token builtin class-name\\">echo</span> $cmdline <span class=\\"token operator\\">|</span> <span class=\\"token function\\">grep</span> <span class=\\"token parameter variable\\">-o</span> <span class=\\"token parameter variable\\">-P</span> <span class=\\"token string\\">\\"<span class=\\"token variable\\">$reg</span>\\"</span><span class=\\"token variable\\">)</span></span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">[</span> <span class=\\"token string\\">\\"<span class=\\"token variable\\">$nsarg</span>\\"</span> <span class=\\"token operator\\">==</span> <span class=\\"token string\\">\\"\\"</span> <span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">then</span>\\n   <span class=\\"token builtin class-name\\">continue</span>\\n  <span class=\\"token keyword\\">fi</span>\\n  <span class=\\"token assign-left variable\\">cmd</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"kubectl <span class=\\"token variable\\">$nsarg</span> <span class=\\"token variable\\">$@</span>\\"</span>\\n  <span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"<span class=\\"token variable\\">$cmd</span>\\"</span>\\n  <span class=\\"token variable\\">$cmd</span>\\n  <span class=\\"token builtin class-name\\">return</span>\\n <span class=\\"token keyword\\">done</span>\\n <span class=\\"token assign-left variable\\">cmd</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"kubectl <span class=\\"token variable\\">$@</span>\\"</span>\\n <span class=\\"token builtin class-name\\">echo</span> <span class=\\"token string\\">\\"<span class=\\"token variable\\">$cmd</span>\\"</span>\\n <span class=\\"token variable\\">$cmd</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">## 将上述脚本粘贴到当前shell(注册k命令到当前终端session):</span>\\n<span class=\\"token comment\\">## 将 k 当作 kubectl 来用，只是不需要输入命名空间，它会调用 kubectl 并自动加上上次使用的非默认的命名空间，</span>\\n<span class=\\"token comment\\">## 如果想切换命名空间，再常规的使用一次 kubectl 就行，</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
